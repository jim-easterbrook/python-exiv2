/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040301
#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN
#define SWIGPYTHON_FASTPROXY

#define SWIG_name    "_value"
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if defined(SWIGPYTHON_BUILTIN) && defined(SWIG_HEAPTYPES)
/* SWIG_HEAPTYPES is not ready for use with SWIGPYTHON_BUILTIN, but if turned on manually requires the following */
#if PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030c0000
#include <structmember.h>
#define Py_READONLY READONLY
#define Py_T_PYSSIZET T_PYSSIZET
#endif
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
  const char *chars;
  *pbytes = PyUnicode_AsUTF8String(str);
  chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
  if (chars && psize)
    *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* Increment and Decrement wrappers - for portability when using the stable abi and for performance otherwise */
#ifdef Py_LIMITED_API
# define SWIG_Py_INCREF Py_IncRef
# define SWIG_Py_XINCREF Py_IncRef
# define SWIG_Py_DECREF Py_DecRef
# define SWIG_Py_XDECREF Py_DecRef
#else
# define SWIG_Py_INCREF Py_INCREF
# define SWIG_Py_XINCREF Py_XINCREF
# define SWIG_Py_DECREF Py_DECREF
# define SWIG_Py_XDECREF Py_XDECREF
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  case SWIG_NullReferenceError:
    type = PyExc_TypeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    SWIG_Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_DECREF(old_str);
    SWIG_Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      SWIG_Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  SWIG_Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  SWIG_Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj, int is_void) {
  if (!result) {
    result = obj;
  } else if (result == Py_None && is_void) {
    SWIG_Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        SWIG_Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    SWIG_Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    SWIG_Py_DECREF(str);
    SWIG_Py_DECREF(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        SWIG_Py_DECREF(str);
        SWIG_Py_DECREF(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  SWIG_Py_DECREF(str);
  SWIG_Py_DECREF(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

#if !defined(SWIGPYTHON_BUILTIN) && PY_VERSION_HEX >= 0x03030000
#define SWIG_HEAPTYPES
#endif

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /* tp_print */
#else
      (Py_ssize_t)0,                      /* tp_vectorcall_offset */
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                  /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                  /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  SWIG_Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    SWIG_Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      SWIG_Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          SWIG_Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          SWIG_Py_DECREF(data->newraw);
          SWIG_Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        SWIG_Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  SWIG_Py_XDECREF(data->klass);
  SWIG_Py_XDECREF(data->newraw);
  SWIG_Py_XDECREF(data->newargs);
  SWIG_Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  SWIG_Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        SWIG_Py_DECREF(ofmt);
      }
    }
    SWIG_Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      SWIG_Py_DECREF(repr);
      SWIG_Py_DECREF(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      SWIG_Py_DECREF(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      SWIG_Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        SWIG_Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      SWIG_Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    SWIG_Py_XDECREF(Swig_Capsule_global);
  }
  SWIG_Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  SWIG_Py_XDECREF(sobj->dict);
#endif
  PyObject_Free(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  SWIG_Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    SWIG_Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SWIG_Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        SWIG_Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      SWIG_Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_Free(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_Free((PyObject *)sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
#if PY_VERSION_HEX >= 0x030d0000
    PyWeakref_GetRef(pyobj, &pyobj);
    Py_DECREF(pyobj);
#else
    pyobj = PyWeakref_GET_OBJECT(pyobj);
#endif
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	SWIG_Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    SWIG_Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            SWIG_Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          SWIG_Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        SWIG_Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        SWIG_Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            SWIG_Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      SWIG_Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      SWIG_Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SWIG_Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    SWIG_Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  SWIG_Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  SWIG_Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  SWIG_Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      SWIG_Py_DECREF(pointer);
    }
  } else {
    SWIG_Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  SWIG_Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      SWIG_Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Py_XDECREF(bytes);
      SWIG_Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  (void) obj;
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	SWIG_Py_XDECREF(bytes);
	SWIG_Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    SWIG_Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      SWIG_Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    SWIG_Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  SWIG_Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN Py_hash_t
SwigPyObject_hash(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  void *ptr = sobj->ptr;
#if PY_VERSION_HEX < 0x03020000
  return (Py_hash_t)(Py_ssize_t)ptr;
#else
  return (Py_hash_t)ptr;
#endif
}

SWIGINTERN Py_hash_t
SWIG_PyNumber_AsPyHash(PyObject *obj) {
  Py_hash_t result = -1;
#if PY_VERSION_HEX < 0x03020000
  if (PyInt_Check(obj))
    result = PyInt_AsLong(obj);
  else if (PyLong_Check(obj))
    result = PyLong_AsLong(obj);
#else
  if (PyNumber_Check(obj))
    result = PyNumber_AsSsize_t(obj, NULL);
#endif
  else
    PyErr_Format(PyExc_TypeError, "Wrong type for hash function");
  return PyErr_Occurred() ? -1 : result;
}

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", obj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  SWIG_Py_INCREF(val);
  PyTuple_SET_ITEM(tuple, 0, val);
  result = (*getset->set)(obj, tuple);
  SWIG_Py_DECREF(tuple);
  SWIG_Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  SWIG_Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  PyObject_GC_UnTrack(descr);
  SWIG_Py_XDECREF((PyObject *)PyDescr_TYPE(descr));
  SWIG_Py_XDECREF((PyObject *)PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyObject *typeobject, PyObject *name, PyObject *value) {
  PyObject *attribute;
  PyTypeObject *type;
  descrsetfunc local_set;

  assert(PyType_Check(typeobject));
  type = (PyTypeObject *)typeobject;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "swig_static_var_getset_descriptor",      /* tp_name */
      sizeof(PyGetSetDescrObject),              /* tp_basicsize */
      0,                                        /* tp_itemsize */
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                        /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                        /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
  }
  return &staticvar_type;
}

SWIGINTERN PyTypeObject*
SwigPyObjectType(void) {
  static char swigpyobjecttype_doc[] = "Metaclass for SWIG wrapped types";
  static PyTypeObject swigpyobjecttype_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "SwigPyObjectType",                       /* tp_name */
      PyType_Type.tp_basicsize,                 /* tp_basicsize */
      0,                                        /* tp_itemsize */
      0,                                        /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      0,                                        /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      0,                                        /* tp_getattro */
      SwigPyObjectType_setattro,                /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      swigpyobjecttype_doc,                     /* tp_doc */
      0,                                        /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      0,                                        /* tp_descr_get */
      0,                                        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                        /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                        /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    swigpyobjecttype_type = tmp;
    type_init = 1;
    swigpyobjecttype_type.tp_base = &PyType_Type;
    if (PyType_Ready(&swigpyobjecttype_type) < 0)
      return NULL;
  }
  return &swigpyobjecttype_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  SWIG_Py_XINCREF((PyObject *)type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    SWIG_Py_DECREF((PyObject *)descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN PyObject *
SwigPyBuiltin_InitBases(PyTypeObject **bases) {
  Py_ssize_t base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  Py_ssize_t i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    SWIG_Py_INCREF((PyObject *)bases[i]);
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
  }
  return tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  SWIG_Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x030900a4
    Py_SET_TYPE(type, metatype);
#else
    Py_TYPE(type) = metatype;
#endif
}


/* Start of callback function macros for use in PyTypeObject */

typedef PyObject *(*SwigPyWrapperFunction)(PyObject *, PyObject *);

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_unaryfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_unaryfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_unaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)			\
SWIGINTERN void							\
wrapper##_destructor_closure(PyObject *a) {			\
    SwigPyBuiltin_destructor_closure(wrapper, #wrapper, a);	\
}
SWIGINTERN void
SwigPyBuiltin_destructor_closure(SwigPyWrapperFunction wrapper, const char *wrappername, PyObject *a) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)a;
  SWIG_Py_XDECREF(sobj->dict);
  if (sobj->own) {
    PyObject *o;
    PyObject *type = 0, *value = 0, *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    o = wrapper(a, NULL);
    if (!o) {
      PyObject *deallocname = PyString_FromString(wrappername);
      PyErr_WriteUnraisable(deallocname);
      SWIG_Py_DECREF(deallocname);
    }
    PyErr_Restore(type, value, traceback);
    SWIG_Py_XDECREF(o);
  }
  if (PyType_IS_GC(a->ob_type)) {
    PyObject_GC_Del(a);
  } else {
    PyObject_Free(a);
  }
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)			\
SWIGINTERN int						\
wrapper##_inquiry_closure(PyObject *a) {		\
  return SwigPyBuiltin_inquiry_closure(wrapper, a);	\
}
SWIGINTERN int
SwigPyBuiltin_inquiry_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  int result;
  pyresult = wrapper(a, NULL);
  result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;
  SWIG_Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_GETITERFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_getiterfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_getiterfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_getiterfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_binaryfunc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_binaryfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_binaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ternaryfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternaryfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    SWIG_Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)					\
SWIGINTERN PyObject *								\
wrapper##_ternarycallfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternarycallfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternarycallfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  (void) c;
  return wrapper(a, b);
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_lenfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_lenfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_ssize_t
SwigPyBuiltin_lenfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *resultobj;
  Py_ssize_t result;
  resultobj = wrapper(a, NULL);
  result = PyNumber_AsSsize_t(resultobj, NULL);
  SWIG_Py_DECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *								\
wrapper##_ssizessizeargfunc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
  return SwigPyBuiltin_ssizessizeargfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizessizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)						\
SWIGINTERN int											\
wrapper##_ssizessizeobjargproc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {	\
  return SwigPyBuiltin_ssizessizeobjargproc_closure(wrapper, a, b, c, d);			\
}
SWIGINTERN int
SwigPyBuiltin_ssizessizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(d ? 3 : 2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  if (d) {
    SWIG_Py_INCREF(d);
    PyTuple_SET_ITEM(tuple, 2, d);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  SWIG_Py_DECREF(tuple);
  SWIG_Py_XDECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_funpack_ssizeargfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_funpack_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_ssizeargfunc_closure(wrapper, a, b);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *arg, *result;
  arg = _PyLong_FromSsize_t(b);
  result = wrapper(a, arg);
  SWIG_Py_DECREF(arg);
  return result;
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_ssizeobjargproc_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
  return SwigPyBuiltin_ssizeobjargproc_closure(wrapper, a, b, c);		\
}
SWIGINTERN int
SwigPyBuiltin_ssizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  if (c) {
    SWIG_Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  SWIG_Py_XDECREF(resultobj);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  PyObject *tuple;
  tuple = PyTuple_New(1);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  pyresult = wrapper(a, tuple);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  SWIG_Py_XDECREF(pyresult);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {		\
  return SwigPyBuiltin_funpack_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_funpack_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  pyresult = wrapper(a, b);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  SWIG_Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_objobjargproc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_objobjargproc_closure(wrapper, a, b, c);			\
}
SWIGINTERN int
SwigPyBuiltin_objobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(c ? 2 : 1);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    SWIG_Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  SWIG_Py_XDECREF(resultobj);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_reprfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_reprfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_reprfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)		\
SWIGINTERN Py_hash_t					\
wrapper##_hashfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_hashfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_hash_t
SwigPyBuiltin_hashfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  Py_hash_t result;
  pyresult = wrapper(a, NULL);
  if (!pyresult)
    return -1;
  result = SWIG_PyNumber_AsPyHash(pyresult);
  SWIG_Py_DECREF(pyresult);
  return result;
}

#define SWIGPY_ITERNEXTFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_iternextfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_iternextfunc_closure(wrapper, a);\
}
SWIGINTERN PyObject *
SwigPyBuiltin_iternextfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

/* End of callback function macros for use in PyTypeObject */

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Exiv2__AsciiValue swig_types[0]
#define SWIGTYPE_p_Exiv2__CommentValue swig_types[1]
#define SWIGTYPE_p_Exiv2__DataBuf swig_types[2]
#define SWIGTYPE_p_Exiv2__DataValue swig_types[3]
#define SWIGTYPE_p_Exiv2__DateValue swig_types[4]
#define SWIGTYPE_p_Exiv2__DateValue__Date swig_types[5]
#define SWIGTYPE_p_Exiv2__LangAltValue swig_types[6]
#define SWIGTYPE_p_Exiv2__StringValue swig_types[7]
#define SWIGTYPE_p_Exiv2__StringValueBase swig_types[8]
#define SWIGTYPE_p_Exiv2__TimeValue swig_types[9]
#define SWIGTYPE_p_Exiv2__TimeValue__Time swig_types[10]
#define SWIGTYPE_p_Exiv2__Value swig_types[11]
#define SWIGTYPE_p_Exiv2__ValueTypeT_double_t swig_types[12]
#define SWIGTYPE_p_Exiv2__ValueTypeT_float_t swig_types[13]
#define SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t swig_types[14]
#define SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t swig_types[15]
#define SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t swig_types[16]
#define SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t swig_types[17]
#define SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t swig_types[18]
#define SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t swig_types[19]
#define SWIGTYPE_p_Exiv2__XmpArrayValue swig_types[20]
#define SWIGTYPE_p_Exiv2__XmpTextValue swig_types[21]
#define SWIGTYPE_p_Exiv2__XmpValue swig_types[22]
#define SWIGTYPE_p_SwigPyObject swig_types[23]
#define SWIGTYPE_p_ValueType swig_types[24]
#define SWIGTYPE_p_allocator_type swig_types[25]
#define SWIGTYPE_p_char swig_types[26]
#define SWIGTYPE_p_const_iterator swig_types[27]
#define SWIGTYPE_p_difference_type swig_types[28]
#define SWIGTYPE_p_double swig_types[29]
#define SWIGTYPE_p_first_type swig_types[30]
#define SWIGTYPE_p_float swig_types[31]
#define SWIGTYPE_p_int swig_types[32]
#define SWIGTYPE_p_iterator swig_types[33]
#define SWIGTYPE_p_key_type swig_types[34]
#define SWIGTYPE_p_long_long swig_types[35]
#define SWIGTYPE_p_mapped_type swig_types[36]
#define SWIGTYPE_p_second_type swig_types[37]
#define SWIGTYPE_p_short swig_types[38]
#define SWIGTYPE_p_signed_char swig_types[39]
#define SWIGTYPE_p_size_type swig_types[40]
#define SWIGTYPE_p_std__ostream swig_types[41]
#define SWIGTYPE_p_std__pairT_int32_t_int32_t_t swig_types[42]
#define SWIGTYPE_p_std__pairT_uint32_t_uint32_t_t swig_types[43]
#define SWIGTYPE_p_unsigned_char swig_types[44]
#define SWIGTYPE_p_unsigned_int swig_types[45]
#define SWIGTYPE_p_unsigned_long_long swig_types[46]
#define SWIGTYPE_p_unsigned_short swig_types[47]
#define SWIGTYPE_p_value_type swig_types[48]
static swig_type_info *swig_types[50];
static swig_module_info swig_module = {swig_types, 49, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _value.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__value

#else
#  define SWIG_init    init_value

#endif

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        SWIG_Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(item._obj);
      SWIG_Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      SWIG_Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static swig_type_info* info = 0;
  if (!info) {
    info = SWIG_TypeQuery("_p_char");
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include "exiv2/exiv2.hpp"


#define INIT_ERROR_RETURN NULL


#include <stdint.h>		// Use the C99 official header


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <utility>


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICEOBJECT PyObject
#else
# define SWIGPY_SLICEOBJECT PySliceObject
#endif


namespace swig {
  struct stop_iteration {
  };

  struct SwigPyIterator {
  private:
    SwigPtr_PyObject _seq;

  protected:
    SwigPyIterator(PyObject *seq) : _seq(seq)
    {
    }
      
  public:
    virtual ~SwigPyIterator() {}

    // Access iterator method, required by Python
    virtual PyObject *value() const = 0;

    // Forward iterator method, required by Python
    virtual SwigPyIterator *incr(size_t n = 1) = 0;
    
    // Backward iterator method, very common in C++, but not required in Python
    virtual SwigPyIterator *decr(size_t /*n*/ = 1)
    {
      throw stop_iteration();
    }

    // Random access iterator methods, but not required in Python
    virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }

    virtual bool equal (const SwigPyIterator &/*x*/) const
    {
      throw std::invalid_argument("operation not supported");
    }
    
    // C++ common/needed methods
    virtual SwigPyIterator *copy() const = 0;

    PyObject *next()     
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      PyObject *obj = value();
      incr();       
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
      return obj;     
    }

    /* Make an alias for Python 3.x */
    PyObject *__next__()
    {
      return next();
    }

    PyObject *previous()
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
      decr();
      PyObject *obj = value();
      SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
      return obj;
    }

    SwigPyIterator *advance(ptrdiff_t n)
    {
      return  (n > 0) ?  incr(n) : decr(-n);
    }
      
    bool operator == (const SwigPyIterator& x)  const
    {
      return equal(x);
    }
      
    bool operator != (const SwigPyIterator& x) const
    {
      return ! operator==(x);
    }
      
    SwigPyIterator& operator += (ptrdiff_t n)
    {
      return *advance(n);
    }

    SwigPyIterator& operator -= (ptrdiff_t n)
    {
      return *advance(-n);
    }
      
    SwigPyIterator* operator + (ptrdiff_t n) const
    {
      return copy()->advance(n);
    }

    SwigPyIterator* operator - (ptrdiff_t n) const
    {
      return copy()->advance(-n);
    }
      
    ptrdiff_t operator - (const SwigPyIterator& x) const
    {
      return x.distance(*this);
    }
      
    static swig_type_info* descriptor() {
      static swig_type_info* desc = SWIG_TypeQuery("swig::SwigPyIterator *");
      return desc;
    }    
  };

#if defined(SWIGPYTHON_BUILTIN)
  inline PyObject* make_output_iterator_builtin (PyObject *pyself)
  {
    SWIG_Py_INCREF(pyself);
    return pyself;
  }
#endif
}


#include <algorithm>


#include <map>


#include <algorithm>


#include <vector>


static PyObject* PyExc_Exiv2Error = NULL;


static PyObject* exiv2_module = NULL;


static PyObject* PyEnum_Exiv2_ErrorCode = NULL;


static PyObject* get_enum_typeobject_Exiv2_ErrorCode() {
    if (!PyEnum_Exiv2_ErrorCode)
        PyEnum_Exiv2_ErrorCode = PyObject_GetAttrString(
            exiv2_module, "ErrorCode");
    return PyEnum_Exiv2_ErrorCode;
};


static PyObject* py_from_enum_Exiv2_ErrorCode(long value) {
    PyObject* py_int = PyLong_FromLong(value);
    if (!py_int)
        return NULL;
    PyObject* result = PyObject_CallFunctionObjArgs(
        get_enum_typeobject_Exiv2_ErrorCode(), py_int, NULL);
    if (!result) {
        // Assume value is not currently in enum, so return int
        PyErr_Clear();
        return py_int;
        }
    Py_DECREF(py_int);
    return result;
};


#ifdef _WIN32
#include <windows.h>

static int _transcode(std::string *str, UINT cp_in, UINT cp_out) {
    if (cp_out == cp_in)
        return 0;
    int size = MultiByteToWideChar(cp_in, 0, &(*str)[0], (int)str->size(),
                                   NULL, 0);
    if (!size)
        return GetLastError();
    std::wstring wide_str;
    wide_str.resize(size);
    if (!MultiByteToWideChar(cp_in, 0, &(*str)[0], (int)str->size(),
                             &wide_str[0], size))
        return GetLastError();
    size = WideCharToMultiByte(cp_out, 0, &wide_str[0], (int)wide_str.size(),
                               NULL, 0, NULL, NULL);
    if (!size)
        return GetLastError();
    str->resize(size);
    if (!WideCharToMultiByte(cp_out, 0, &wide_str[0], (int)wide_str.size(),
                             &(*str)[0], size, NULL, NULL))
        return GetLastError();
    return 0;
};
#endif

static int utf8_to_wcp(std::string *str) {
#ifdef _WIN32
    return _transcode(str, CP_UTF8, GetACP());
#else
    return 0;
#endif
};

static int wcp_to_utf8(std::string *str) {
#ifdef _WIN32
    return _transcode(str, GetACP(), CP_UTF8);
#else
    return 0;
#endif
};


static void _set_python_exception() {
    try {
        throw;
    }

    catch(Exiv2::AnyError const& e) {



        std::string msg = e.what();
        if (wcp_to_utf8(&msg))
            msg = e.what();
        PyObject* args = Py_BuildValue(
            "Ns", py_from_enum_Exiv2_ErrorCode
            (static_cast<long>(e.code())), msg.c_str());
        PyErr_SetObject(PyExc_Exiv2Error, args);
        Py_DECREF(args);
    }
    /*@SWIG:/usr/local/share/swig/4.3.1/typemaps/exception.swg,59,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
  catch (std::invalid_argument& e) {
    SWIG_exception_fail(SWIG_ValueError, e.what() );
  } catch (std::domain_error& e) {
    SWIG_exception_fail(SWIG_ValueError, e.what() );
  } catch (std::overflow_error& e) {
    SWIG_exception_fail(SWIG_OverflowError, e.what() );
  } catch (std::out_of_range& e) {
    SWIG_exception_fail(SWIG_IndexError, e.what() );
  } catch (std::length_error& e) {
    SWIG_exception_fail(SWIG_IndexError, e.what() );
  } catch (std::runtime_error& e) {
    SWIG_exception_fail(SWIG_RuntimeError, e.what() );
  } catch (std::exception& e) {
    SWIG_exception_fail(SWIG_SystemError, e.what() );
  }
/*@SWIG@*/
fail:
    return;
};


// Function to append a name, value pair to a list of enum members
static void extend_enum_list(PyObject* list, const char* label, int value) {
    PyObject* py_obj = Py_BuildValue("(si)", label, value);
    PyList_Append(list, py_obj);
    Py_DECREF(py_obj);
};
// Function to return enum members as Python list

static PyObject* _get_enum_list(int dummy, ...) {
    va_list args;
    va_start(args, dummy);
    char* label;
    PyObject* py_obj = NULL;
    PyObject* result = PyList_New(0);
    label = va_arg(args, char*);
    while (label) {
        extend_enum_list(result, label, va_arg(args, int));
        label = va_arg(args, char*);
    }
    va_end(args);
    return result;
};


PyObject* _enum_list_CharsetId() {
    return _get_enum_list(0, "ascii",Exiv2::CommentValue::ascii,"jis",Exiv2::CommentValue::jis,"unicode",Exiv2::CommentValue::unicode,"undefined",Exiv2::CommentValue::undefined,"invalidCharsetId",Exiv2::CommentValue::invalidCharsetId,"lastCharsetId",Exiv2::CommentValue::lastCharsetId, NULL);
};


PyObject* _enum_list_XmpArrayType() {
    return _get_enum_list(0, "xaNone",Exiv2::XmpValue::xaNone,"xaAlt",Exiv2::XmpValue::xaAlt,"xaBag",Exiv2::XmpValue::xaBag,"xaSeq",Exiv2::XmpValue::xaSeq, NULL);
};


PyObject* _enum_list_XmpStruct() {
    return _get_enum_list(0, "xsNone",Exiv2::XmpValue::xsNone,"xsStruct",Exiv2::XmpValue::xsStruct, NULL);
};


static PyObject* list_getset(
        PyObject* obj, PyObject* (*conv)(PyObject*, PyGetSetDef*)) {
    PyGetSetDef* getset = Py_TYPE(obj)->tp_getset;
    PyObject* result = PyList_New(0);
    PyObject* item = NULL;
    while (getset->name) {
        // __dict__ is also in the getset list
        if (getset->name[0] != '_') {
            item = (*conv)(obj, getset);
            PyList_Append(result, item);
            Py_DECREF(item);
        }
        getset++;
    }
    return result;
};
static PyGetSetDef* find_getset(PyObject* obj, PyObject* name,
                                bool strip, bool required) {
    if (!PyUnicode_Check(name))
        return NULL;
    Py_ssize_t size = 0;
    const char* c_name = PyUnicode_AsUTF8AndSize(name, &size);
    bool truncate = strip && size > 0 && c_name[size - 1] != '_';
    PyGetSetDef* getset = Py_TYPE(obj)->tp_getset;
    size_t len = 0;
    while (getset->name) {
        len = strlen(getset->name);
        if (truncate && getset->name[len - 1] == '_')
            len--;
        if (len == (size_t) size && strncmp(getset->name, c_name, len) == 0)
            return getset;
        getset++;
    }
    if (required)
        PyErr_Format(PyExc_AttributeError,
            "'%s' object has no attribute '%U'",
            Py_TYPE(obj)->tp_name, name);
    return NULL;
};
static int getset_set(PyObject* obj, PyObject* name, PyObject* value,
                      bool strip, bool required) {
    PyGetSetDef* getset = find_getset(obj, name, strip, required);
    if (getset) {

        if (!value) {
            PyErr_Format(PyExc_TypeError,
                "%s.%s can not be deleted", Py_TYPE(obj)->tp_name, getset->name);
            return -1;
        }

        return getset->set(obj, value, getset->closure);
    }
    if (required)
        return -1;
    return PyObject_GenericSetAttr(obj, name, value);
};
static PyObject* getset_to_value(PyObject* obj, PyGetSetDef* getset) {
    return Py_BuildValue("N", getset->get(obj, getset->closure));
};
static PyObject* getset_to_item_strip(PyObject* obj, PyGetSetDef* getset) {
    return Py_BuildValue("(s#N)", getset->name, strlen(getset->name) - 1,
        getset->get(obj, getset->closure));
};
static PyObject* getset_to_item_nostrip(PyObject* obj, PyGetSetDef* getset) {
    return Py_BuildValue("(sN)", getset->name,
        getset->get(obj, getset->closure));
};
static PyObject* getset_to_key_strip(PyObject* obj, PyGetSetDef* getset) {
    return Py_BuildValue("s#", getset->name, strlen(getset->name) - 1);
};
static PyObject* getset_to_key_nostrip(PyObject* obj, PyGetSetDef* getset) {
    return Py_BuildValue("s", getset->name);
};
static int set_attr_strip(PyObject* obj, PyObject* name, PyObject* value) {
   return getset_set(obj, name, value, true, false);
};

static int set_attr_nostrip(PyObject* obj, PyObject* name, PyObject* value) {
    return getset_set(obj, name, value, false, false);
};

static PyObject* get_attr_strip(PyObject* obj, PyObject* name) {
    PyGetSetDef* getset = find_getset(obj, name, true, false);
    if (getset)
        return getset_to_value(obj, getset);
    return PyObject_GenericGetAttr(obj, name);
};


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
  template <class Iterator>
  struct iterator_traits {
    typedef ptrdiff_t difference_type;
    typedef typename Iterator::value_type value_type;
  };

  template <class Iterator, class Category,class T, class Reference, class Pointer, class Distance>
  struct iterator_traits<__reverse_bi_iterator<Iterator,Category,T,Reference,Pointer,Distance> > {
    typedef Distance difference_type;
    typedef T value_type;
  };

  template <class T>
  struct iterator_traits<T*> {
    typedef T value_type;
    typedef ptrdiff_t difference_type;
  };

  template<typename _InputIterator>
  inline typename iterator_traits<_InputIterator>::difference_type
  distance(_InputIterator __first, _InputIterator __last)
  {
    typename iterator_traits<_InputIterator>::difference_type __n = 0;
    while (__first != __last) {
      ++__first; ++__n;
    }
    return __n;
  }
}
#endif


namespace swig {
  template<typename OutIterator>
  class SwigPyIterator_T :  public SwigPyIterator
  {
  public:
    typedef OutIterator out_iterator;
    typedef typename std::iterator_traits<out_iterator>::value_type value_type;    
    typedef SwigPyIterator_T<out_iterator> self_type;

    SwigPyIterator_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator(seq), current(curr)
    {
    }

    const out_iterator& get_current() const
    {
      return current;
    }

    
    bool equal (const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return (current == iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }
    
    ptrdiff_t distance(const SwigPyIterator &iter) const
    {
      const self_type *iters = dynamic_cast<const self_type *>(&iter);
      if (iters) {
	return std::distance(current, iters->get_current());
      } else {
	throw std::invalid_argument("bad iterator type");
      }
    }    
    
  protected:
    out_iterator current;
  };
  
  template <class ValueType>
  struct from_oper 
  {
    typedef const ValueType& argument_type;
    typedef PyObject *result_type;
    result_type operator()(argument_type v) const
    {
      return swig::from(v);
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorOpen_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq)
    {
    }
    
    PyObject *value() const {
      return from(static_cast<const value_type&>(*(base::current)));
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	++base::current;
      }
      return this;
    }

  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorOpen_T :  public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
      : SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	--base::current;
      }
      return this;
    }
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyForwardIteratorClosed_T :  public SwigPyIterator_T<OutIterator>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;    
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
    {
    }
    
    PyObject *value() const {
      if (base::current == end) {
	throw stop_iteration();
      } else {
	return from(static_cast<const value_type&>(*(base::current)));
      }
    }
    
    SwigPyIterator *copy() const
    {
      return new self_type(*this);
    }

    SwigPyIterator *incr(size_t n = 1)
    {
      while (n--) {
	if (base::current == end) {
	  throw stop_iteration();
	} else {
	  ++base::current;
	}
      }
      return this;
    }

  protected:
    out_iterator begin;
    out_iterator end;
  };

  template<typename OutIterator, 
	   typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
	   typename FromOper = from_oper<ValueType> >
  class SwigPyIteratorClosed_T :  public SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>
  {
  public:
    FromOper from;
    typedef OutIterator out_iterator;
    typedef ValueType value_type;
    typedef SwigPyIterator_T<out_iterator>  base;
    typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
    typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;
    
    SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
      : SwigPyForwardIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
    {
    }

    SwigPyIterator *decr(size_t n = 1)
    {
      while (n--) {
	if (base::current == base0::begin) {
	  throw stop_iteration();
	} else {
	  --base::current;
	}
      }
      return this;
    }
  };


  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, const OutIter& begin,const OutIter& end, PyObject *seq = 0)
  {
    return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
  }

  template<typename OutIter>
  inline SwigPyIterator*
  make_output_iterator(const OutIter& current, PyObject *seq = 0)
  {
    return new SwigPyIteratorOpen_T<OutIter>(current, seq);
  }

}


#include <functional>

namespace std {
  template <>
  struct less <PyObject *>
  {
    bool
    operator()(PyObject * v, PyObject *w) const
    { 
      bool res;
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
      /* This may fall into a case of inconsistent
               eg. ObjA > ObjX > ObjB
               but ObjA < ObjB
      */
      if( PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError) )
      {
        /* Objects can't be compared, this mostly occurred in Python 3.0 */
        /* Compare their ptr directly for a workaround */
        res = (v < w);
        PyErr_Clear();
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
      return res;
    }
  };

  template <>
  struct less <swig::SwigPtr_PyObject>
  {
    bool
    operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

  template <>
  struct less <swig::SwigVar_PyObject>
  {
    bool
    operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
    {
      return std::less<PyObject *>()(v, w);
    }
  };

}

namespace swig {
  template <> struct traits<PyObject *> {
    typedef value_category category;
    static const char* type_name() { return "PyObject *"; }
  };  

  template <>  struct traits_asval<PyObject * > {   
    typedef PyObject * value_type;
    static int asval(PyObject *obj, value_type *val) {
      if (val) *val = obj;
      return SWIG_OK;
    }
  };

  template <> 
  struct traits_check<PyObject *, value_category> {
    static bool check(PyObject *) {
      return true;
    }
  };

  template <>  struct traits_from<PyObject *> {
    typedef PyObject * value_type;
    static PyObject *from(const value_type& val) {
      SWIG_Py_XINCREF(val);
      return val;
    }
  };
  
}

namespace swig {
  template <class Difference>
  inline size_t
  check_index(Difference i, size_t size, bool insert = false) {
    if ( i < 0 ) {
      if ((size_t) (-i) <= size)
	return (size_t) (i + size);
    } else if ( (size_t) i < size ) {
      return (size_t) i;
    } else if (insert && ((size_t) i == size)) {
      return size;
    }
    throw std::out_of_range("index out of range");
  }

  template <class Difference>
  void
  slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
    if (step == 0) {
      throw std::invalid_argument("slice step cannot be zero");
    } else if (step > 0) {
      // Required range: 0 <= i < size, 0 <= j < size, i <= j
      if (i < 0) {
        ii = 0;
      } else if (i < (Difference)size) {
        ii = i;
      } else if (insert && (i >= (Difference)size)) {
        ii = (Difference)size;
      }
      if (j < 0) {
        jj = 0;
      } else {
        jj = (j < (Difference)size) ? j : (Difference)size;
      }
      if (jj < ii)
        jj = ii;
    } else {
      // Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
      if (i < -1) {
        ii = -1;
      } else if (i < (Difference) size) {
        ii = i;
      } else if (i >= (Difference)(size-1)) {
        ii = (Difference)(size-1);
      }
      if (j < -1) {
        jj = -1;
      } else {
        jj = (j < (Difference)size ) ? j : (Difference)(size-1);
      }
      if (ii < jj)
        ii = jj;
    }
  }

  template <class Sequence, class Difference>
  inline typename Sequence::iterator
  getpos(Sequence* self, Difference i)  {
    typename Sequence::iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence, class Difference>
  inline typename Sequence::const_iterator
  cgetpos(const Sequence* self, Difference i)  {
    typename Sequence::const_iterator pos = self->begin();
    std::advance(pos, check_index(i,self->size()));
    return pos;
  }

  template <class Sequence>
  inline void
  erase(Sequence* seq, const typename Sequence::iterator& position) {
    seq->erase(position);
  }

  template <class Sequence>
  struct traits_reserve {
    static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
      // This should be specialized for types that support reserve
    }
  };

  template <class Sequence, class Difference>
  inline Sequence*
  getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj);

    if (step > 0) {
      typename Sequence::const_iterator sb = self->begin();
      typename Sequence::const_iterator se = self->begin();
      std::advance(sb,ii);
      std::advance(se,jj);
      if (step == 1) {
        return new Sequence(sb, se);
      } else {
        Sequence *sequence = new Sequence();
        swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
        typename Sequence::const_iterator it = sb;
        while (it!=se) {
          sequence->push_back(*it);
          for (Py_ssize_t c=0; c<step && it!=se; ++c)
            it++;
        }
        return sequence;
      } 
    } else {
      Sequence *sequence = new Sequence();
      swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
      typename Sequence::const_reverse_iterator sb = self->rbegin();
      typename Sequence::const_reverse_iterator se = self->rbegin();
      std::advance(sb,size-ii-1);
      std::advance(se,size-jj-1);
      typename Sequence::const_reverse_iterator it = sb;
      while (it!=se) {
        sequence->push_back(*it);
        for (Py_ssize_t c=0; c<-step && it!=se; ++c)
          it++;
      }
      return sequence;
    }
  }

  template <class Sequence, class Difference, class InputSeq>
  inline void
  setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      if (step == 1) {
        size_t ssize = jj - ii;
        if (ssize <= is.size()) {
          // expanding/staying the same size
          swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
          typename Sequence::iterator sb = self->begin();
          typename InputSeq::const_iterator isit = is.begin();
          std::advance(sb,ii);
          std::advance(isit, jj - ii);
          self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
        } else {
          // shrinking
          typename Sequence::iterator sb = self->begin();
          typename Sequence::iterator se = self->begin();
          std::advance(sb,ii);
          std::advance(se,jj);
          self->erase(sb,se);
          sb = self->begin();
          std::advance(sb,ii);
          self->insert(sb, is.begin(), is.end());
        }
      } else {
        size_t replacecount = (jj - ii + step - 1) / step;
        if (is.size() != replacecount) {
          char msg[1024];
          PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
          throw std::invalid_argument(msg);
        }
        typename Sequence::const_iterator isit = is.begin();
        typename Sequence::iterator it = self->begin();
        std::advance(it,ii);
        for (size_t rc=0; rc<replacecount && it != self->end(); ++rc) {
          *it++ = *isit++;
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
        }
      }
    } else {
      size_t replacecount = (ii - jj - step - 1) / -step;
      if (is.size() != replacecount) {
        char msg[1024];
        PyOS_snprintf(msg, sizeof(msg), "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
        throw std::invalid_argument(msg);
      }
      typename Sequence::const_iterator isit = is.begin();
      typename Sequence::reverse_iterator it = self->rbegin();
      std::advance(it,size-ii-1);
      for (size_t rc=0; rc<replacecount && it != self->rend(); ++rc) {
        *it++ = *isit++;
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
      }
    }
  }

  template <class Sequence, class Difference>
  inline void
  delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
    typename Sequence::size_type size = self->size();
    Difference ii = 0;
    Difference jj = 0;
    swig::slice_adjust(i, j, step, size, ii, jj, true);
    if (step > 0) {
      typename Sequence::iterator sb = self->begin();
      std::advance(sb,ii);
      if (step == 1) {
        typename Sequence::iterator se = self->begin();
        std::advance(se,jj);
        self->erase(sb,se);
      } else {
        typename Sequence::iterator it = sb;
        size_t delcount = (jj - ii + step - 1) / step;
        while (delcount) {
          it = self->erase(it);
          for (Py_ssize_t c=0; c<(step-1) && it != self->end(); ++c)
            it++;
          delcount--;
        }
      }
    } else {
      typename Sequence::reverse_iterator sb = self->rbegin();
      std::advance(sb,size-ii-1);
      typename Sequence::reverse_iterator it = sb;
      size_t delcount = (ii - jj - step - 1) / -step;
      while (delcount) {
        it = typename Sequence::reverse_iterator(self->erase((++it).base()));
        for (Py_ssize_t c=0; c<(-step-1) && it != self->rend(); ++c)
          it++;
        delcount--;
      }
    }
  }
}


static PyObject* PyEnum_Exiv2_ByteOrder = NULL;


static PyObject* get_enum_typeobject_Exiv2_ByteOrder() {
    if (!PyEnum_Exiv2_ByteOrder)
        PyEnum_Exiv2_ByteOrder = PyObject_GetAttrString(
            exiv2_module, "ByteOrder");
    return PyEnum_Exiv2_ByteOrder;
};


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


static PyObject* Py_IntEnum = NULL;


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    SWIG_Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        SWIG_Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        SWIG_Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    PyErr_Clear();
    static swig_type_info *descriptor = SWIG_TypeQuery("std::string" " *");
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


static PyObject* PyEnum_Exiv2_TypeId = NULL;


static PyObject* get_enum_typeobject_Exiv2_TypeId() {
    if (!PyEnum_Exiv2_TypeId)
        PyEnum_Exiv2_TypeId = PyObject_GetAttrString(
            exiv2_module, "TypeId");
    return PyEnum_Exiv2_TypeId;
};


static PyObject* py_from_enum_Exiv2_TypeId(long value) {
    PyObject* py_int = PyLong_FromLong(value);
    if (!py_int)
        return NULL;
    PyObject* result = PyObject_CallFunctionObjArgs(
        get_enum_typeobject_Exiv2_TypeId(), py_int, NULL);
    if (!result) {
        // Assume value is not currently in enum, so return int
        PyErr_Clear();
        return py_int;
        }
    Py_DECREF(py_int);
    return result;
};


static swig_type_info* get_type_object(Exiv2::TypeId type_id) {
    switch(type_id) {
        case Exiv2::asciiString:
            return SWIGTYPE_p_Exiv2__AsciiValue;
        case Exiv2::unsignedShort:
            return SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t;
        case Exiv2::unsignedLong:
        case Exiv2::tiffIfd:
            return SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t;
        case Exiv2::unsignedRational:
            return SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t;
        case Exiv2::signedShort:
            return SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t;
        case Exiv2::signedLong:
            return SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t;
        case Exiv2::signedRational:
            return SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t;
        case Exiv2::tiffFloat:
            return SWIGTYPE_p_Exiv2__ValueTypeT_float_t;
        case Exiv2::tiffDouble:
            return SWIGTYPE_p_Exiv2__ValueTypeT_double_t;
        case Exiv2::string:
            return SWIGTYPE_p_Exiv2__StringValue;
        case Exiv2::date:
            return SWIGTYPE_p_Exiv2__DateValue;
        case Exiv2::time:
            return SWIGTYPE_p_Exiv2__TimeValue;
        case Exiv2::comment:
            return SWIGTYPE_p_Exiv2__CommentValue;
        case Exiv2::xmpText:
            return SWIGTYPE_p_Exiv2__XmpTextValue;
        case Exiv2::xmpAlt:
        case Exiv2::xmpBag:
        case Exiv2::xmpSeq:
            return SWIGTYPE_p_Exiv2__XmpArrayValue;
        case Exiv2::langAlt:
            return SWIGTYPE_p_Exiv2__LangAltValue;
        default:
            return SWIGTYPE_p_Exiv2__DataValue;
    }
};


static swig_type_info* get_swig_type(Exiv2::Value* value) {
    Exiv2::TypeId type_id = value->typeId();
    if (type_id == Exiv2::undefined) {
        // value could be a CommentValue
        if (dynamic_cast<Exiv2::CommentValue*>(value))
            return SWIGTYPE_p_Exiv2__CommentValue;
    }
    return get_type_object(type_id);
};



  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


SWIGINTERN Py_ssize_t
SwigPython_std_pair_len (PyObject *a)
{
    return 2;
}

SWIGINTERN PyObject*
SwigPython_std_pair_repr (PyObject *o)
{
    PyObject *tuple = PyTuple_New(2);
    assert(tuple);
    PyTuple_SET_ITEM(tuple, 0, PyObject_GetAttrString(o, (char*) "first"));
    PyTuple_SET_ITEM(tuple, 1, PyObject_GetAttrString(o, (char*) "second"));
    PyObject *result = PyObject_Repr(tuple);
    SWIG_Py_DECREF(tuple);
    return result;
}

SWIGINTERN PyObject*
SwigPython_std_pair_getitem (PyObject *a, Py_ssize_t b)
{
    PyObject *result = PyObject_GetAttrString(a, b % 2 ? (char*) "second" : (char*) "first");
    return result;
}

SWIGINTERN int
SwigPython_std_pair_setitem (PyObject *a, Py_ssize_t b, PyObject *c)
{
    int result = PyObject_SetAttrString(a, b % 2 ? (char*) "second" : (char*) "first", c);
    return result;
}




      namespace swig {
	template <>  struct traits<std::pair< int, int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "int" " >";
	  }
	};
      }
    

SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}

SWIGINTERN std::string Exiv2_Value___str__(Exiv2::Value *self){return self->toString();}

static PyObject* _get_store(PyObject* py_self, bool create) {
    // Return a new reference
    if (!PyObject_HasAttrString(py_self, "_private_data_")) {
        if (!create)
            return NULL;
        PyObject* dict = PyDict_New();
        if (!dict)
            return NULL;
        int error = PyObject_SetAttrString(py_self, "_private_data_", dict);
        Py_DECREF(dict);
        if (error)
            return NULL;
    }
    return PyObject_GetAttrString(py_self, "_private_data_");
};
static int private_store_set(PyObject* py_self, const char* name,
                             PyObject* val) {
    PyObject* dict = _get_store(py_self, true);
    if (!dict)
        return -1;
    int result = PyDict_SetItemString(dict, name, val);
    Py_DECREF(dict);
    return result;
};
static PyObject* private_store_get(PyObject* py_self, const char* name) {
    // Return a borrowed reference
    PyObject* dict = _get_store(py_self, false);
    if (!dict)
        return NULL;
    PyObject* result = PyDict_GetItemString(dict, name);
    Py_DECREF(dict);
    return result;
};
static int private_store_del(PyObject* py_self, const char* name) {
    PyObject* dict = _get_store(py_self, false);
    if (!dict)
        return 0;
    int result = 0;
    if (PyDict_GetItemString(dict, name))
        result = PyDict_DelItemString(dict, name);
    Py_DECREF(dict);
    return result;
};


static int store_view(PyObject* py_self, PyObject* view) {
    PyObject* view_list = private_store_get(py_self, "view_list");
    if (!view_list) {
        view_list = PyList_New(0);
        if (!view_list)
            return -1;
        int error = private_store_set(py_self, "view_list", view_list);
        Py_DECREF(view_list);
        if (error)
            return -1;
    }
    PyObject* callback = PyObject_GetAttrString(py_self, "_view_deleted_cb");
    if (!callback)
        return -1;
    PyObject* view_ref = PyWeakref_NewRef(view, callback);
    Py_DECREF(callback);
    if (!view_ref)
        return -1;
    int result = PyList_Append(view_list, view_ref);
    Py_DECREF(view_ref);
    return result;
};
static int release_views(PyObject* py_self) {
    PyObject* view_list = private_store_get(py_self, "view_list");
    if (!view_list)
        return 0;
    PyObject* view_ref = NULL;
    PyObject* view = NULL;
    for (Py_ssize_t idx = PyList_Size(view_list); idx > 0; idx--) {
        view_ref = PyList_GetItem(view_list, idx - 1);
        view = PyWeakref_GetObject(view_ref);
        if (view != Py_None)
            Py_XDECREF(PyObject_CallMethod(view, "release", NULL));
        PyList_SetSlice(view_list, idx - 1, idx, NULL);
    }
    return 0;
};

SWIGINTERN char const *Exiv2_StringValueBase_data(Exiv2::StringValueBase *self){
        return self->value_.data();
    }
SWIGINTERN void Exiv2_StringValueBase__view_deleted_cb(Exiv2::StringValueBase *self,PyObject *ref){}
SWIGINTERN Exiv2::AsciiValue *new_Exiv2_AsciiValue__SWIG_1(std::string const &buf){
        Exiv2::AsciiValue* self = new Exiv2::AsciiValue();
        if (self->read(buf)) {
            delete self;
            return NULL;
        }
        return self;
    }

static PyObject* PyEnum_Exiv2_CommentValue_CharsetId = NULL;


static PyObject* _create_enum_Exiv2_CommentValue_CharsetId(
        const char* name, const char* doc, PyObject* enum_list) {
    if (!enum_list)
        return NULL;
    PyEnum_Exiv2_CommentValue_CharsetId = PyObject_CallFunction(
            Py_IntEnum, "sN", name, enum_list);
    if (!PyEnum_Exiv2_CommentValue_CharsetId)
        return NULL;
    if (PyObject_SetAttrString(PyEnum_Exiv2_CommentValue_CharsetId, "__doc__",
            PyUnicode_FromString(doc)))
        return NULL;
    std::string mod_name = "exiv2.";
    mod_name += SWIG_name + 1;
    if (PyObject_SetAttrString(PyEnum_Exiv2_CommentValue_CharsetId, "__module__",
            PyUnicode_FromString(mod_name.c_str())))
        return NULL;
    // SWIG_Python_SetConstant will decref PyEnum object
    Py_INCREF(PyEnum_Exiv2_CommentValue_CharsetId);
    return PyEnum_Exiv2_CommentValue_CharsetId;
};





static PyObject* get_enum_typeobject_Exiv2_CommentValue_CharsetId() {
    if (!PyEnum_Exiv2_CommentValue_CharsetId) {
        PyObject* parent_class = PyObject_GetAttrString(
            exiv2_module, "CommentValue");
        if (parent_class) {
            PyEnum_Exiv2_CommentValue_CharsetId = PyObject_GetAttrString(
                parent_class, "CharsetId");
            Py_DECREF(parent_class);
        }
    }
    return PyEnum_Exiv2_CommentValue_CharsetId;
};


static PyObject* py_from_enum_Exiv2_CommentValue_CharsetId(long value) {
    PyObject* py_int = PyLong_FromLong(value);
    if (!py_int)
        return NULL;
    PyObject* result = PyObject_CallFunctionObjArgs(
        get_enum_typeobject_Exiv2_CommentValue_CharsetId(), py_int, NULL);
    if (!result) {
        // Assume value is not currently in enum, so return int
        PyErr_Clear();
        return py_int;
        }
    Py_DECREF(py_int);
    return result;
};


static PyObject* py_from_enum_Exiv2_ByteOrder(long value) {
    PyObject* py_int = PyLong_FromLong(value);
    if (!py_int)
        return NULL;
    PyObject* result = PyObject_CallFunctionObjArgs(
        get_enum_typeobject_Exiv2_ByteOrder(), py_int, NULL);
    if (!result) {
        // Assume value is not currently in enum, so return int
        PyErr_Clear();
        return py_int;
        }
    Py_DECREF(py_int);
    return result;
};


static PyObject* PyEnum_Exiv2_XmpValue_XmpArrayType = NULL;


static PyObject* _create_enum_Exiv2_XmpValue_XmpArrayType(
        const char* name, const char* doc, PyObject* enum_list) {
    if (!enum_list)
        return NULL;
    PyEnum_Exiv2_XmpValue_XmpArrayType = PyObject_CallFunction(
            Py_IntEnum, "sN", name, enum_list);
    if (!PyEnum_Exiv2_XmpValue_XmpArrayType)
        return NULL;
    if (PyObject_SetAttrString(PyEnum_Exiv2_XmpValue_XmpArrayType, "__doc__",
            PyUnicode_FromString(doc)))
        return NULL;
    std::string mod_name = "exiv2.";
    mod_name += SWIG_name + 1;
    if (PyObject_SetAttrString(PyEnum_Exiv2_XmpValue_XmpArrayType, "__module__",
            PyUnicode_FromString(mod_name.c_str())))
        return NULL;
    // SWIG_Python_SetConstant will decref PyEnum object
    Py_INCREF(PyEnum_Exiv2_XmpValue_XmpArrayType);
    return PyEnum_Exiv2_XmpValue_XmpArrayType;
};


static PyObject* PyEnum_Exiv2_XmpValue_XmpStruct = NULL;


static PyObject* _create_enum_Exiv2_XmpValue_XmpStruct(
        const char* name, const char* doc, PyObject* enum_list) {
    if (!enum_list)
        return NULL;
    PyEnum_Exiv2_XmpValue_XmpStruct = PyObject_CallFunction(
            Py_IntEnum, "sN", name, enum_list);
    if (!PyEnum_Exiv2_XmpValue_XmpStruct)
        return NULL;
    if (PyObject_SetAttrString(PyEnum_Exiv2_XmpValue_XmpStruct, "__doc__",
            PyUnicode_FromString(doc)))
        return NULL;
    std::string mod_name = "exiv2.";
    mod_name += SWIG_name + 1;
    if (PyObject_SetAttrString(PyEnum_Exiv2_XmpValue_XmpStruct, "__module__",
            PyUnicode_FromString(mod_name.c_str())))
        return NULL;
    // SWIG_Python_SetConstant will decref PyEnum object
    Py_INCREF(PyEnum_Exiv2_XmpValue_XmpStruct);
    return PyEnum_Exiv2_XmpValue_XmpStruct;
};


static PyObject* get_enum_typeobject_Exiv2_XmpValue_XmpArrayType() {
    if (!PyEnum_Exiv2_XmpValue_XmpArrayType) {
        PyObject* parent_class = PyObject_GetAttrString(
            exiv2_module, "XmpValue");
        if (parent_class) {
            PyEnum_Exiv2_XmpValue_XmpArrayType = PyObject_GetAttrString(
                parent_class, "XmpArrayType");
            Py_DECREF(parent_class);
        }
    }
    return PyEnum_Exiv2_XmpValue_XmpArrayType;
};


static PyObject* py_from_enum_Exiv2_XmpValue_XmpArrayType(long value) {
    PyObject* py_int = PyLong_FromLong(value);
    if (!py_int)
        return NULL;
    PyObject* result = PyObject_CallFunctionObjArgs(
        get_enum_typeobject_Exiv2_XmpValue_XmpArrayType(), py_int, NULL);
    if (!result) {
        // Assume value is not currently in enum, so return int
        PyErr_Clear();
        return py_int;
        }
    Py_DECREF(py_int);
    return result;
};


static PyObject* get_enum_typeobject_Exiv2_XmpValue_XmpStruct() {
    if (!PyEnum_Exiv2_XmpValue_XmpStruct) {
        PyObject* parent_class = PyObject_GetAttrString(
            exiv2_module, "XmpValue");
        if (parent_class) {
            PyEnum_Exiv2_XmpValue_XmpStruct = PyObject_GetAttrString(
                parent_class, "XmpStruct");
            Py_DECREF(parent_class);
        }
    }
    return PyEnum_Exiv2_XmpValue_XmpStruct;
};


static PyObject* py_from_enum_Exiv2_XmpValue_XmpStruct(long value) {
    PyObject* py_int = PyLong_FromLong(value);
    if (!py_int)
        return NULL;
    PyObject* result = PyObject_CallFunctionObjArgs(
        get_enum_typeobject_Exiv2_XmpValue_XmpStruct(), py_int, NULL);
    if (!result) {
        // Assume value is not currently in enum, so return int
        PyErr_Clear();
        return py_int;
        }
    Py_DECREF(py_int);
    return result;
};

SWIGINTERN char const *Exiv2_XmpTextValue_data(Exiv2::XmpTextValue *self){
        return self->value_.data();
    }
SWIGINTERN void Exiv2_XmpTextValue__view_deleted_cb(Exiv2::XmpTextValue *self,PyObject *ref){}

SWIGINTERN int
SWIG_AsVal_std_string (PyObject * obj, std::string *val)
{
  std::string* v = (std::string *) 0;
  int res = SWIG_AsPtr_std_string (obj, &v);
  if (!SWIG_IsOK(res)) return res;
  if (v) {
    if (val) *val = *v;
    if (SWIG_IsNewObj(res)) {
      delete v;
      res = SWIG_DelNewMask(res);
    }
    return res;
  }
  return SWIG_ERROR;
}


namespace swig {
  template <> struct traits< std::string > {
    typedef value_category category;
    static const char* type_name() { return"std::string"; }
  };
  template <>  struct traits_asval< std::string > {
    typedef std::string value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_std_string (obj, val);
    }
  };
  template <>  struct traits_from< std::string > {
    typedef std::string value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_std_string  (val);
    }
  };
}


namespace swig {
  template <class Seq, class T = typename Seq::value_type >
  struct IteratorProtocol {
    static void assign(PyObject *obj, Seq *seq) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        while (item) {
          seq->insert(seq->end(), swig::as<T>(item));
          item = PyIter_Next(iter);
        }
      }
    }

    static bool check(PyObject *obj) {
      bool ret = false;
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      if (iter) {
        SwigVar_PyObject item = PyIter_Next(iter);
        ret = true;
        while (item) {
          ret = swig::check<T>(item);
          item = ret ? PyIter_Next(iter) : 0;
        }
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_asptr_stdseq {
    typedef Seq sequence;
    typedef T value_type;

    static bool is_iterable(PyObject *obj) {
      SwigVar_PyObject iter = PyObject_GetIter(obj);
      PyErr_Clear();
      return iter != 0;
    }

    static int asptr(PyObject *obj, sequence **seq) {
      int ret = SWIG_ERROR;
      if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
	sequence *p;
	swig_type_info *descriptor = swig::type_info<sequence>();
	if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
	  if (seq) *seq = p;
	  return SWIG_OLDOBJ;
	}
      } else if (is_iterable(obj)) {
	try {
	  if (seq) {
	    *seq = new sequence();
            IteratorProtocol<Seq, T>::assign(obj, *seq);
            if (!PyErr_Occurred())
              return SWIG_NEWOBJ;
	  } else {
	    return IteratorProtocol<Seq, T>::check(obj) ? SWIG_OK : SWIG_ERROR;
	  }
	} catch (std::exception& e) {
          if (seq && !PyErr_Occurred())
            PyErr_SetString(PyExc_TypeError, e.what());
	}
        if (seq)
          delete *seq;
	return SWIG_ERROR;
      }
      return ret;
    }
  };

  template <class Seq, class T = typename Seq::value_type >
  struct traits_from_stdseq {
    typedef Seq sequence;
    typedef T value_type;
    typedef typename Seq::size_type size_type;
    typedef typename sequence::const_iterator const_iterator;

    static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
      swig_type_info *desc = swig::type_info<sequence>();
      if (desc && desc->clientdata) {
	return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
      }
#endif
      size_type size = seq.size();
      if (size <= (size_type)INT_MAX) {
	PyObject *obj = PyTuple_New((Py_ssize_t)size);
	Py_ssize_t i = 0;
	for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
	  PyTuple_SetItem(obj,i,swig::from<value_type>(*it));
	}
	return obj;
      } else {
	PyErr_SetString(PyExc_OverflowError,"sequence size not valid in python");
	return NULL;
      }
    }
  };
}


  namespace swig {
    template <class T>
    struct traits_reserve<std::vector<T> > {
      static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
        seq.reserve(n);
      }
    };

    template <class T>
    struct traits_asptr<std::vector<T> >  {
      static int asptr(PyObject *obj, std::vector<T> **vec) {
	return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
      }
    };
    
    template <class T>
    struct traits_from<std::vector<T> > {
      static PyObject *from(const std::vector<T>& vec) {
	return traits_from_stdseq<std::vector<T> >::from(vec);
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::vector< std::string, std::allocator< std::string > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::string" "," "std::allocator< std::string >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::XmpArrayValue *new_Exiv2_XmpArrayValue__SWIG_0(std::vector< std::string,std::allocator< std::string > > value,Exiv2::TypeId typeId_xmpBag){
        Exiv2::XmpArrayValue* result =
            new Exiv2::XmpArrayValue(typeId_xmpBag);
        for (std::vector<std::string>::const_iterator i = value.begin();
             i != value.end(); ++i) {
            if (result->read(*i)) {
                delete result;
                return NULL;
            }
        }
        return result;
    }
SWIGINTERN Exiv2::XmpArrayValue *new_Exiv2_XmpArrayValue__SWIG_1(Exiv2::TypeId typeId_xmpBag){
        return new Exiv2::XmpArrayValue(typeId_xmpBag);
    }
SWIGINTERN PyObject *Exiv2_XmpArrayValue_append(Exiv2::XmpArrayValue *self,std::string value){
        int error = self->read(value);
        if (error)
            return PyErr_Format(PyExc_RuntimeError,
                                "XmpArrayValue.read returned %d", error);
        return SWIG_Py_Void();
    }

      namespace swig {
	template <>  struct traits<std::pair< std::string, std::string > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "std::string" "," "std::string" " >";
	  }
	};
      }
    

  namespace swig {
    template <class ValueType>
    struct from_key_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.first);
      }
    };

    template <class ValueType>
    struct from_value_oper 
    {
      typedef const ValueType& argument_type;
      typedef  PyObject *result_type;
      result_type operator()(argument_type v) const
      {
	return swig::from(v.second);
      }
    };

    template<class OutIterator, class FromOper, class ValueType = typename OutIterator::value_type>
    struct SwigPyMapIterator_T : SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper>
    {
      SwigPyMapIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyIteratorClosed_T<OutIterator,ValueType,FromOper>(curr, first, last, seq)
      {
      }
    };


    template<class OutIterator,
	     class FromOper = from_key_oper<typename OutIterator::value_type> >
    struct SwigPyMapKeyIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapKeyIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_key_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapKeyIterator_T<OutIter>(current, begin, end, seq);
    }

    template<class OutIterator,
	     class FromOper = from_value_oper<typename OutIterator::value_type> >
    struct SwigPyMapValueIterator_T : SwigPyMapIterator_T<OutIterator, FromOper>
    {
      SwigPyMapValueIterator_T(OutIterator curr, OutIterator first, OutIterator last, PyObject *seq)
	: SwigPyMapIterator_T<OutIterator, FromOper>(curr, first, last, seq)
      {
      }
    };
    

    template<typename OutIter>
    inline SwigPyIterator*
    make_output_value_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
    {
      return new SwigPyMapValueIterator_T<OutIter>(current, begin, end, seq);
    }
  }


  namespace swig {
    template <class K, class T, class Compare, class Alloc>
    struct traits_asptr<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      static int asptr(PyObject *obj, map_type **val) {
	int res = SWIG_ERROR;
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	if (PyDict_Check(obj)) {
	  SwigVar_PyObject items = PyObject_CallMethod(obj,(char *)"items",NULL);
#if PY_VERSION_HEX >= 0x03000000
          /* In Python 3.x the ".items()" method returns a dict_items object */
          items = PySequence_Fast(items, ".items() didn't return a sequence!");
#endif
	  res = traits_asptr_stdseq<map_type, std::pair<K, T> >::asptr(items, val);
	} else {
	  map_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<map_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return res;
      }      
    };
      
    template <class K, class T, class Compare, class Alloc >
    struct traits_from<std::map<K,T,Compare,Alloc > >  {
      typedef std::map<K,T,Compare,Alloc > map_type;
      typedef typename map_type::const_iterator const_iterator;
      typedef typename map_type::size_type size_type;

      static PyObject *asdict(const map_type& map) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	size_type size = map.size();
	Py_ssize_t pysize = (size <= (size_type) INT_MAX) ? (Py_ssize_t) size : -1;
	if (pysize < 0) {
	  PyErr_SetString(PyExc_OverflowError, "map size not valid in python");
	  SWIG_PYTHON_THREAD_END_BLOCK;
	  return NULL;
	}
	PyObject *obj = PyDict_New();
	for (const_iterator i= map.begin(); i!= map.end(); ++i) {
	  swig::SwigVar_PyObject key = swig::from(i->first);
	  swig::SwigVar_PyObject val = swig::from(i->second);
	  PyDict_SetItem(obj, key, val);
	}
	SWIG_PYTHON_THREAD_END_BLOCK;
	return obj;
      }
                
      static PyObject *from(const map_type& map) {
	swig_type_info *desc = swig::type_info<map_type>();
	if (desc && desc->clientdata) {
	  return SWIG_InternalNewPointerObj(new map_type(map), desc, SWIG_POINTER_OWN);
	} else {
	  return asdict(map);
	}
      }
    };
  }


      namespace swig {
	template <>  struct traits<std::map< std::string, std::string, Exiv2::LangAltValueComparator, std::allocator< std::pair< std::string const,std::string > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::map<" "std::string" "," "std::string" "," "Exiv2::LangAltValueComparator" "," "std::allocator< std::pair< std::string const,std::string > >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::LangAltValue *new_Exiv2_LangAltValue__SWIG_2(Exiv2::LangAltValue::ValueType value){
        Exiv2::LangAltValue* result = new Exiv2::LangAltValue;
        result->value_ = value;
        return result;
    }
SWIGINTERN PyObject *Exiv2_LangAltValue_keys(Exiv2::LangAltValue *self){
        PyObject* as_dict = swig::from(self->value_);
        PyObject* result = PyDict_Keys(as_dict);
        Py_DECREF(as_dict);
        return result;
    }
SWIGINTERN PyObject *Exiv2_LangAltValue_values(Exiv2::LangAltValue *self){
        PyObject* as_dict = swig::from(self->value_);
        PyObject* result = PyDict_Values(as_dict);
        Py_DECREF(as_dict);
        return result;
    }
SWIGINTERN PyObject *Exiv2_LangAltValue_items(Exiv2::LangAltValue *self){
        PyObject* as_dict = swig::from(self->value_);
        PyObject* result = PyDict_Items(as_dict);
        Py_DECREF(as_dict);
        return result;
    }
SWIGINTERN PyObject *Exiv2_LangAltValue___iter__(Exiv2::LangAltValue *self){
        PyObject* keys = Exiv2_LangAltValue_keys(self);
        PyObject* result = PySeqIter_New(keys);
        Py_DECREF(keys);
        return result;
    }
SWIGINTERN PyObject *Exiv2_LangAltValue___getitem__(Exiv2::LangAltValue *self,std::string const &key){
        try {
            return SWIG_From_std_string(self->value_.at(key));
        } catch(std::out_of_range const&) {
            PyErr_SetString(PyExc_KeyError, key.c_str());
        }
        return NULL;
    }
SWIGINTERN PyObject *Exiv2_LangAltValue___setitem__(Exiv2::LangAltValue *self,std::string const &key,std::string const *INPUT){
        if (INPUT)
            self->value_[key] = *INPUT;
        else {
            typedef Exiv2::LangAltValue::ValueType::iterator iter;
            iter pos = self->value_.find(key);
            if (pos == self->value_.end()) {
                PyErr_SetString(PyExc_KeyError, key.c_str());
                return NULL;
            }
            self->value_.erase(pos);
        }
        return SWIG_Py_Void();
    }
SWIGINTERN bool Exiv2_LangAltValue___contains__(Exiv2::LangAltValue *self,std::string const &key){
        return self->value_.find(key) != self->value_.end();
    }
SWIGINTERN Exiv2::DateValue *new_Exiv2_DateValue__SWIG_2(Exiv2::DateValue::Date &src){
        Exiv2::DateValue* self = new Exiv2::DateValue;
        self->setDate(src);
        return self;
    }
SWIGINTERN void Exiv2_DateValue_setDate__SWIG_1(Exiv2::DateValue *self,int year,int month,int day){
        Exiv2::DateValue::Date date;
        date.year = year;
        date.month = month;
        date.day = day;
        self->setDate(date);
    }
SWIGINTERN PyObject *Exiv2_DateValue_Date_items(Exiv2::DateValue::Date *self,PyObject *py_self){
        return list_getset(py_self, getset_to_item_nostrip);
    }
SWIGINTERN PyObject *Exiv2_DateValue_Date_keys(Exiv2::DateValue::Date *self,PyObject *py_self){
        return list_getset(py_self, getset_to_key_nostrip);
    }
SWIGINTERN PyObject *Exiv2_DateValue_Date_values(Exiv2::DateValue::Date *self,PyObject *py_self){
        return list_getset(py_self, getset_to_value);
    }
SWIGINTERN PyObject *Exiv2_DateValue_Date___iter__(Exiv2::DateValue::Date *self,PyObject *py_self){
        PyObject* seq =
            Exiv2_DateValue_Date_keys(self, py_self);
        PyObject* result = PySeqIter_New(seq);
        Py_DECREF(seq);
        return result;
    }
SWIGINTERN PyObject *Exiv2_DateValue_Date___getitem__(Exiv2::DateValue::Date *self,PyObject *py_self,PyObject *key){
        PyGetSetDef* getset = find_getset(
            py_self, key, false, true);
        if (!getset)
            return NULL;
        return getset_to_value(py_self, getset);
    }
SWIGINTERN PyObject *Exiv2_DateValue_Date___setitem__(Exiv2::DateValue::Date *self,PyObject *py_self,PyObject *key,PyObject *value){
        if (getset_set(py_self, key, value, false, true))
            return NULL;
        return SWIG_Py_Void();
    }
SWIGINTERN Exiv2::TimeValue *new_Exiv2_TimeValue__SWIG_2(Exiv2::TimeValue::Time &src){
        Exiv2::TimeValue* self = new Exiv2::TimeValue;
        self->setTime(src);
        return self;
    }
SWIGINTERN void Exiv2_TimeValue_setTime__SWIG_1(Exiv2::TimeValue *self,int32_t hour,int32_t minute,int32_t second,int32_t tzHour,int32_t tzMinute){
        Exiv2::TimeValue::Time time;
        time.hour = hour;
        time.minute = minute;
        time.second = second;
        time.tzHour = tzHour;
        time.tzMinute = tzMinute;
        self->setTime(time);
    }
SWIGINTERN PyObject *Exiv2_TimeValue_Time_items(Exiv2::TimeValue::Time *self,PyObject *py_self){
        return list_getset(py_self, getset_to_item_nostrip);
    }
SWIGINTERN PyObject *Exiv2_TimeValue_Time_keys(Exiv2::TimeValue::Time *self,PyObject *py_self){
        return list_getset(py_self, getset_to_key_nostrip);
    }
SWIGINTERN PyObject *Exiv2_TimeValue_Time_values(Exiv2::TimeValue::Time *self,PyObject *py_self){
        return list_getset(py_self, getset_to_value);
    }
SWIGINTERN PyObject *Exiv2_TimeValue_Time___iter__(Exiv2::TimeValue::Time *self,PyObject *py_self){
        PyObject* seq =
            Exiv2_TimeValue_Time_keys(self, py_self);
        PyObject* result = PySeqIter_New(seq);
        Py_DECREF(seq);
        return result;
    }
SWIGINTERN PyObject *Exiv2_TimeValue_Time___getitem__(Exiv2::TimeValue::Time *self,PyObject *py_self,PyObject *key){
        PyGetSetDef* getset = find_getset(
            py_self, key, false, true);
        if (!getset)
            return NULL;
        return getset_to_value(py_self, getset);
    }
SWIGINTERN PyObject *Exiv2_TimeValue_Time___setitem__(Exiv2::TimeValue::Time *self,PyObject *py_self,PyObject *key,PyObject *value){
        if (getset_set(py_self, key, value, false, true))
            return NULL;
        return SWIG_Py_Void();
    }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


namespace swig {
  template <> struct traits< unsigned short > {
    typedef value_category category;
    static const char* type_name() { return"unsigned short"; }
  };
  template <>  struct traits_asval< unsigned short > {
    typedef unsigned short value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_unsigned_SS_short (obj, val);
    }
  };
  template <>  struct traits_from< unsigned short > {
    typedef unsigned short value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_short  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< unsigned short, std::allocator< unsigned short > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned short" "," "std::allocator< unsigned short >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< uint16_t > *new_Exiv2_ValueType_Sl_uint16_t_Sg___SWIG_4(Exiv2::ValueType< uint16_t >::ValueList value){
        Exiv2::ValueType<uint16_t>* result = new Exiv2::ValueType<uint16_t>();
        result->value_ = value;
        return result;
    }
SWIGINTERN uint16_t Exiv2_ValueType_Sl_uint16_t_Sg____getitem__(Exiv2::ValueType< uint16_t > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_uint16_t_Sg____setitem__(Exiv2::ValueType< uint16_t > *self,long idx,uint16_t const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_uint16_t_Sg__append(Exiv2::ValueType< uint16_t > *self,uint16_t value){
        self->value_.push_back(value);
    }

SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


namespace swig {
  template <> struct traits< unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };
  template <>  struct traits_asval< unsigned int > {
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from< unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< unsigned int, std::allocator< unsigned int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "unsigned int" "," "std::allocator< unsigned int >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< uint32_t > *new_Exiv2_ValueType_Sl_uint32_t_Sg___SWIG_4(Exiv2::ValueType< uint32_t >::ValueList value){
        Exiv2::ValueType<uint32_t>* result = new Exiv2::ValueType<uint32_t>();
        result->value_ = value;
        return result;
    }
SWIGINTERN uint32_t Exiv2_ValueType_Sl_uint32_t_Sg____getitem__(Exiv2::ValueType< uint32_t > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_uint32_t_Sg____setitem__(Exiv2::ValueType< uint32_t > *self,long idx,uint32_t const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_uint32_t_Sg__append(Exiv2::ValueType< uint32_t > *self,uint32_t value){
        self->value_.push_back(value);
    }

      namespace swig {
	template <>  struct traits<std::pair< unsigned int, unsigned int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "unsigned int" "," "unsigned int" " >";
	  }
	};
      }
    

      namespace swig {
	template <>  struct traits<std::vector< std::pair< unsigned int,unsigned int >, std::allocator< std::pair< unsigned int,unsigned int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< unsigned int,unsigned int >" "," "std::allocator< std::pair< unsigned int,unsigned int > >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< Exiv2::URational > *new_Exiv2_ValueType_Sl_Exiv2_URational_Sg___SWIG_4(Exiv2::ValueType< Exiv2::URational >::ValueList value){
        Exiv2::ValueType<Exiv2::URational>* result = new Exiv2::ValueType<Exiv2::URational>();
        result->value_ = value;
        return result;
    }
SWIGINTERN Exiv2::URational Exiv2_ValueType_Sl_Exiv2_URational_Sg____getitem__(Exiv2::ValueType< Exiv2::URational > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_Exiv2_URational_Sg____setitem__(Exiv2::ValueType< Exiv2::URational > *self,long idx,Exiv2::URational const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_Exiv2_URational_Sg__append(Exiv2::ValueType< Exiv2::URational > *self,Exiv2::URational value){
        self->value_.push_back(value);
    }

SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


namespace swig {
  template <> struct traits< short > {
    typedef value_category category;
    static const char* type_name() { return"short"; }
  };
  template <>  struct traits_asval< short > {
    typedef short value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_short (obj, val);
    }
  };
  template <>  struct traits_from< short > {
    typedef short value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_short  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< short, std::allocator< short > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "short" "," "std::allocator< short >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< int16_t > *new_Exiv2_ValueType_Sl_int16_t_Sg___SWIG_4(Exiv2::ValueType< int16_t >::ValueList value){
        Exiv2::ValueType<int16_t>* result = new Exiv2::ValueType<int16_t>();
        result->value_ = value;
        return result;
    }
SWIGINTERN int16_t Exiv2_ValueType_Sl_int16_t_Sg____getitem__(Exiv2::ValueType< int16_t > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_int16_t_Sg____setitem__(Exiv2::ValueType< int16_t > *self,long idx,int16_t const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_int16_t_Sg__append(Exiv2::ValueType< int16_t > *self,int16_t value){
        self->value_.push_back(value);
    }

      namespace swig {
	template <>  struct traits<std::vector< int, std::allocator< int > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "int" "," "std::allocator< int >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< int32_t > *new_Exiv2_ValueType_Sl_int32_t_Sg___SWIG_4(Exiv2::ValueType< int32_t >::ValueList value){
        Exiv2::ValueType<int32_t>* result = new Exiv2::ValueType<int32_t>();
        result->value_ = value;
        return result;
    }
SWIGINTERN int32_t Exiv2_ValueType_Sl_int32_t_Sg____getitem__(Exiv2::ValueType< int32_t > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_int32_t_Sg____setitem__(Exiv2::ValueType< int32_t > *self,long idx,int32_t const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_int32_t_Sg__append(Exiv2::ValueType< int32_t > *self,int32_t value){
        self->value_.push_back(value);
    }

      namespace swig {
	template <>  struct traits<std::vector< std::pair< int,int >, std::allocator< std::pair< int,int > > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "std::pair< int,int >" "," "std::allocator< std::pair< int,int > >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< Exiv2::Rational > *new_Exiv2_ValueType_Sl_Exiv2_Rational_Sg___SWIG_4(Exiv2::ValueType< Exiv2::Rational >::ValueList value){
        Exiv2::ValueType<Exiv2::Rational>* result = new Exiv2::ValueType<Exiv2::Rational>();
        result->value_ = value;
        return result;
    }
SWIGINTERN Exiv2::Rational Exiv2_ValueType_Sl_Exiv2_Rational_Sg____getitem__(Exiv2::ValueType< Exiv2::Rational > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_Exiv2_Rational_Sg____setitem__(Exiv2::ValueType< Exiv2::Rational > *self,long idx,Exiv2::Rational const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_Exiv2_Rational_Sg__append(Exiv2::ValueType< Exiv2::Rational > *self,Exiv2::Rational value){
        self->value_.push_back(value);
    }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std { }
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
  using namespace std;
  return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}


namespace swig {
  template <> struct traits< float > {
    typedef value_category category;
    static const char* type_name() { return"float"; }
  };
  template <>  struct traits_asval< float > {
    typedef float value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_float (obj, val);
    }
  };
  template <>  struct traits_from< float > {
    typedef float value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_float  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< float, std::allocator< float > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "float" "," "std::allocator< float >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< float > *new_Exiv2_ValueType_Sl_float_Sg___SWIG_4(Exiv2::ValueType< float >::ValueList value){
        Exiv2::ValueType<float>* result = new Exiv2::ValueType<float>();
        result->value_ = value;
        return result;
    }
SWIGINTERN float Exiv2_ValueType_Sl_float_Sg____getitem__(Exiv2::ValueType< float > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_float_Sg____setitem__(Exiv2::ValueType< float > *self,long idx,float const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_float_Sg__append(Exiv2::ValueType< float > *self,float value){
        self->value_.push_back(value);
    }

namespace swig {
  template <> struct traits< double > {
    typedef value_category category;
    static const char* type_name() { return"double"; }
  };
  template <>  struct traits_asval< double > {
    typedef double value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_double (obj, val);
    }
  };
  template <>  struct traits_from< double > {
    typedef double value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_double  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::vector< double, std::allocator< double > > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::vector<" "double" "," "std::allocator< double >" " >";
	  }
	};
      }
    
SWIGINTERN Exiv2::ValueType< double > *new_Exiv2_ValueType_Sl_double_Sg___SWIG_4(Exiv2::ValueType< double >::ValueList value){
        Exiv2::ValueType<double>* result = new Exiv2::ValueType<double>();
        result->value_ = value;
        return result;
    }
SWIGINTERN double Exiv2_ValueType_Sl_double_Sg____getitem__(Exiv2::ValueType< double > *self,long idx){
        return self->value_[idx];
    }
SWIGINTERN void Exiv2_ValueType_Sl_double_Sg____setitem__(Exiv2::ValueType< double > *self,long idx,double const *INPUT){
        if (INPUT)
            self->value_[idx] = *INPUT;
        else
            self->value_.erase(self->value_.begin() + idx);
    }
SWIGINTERN void Exiv2_ValueType_Sl_double_Sg__append(Exiv2::ValueType< double > *self,double value){
        self->value_.push_back(value);
    }
#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap__enum_list_CharsetId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "_enum_list_CharsetId", 0, 0)) SWIG_fail;
  result = (PyObject *)_enum_list_CharsetId();
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__enum_list_XmpArrayType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "_enum_list_XmpArrayType", 0, 0)) SWIG_fail;
  result = (PyObject *)_enum_list_XmpArrayType();
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap__enum_list_XmpStruct(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "_enum_list_XmpStruct", 0, 0)) SWIG_fail;
  result = (PyObject *)_enum_list_XmpStruct();
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "Value_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_read" "', argument " "1"" of type '" "Exiv2::Value *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Value_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "Value_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Value_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "Value_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_read" "', argument " "1"" of type '" "Exiv2::Value *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Value_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "Value_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_Value_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_Value_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Value_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Value::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::Value::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Value_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "Value_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_setDataArea" "', argument " "1"" of type '" "Exiv2::Value *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Value_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_typeId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::TypeId result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value_typeId takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_typeId" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  result = (Exiv2::TypeId)((Exiv2::Value const *)arg1)->typeId();
  {
    resultobj = py_from_enum_Exiv2_TypeId(static_cast<long>(result));
    if (!resultobj)
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::Value::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_clone" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    try {
      result = ((Exiv2::Value const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    if ((&result)->get()) {
      Exiv2::Value* value = (&result)->release();
      resultobj = SWIG_NewPointerObj(
        value, get_swig_type(value), SWIG_POINTER_OWN);
    }
    else {
      resultobj = SWIG_Py_Void();
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "Value_copy", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_copy" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Value_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "Value_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Value_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "Value_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::Value const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_count" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  result = (long)((Exiv2::Value const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_size" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  result = (long)((Exiv2::Value const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Value_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_write" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::Value const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Value_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toString" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Value_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::Value const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Value_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toLong" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Value_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::Value const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Value_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toFloat" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Value_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::Value const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Value_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_toRational" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Value_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::Value const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_sizeDataArea" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    try {
      result = (long)((Exiv2::Value const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_dataArea" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    try {
      result = ((Exiv2::Value const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_ok(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value_ok takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value_ok" "', argument " "1"" of type '" "Exiv2::Value const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  result = (bool)((Exiv2::Value const *)arg1)->ok();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value_create(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj0 = 0 ;
  Exiv2::Value::AutoPtr result;
  
  {
    arg1 = Exiv2::undefined;
  }
  if (!PyArg_UnpackTuple(args, "Value_create", 0, 1, &obj0)) SWIG_fail;
  if (obj0) {
    {
      if (!PyObject_IsInstance(obj0,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "Value_create argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj0)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Value_create" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj0));
    }
  }
  {
    try {
      result = Exiv2::Value::create(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    if ((&result)->get()) {
      Exiv2::Value* value = (&result)->release();
      resultobj = SWIG_NewPointerObj(
        value, get_swig_type(value), SWIG_POINTER_OWN);
    }
    else {
      resultobj = SWIG_Py_Void();
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Value___str__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Value *arg1 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Value___str__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Value___str__" "', argument " "1"" of type '" "Exiv2::Value *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Value * >(argp1);
  {
    try {
      result = Exiv2_Value___str__(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_Value_count) /* defines _wrap_Value_count_lenfunc_closure */

SWIGPY_REPRFUNC_CLOSURE(_wrap_Value___str__) /* defines _wrap_Value___str___reprfunc_closure */

SWIGINTERN int _wrap_new_DataValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::DataValue *result = 0 ;
  
  {
    arg1 = Exiv2::undefined;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DataValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DataValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_DataValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DataValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::DataValue *)new Exiv2::DataValue(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__DataValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DataValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::DataValue *result = 0 ;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  {
    arg4 = Exiv2::undefined;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DataValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DataValue", 1, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DataValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_DataValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DataValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_DataValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DataValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::DataValue *)new Exiv2::DataValue((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__DataValue, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_DataValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DataValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_DataValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if ((argc >= 1) && (argc <= 3)) {
    int retval = _wrap_new_DataValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DataValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::DataValue::DataValue(Exiv2::TypeId)\n"
    "    Exiv2::DataValue::DataValue(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_DataValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_DataValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DataValue" "', argument " "1"" of type '" "Exiv2::DataValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "DataValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_read" "', argument " "1"" of type '" "Exiv2::DataValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DataValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "DataValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DataValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "DataValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_read" "', argument " "1"" of type '" "Exiv2::DataValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DataValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "DataValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_DataValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_DataValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DataValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::DataValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::DataValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DataValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DataValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_clone" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  {
    try {
      result = ((Exiv2::DataValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__DataValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "DataValue_copy", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_copy" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DataValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "DataValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DataValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "DataValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::DataValue const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DataValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_count" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  result = (long)((Exiv2::DataValue const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DataValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_size" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  result = (long)((Exiv2::DataValue const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "DataValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_write" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::DataValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DataValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_toString" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::DataValue const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DataValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_toLong" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::DataValue const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DataValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_toFloat" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::DataValue const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DataValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DataValue *arg1 = (Exiv2::DataValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DataValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DataValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DataValue_toRational" "', argument " "1"" of type '" "Exiv2::DataValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DataValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DataValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::DataValue const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_DataValue) /* defines _wrap_delete_DataValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_DataValue_count) /* defines _wrap_DataValue_count_lenfunc_closure */

SWIGINTERN PyObject *_wrap_StringValueBase_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "StringValueBase_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_read" "', argument " "1"" of type '" "Exiv2::StringValueBase *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "StringValueBase_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "StringValueBase_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  release_views(self);
  
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "StringValueBase_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_read" "', argument " "1"" of type '" "Exiv2::StringValueBase *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringValueBase_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "StringValueBase_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringValueBase_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  
  release_views(self);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_StringValueBase_read__SWIG_0(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_StringValueBase_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'StringValueBase_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::StringValueBase::read(std::string const &)\n"
    "    Exiv2::StringValueBase::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_StringValueBase_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::StringValueBase::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "StringValueBase_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_clone" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  {
    try {
      result = ((Exiv2::StringValueBase const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__StringValueBase, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "StringValueBase_copy", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_copy" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringValueBase_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "StringValueBase_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "StringValueBase_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "StringValueBase_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::StringValueBase const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "StringValueBase_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_count" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  result = (long)((Exiv2::StringValueBase const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "StringValueBase_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_size" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  result = (long)((Exiv2::StringValueBase const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "StringValueBase_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_toLong" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringValueBase_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::StringValueBase const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "StringValueBase_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_toFloat" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringValueBase_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::StringValueBase const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "StringValueBase_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_toRational" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "StringValueBase_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::StringValueBase const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "StringValueBase_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_write" "', argument " "1"" of type '" "Exiv2::StringValueBase const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::StringValueBase const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase_data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "StringValueBase_data takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase_data" "', argument " "1"" of type '" "Exiv2::StringValueBase *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  result = (char *)Exiv2_StringValueBase_data(arg1);
  {
    resultobj = PyMemoryView_FromMemory((char*)result, arg1->value_.size(), PyBUF_READ);
    if (!resultobj)
    SWIG_fail;
    // Store a weak ref to the new memoryview
    if (store_view(self, resultobj))
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValueBase__view_deleted_cb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValueBase *arg1 = (Exiv2::StringValueBase *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "StringValueBase__view_deleted_cb", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValueBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValueBase__view_deleted_cb" "', argument " "1"" of type '" "Exiv2::StringValueBase *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValueBase * >(argp1);
  arg2 = obj1;
  Exiv2_StringValueBase__view_deleted_cb(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_StringValueBase_count) /* defines _wrap_StringValueBase_count_lenfunc_closure */

SWIGINTERN int _wrap_new_StringValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::StringValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_StringValue")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_StringValue takes no arguments");
  {
    try {
      result = (Exiv2::StringValue *)new Exiv2::StringValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__StringValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_StringValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Exiv2::StringValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_StringValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_StringValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_StringValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_StringValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Exiv2::StringValue *)new Exiv2::StringValue((std::string const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__StringValue, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_StringValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_StringValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    int retval = _wrap_new_StringValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 1) {
    int retval = _wrap_new_StringValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_StringValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::StringValue::StringValue()\n"
    "    Exiv2::StringValue::StringValue(std::string const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_StringValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValue *arg1 = (Exiv2::StringValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_StringValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_StringValue" "', argument " "1"" of type '" "Exiv2::StringValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_StringValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::StringValue *arg1 = (Exiv2::StringValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::StringValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "StringValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__StringValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "StringValue_clone" "', argument " "1"" of type '" "Exiv2::StringValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::StringValue * >(argp1);
  {
    try {
      result = ((Exiv2::StringValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__StringValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_StringValue) /* defines _wrap_delete_StringValue_destructor_closure */

SWIGINTERN int _wrap_new_AsciiValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::AsciiValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_AsciiValue")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_AsciiValue takes no arguments");
  {
    try {
      result = (Exiv2::AsciiValue *)new Exiv2::AsciiValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__AsciiValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_AsciiValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::AsciiValue *arg1 = (Exiv2::AsciiValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_AsciiValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__AsciiValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AsciiValue" "', argument " "1"" of type '" "Exiv2::AsciiValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::AsciiValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsciiValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::AsciiValue *arg1 = (Exiv2::AsciiValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "AsciiValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__AsciiValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsciiValue_read" "', argument " "1"" of type '" "Exiv2::AsciiValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::AsciiValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AsciiValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "AsciiValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "AsciiValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsciiValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::AsciiValue *arg1 = (Exiv2::AsciiValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "AsciiValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__AsciiValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsciiValue_read" "', argument " "1"" of type '" "Exiv2::AsciiValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::AsciiValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AsciiValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "AsciiValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsciiValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_AsciiValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_AsciiValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'AsciiValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::AsciiValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::AsciiValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_AsciiValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::AsciiValue *arg1 = (Exiv2::AsciiValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::AsciiValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "AsciiValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__AsciiValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsciiValue_clone" "', argument " "1"" of type '" "Exiv2::AsciiValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::AsciiValue * >(argp1);
  {
    try {
      result = ((Exiv2::AsciiValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__AsciiValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AsciiValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::AsciiValue *arg1 = (Exiv2::AsciiValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "AsciiValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__AsciiValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AsciiValue_write" "', argument " "1"" of type '" "Exiv2::AsciiValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::AsciiValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::AsciiValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_AsciiValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Exiv2::AsciiValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_AsciiValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_AsciiValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_AsciiValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_AsciiValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Exiv2::AsciiValue *)new_Exiv2_AsciiValue__SWIG_1((std::string const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__AsciiValue, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_AsciiValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_AsciiValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    int retval = _wrap_new_AsciiValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 1) {
    int retval = _wrap_new_AsciiValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_AsciiValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::AsciiValue::AsciiValue()\n"
    "    Exiv2::AsciiValue::AsciiValue(std::string const &)\n");
  return -1;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_AsciiValue) /* defines _wrap_delete_AsciiValue_destructor_closure */

SWIGINTERN int _wrap_new_CommentValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CommentValue")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_CommentValue takes no arguments");
  {
    try {
      result = (Exiv2::CommentValue *)new Exiv2::CommentValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__CommentValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_CommentValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Exiv2::CommentValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CommentValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_CommentValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CommentValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_CommentValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Exiv2::CommentValue *)new Exiv2::CommentValue((std::string const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__CommentValue, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_CommentValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_CommentValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    int retval = _wrap_new_CommentValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 1) {
    int retval = _wrap_new_CommentValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_CommentValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::CommentValue::CommentValue()\n"
    "    Exiv2::CommentValue::CommentValue(std::string const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_CommentValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_CommentValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CommentValue" "', argument " "1"" of type '" "Exiv2::CommentValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "CommentValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_read" "', argument " "1"" of type '" "Exiv2::CommentValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CommentValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "CommentValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "CommentValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_read" "', argument " "1"" of type '" "Exiv2::CommentValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CommentValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "CommentValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CommentValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_CommentValue_read__SWIG_0(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_CommentValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CommentValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::CommentValue::read(std::string const &)\n"
    "    Exiv2::CommentValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CommentValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::CommentValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CommentValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_clone" "', argument " "1"" of type '" "Exiv2::CommentValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    try {
      result = ((Exiv2::CommentValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__CommentValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "CommentValue_copy", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_copy" "', argument " "1"" of type '" "Exiv2::CommentValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CommentValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "CommentValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CommentValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "CommentValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::CommentValue const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "CommentValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_write" "', argument " "1"" of type '" "Exiv2::CommentValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::CommentValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_comment__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_UnpackTuple(args, "CommentValue_comment", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_comment" "', argument " "1"" of type '" "Exiv2::CommentValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CommentValue_comment" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = ((Exiv2::CommentValue const *)arg1)->comment((char const *)arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_comment__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CommentValue_comment takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_comment" "', argument " "1"" of type '" "Exiv2::CommentValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    try {
      result = ((Exiv2::CommentValue const *)arg1)->comment();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_comment(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_CommentValue_comment__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_CommentValue_comment__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'CommentValue_comment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::CommentValue::comment(char const *) const\n"
    "    Exiv2::CommentValue::comment() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CommentValue_detectCharset(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "CommentValue_detectCharset", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_detectCharset" "', argument " "1"" of type '" "Exiv2::CommentValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "CommentValue_detectCharset" "', argument " "2"" of type '" "std::string &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "CommentValue_detectCharset" "', argument " "2"" of type '" "std::string &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (char *)((Exiv2::CommentValue const *)arg1)->detectCharset(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_charsetId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::CommentValue::CharsetId result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CommentValue_charsetId takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_charsetId" "', argument " "1"" of type '" "Exiv2::CommentValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    try {
      result = (Exiv2::CommentValue::CharsetId)((Exiv2::CommentValue const *)arg1)->charsetId();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = py_from_enum_Exiv2_CommentValue_CharsetId(static_cast<long>(result));
    if (!resultobj)
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_byteOrder__set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  Exiv2::ByteOrder arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "CommentValue_byteOrder__set", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_byteOrder__set" "', argument " "1"" of type '" "Exiv2::CommentValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  {
    if (!PyObject_IsInstance(obj1,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "CommentValue_byteOrder__set argument 2 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "CommentValue_byteOrder__set" "', argument " "2"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg2 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj1));
  }
  if (arg1) (arg1)->byteOrder_ = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CommentValue_byteOrder__get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::CommentValue *arg1 = (Exiv2::CommentValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ByteOrder result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "CommentValue_byteOrder__get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__CommentValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CommentValue_byteOrder__get" "', argument " "1"" of type '" "Exiv2::CommentValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::CommentValue * >(argp1);
  result = (Exiv2::ByteOrder) ((arg1)->byteOrder_);
  {
    resultobj = py_from_enum_Exiv2_ByteOrder(static_cast<long>(result));
    if (!resultobj)
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_CommentValue) /* defines _wrap_delete_CommentValue_destructor_closure */

SWIGINTERN PyObject *_wrap_XmpValue_xmpArrayType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::XmpValue::XmpArrayType result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpValue_xmpArrayType takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_xmpArrayType" "', argument " "1"" of type '" "Exiv2::XmpValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  result = (Exiv2::XmpValue::XmpArrayType)((Exiv2::XmpValue const *)arg1)->xmpArrayType();
  {
    resultobj = py_from_enum_Exiv2_XmpValue_XmpArrayType(static_cast<long>(result));
    if (!resultobj)
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_xmpStruct(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::XmpValue::XmpStruct result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpValue_xmpStruct takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_xmpStruct" "', argument " "1"" of type '" "Exiv2::XmpValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  result = (Exiv2::XmpValue::XmpStruct)((Exiv2::XmpValue const *)arg1)->xmpStruct();
  {
    resultobj = py_from_enum_Exiv2_XmpValue_XmpStruct(static_cast<long>(result));
    if (!resultobj)
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_size" "', argument " "1"" of type '" "Exiv2::XmpValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  result = (long)((Exiv2::XmpValue const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "XmpValue_copy", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_copy" "', argument " "1"" of type '" "Exiv2::XmpValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "XmpValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "XmpValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::XmpValue const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_setXmpArrayType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  Exiv2::XmpValue::XmpArrayType arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "XmpValue_setXmpArrayType", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_setXmpArrayType" "', argument " "1"" of type '" "Exiv2::XmpValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  {
    if (!PyObject_IsInstance(obj1,
        get_enum_typeobject_Exiv2_XmpValue_XmpArrayType())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "XmpValue_setXmpArrayType argument 2 type should be 'Exiv2::XmpValue::XmpArrayType'.", 1);
    }
    if (!PyLong_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpValue_setXmpArrayType" "', argument " "2"" of type '" "Exiv2::XmpValue::XmpArrayType""'")
      ;
    }
    arg2 = static_cast< Exiv2::XmpValue::XmpArrayType >(PyLong_AsLong(obj1));
  }
  (arg1)->setXmpArrayType(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_setXmpStruct__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  Exiv2::XmpValue::XmpStruct arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "XmpValue_setXmpStruct", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_setXmpStruct" "', argument " "1"" of type '" "Exiv2::XmpValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  {
    if (!PyObject_IsInstance(obj1,
        get_enum_typeobject_Exiv2_XmpValue_XmpStruct())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "XmpValue_setXmpStruct argument 2 type should be 'Exiv2::XmpValue::XmpStruct'.", 1);
    }
    if (!PyLong_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpValue_setXmpStruct" "', argument " "2"" of type '" "Exiv2::XmpValue::XmpStruct""'")
      ;
    }
    arg2 = static_cast< Exiv2::XmpValue::XmpStruct >(PyLong_AsLong(obj1));
  }
  (arg1)->setXmpStruct(arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_setXmpStruct__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpValue_setXmpStruct takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_setXmpStruct" "', argument " "1"" of type '" "Exiv2::XmpValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  (arg1)->setXmpStruct();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_setXmpStruct(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_XmpValue_setXmpStruct__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_XmpValue_setXmpStruct__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'XmpValue_setXmpStruct'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::XmpValue::setXmpStruct(Exiv2::XmpValue::XmpStruct)\n"
    "    Exiv2::XmpValue::setXmpStruct()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XmpValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "XmpValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_read" "', argument " "1"" of type '" "Exiv2::XmpValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "XmpValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpValue *arg1 = (Exiv2::XmpValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "XmpValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpValue_read" "', argument " "1"" of type '" "Exiv2::XmpValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmpValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "XmpValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_XmpValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_XmpValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'XmpValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::XmpValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::XmpValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN int _wrap_new_XmpTextValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_XmpTextValue")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_XmpTextValue takes no arguments");
  {
    try {
      result = (Exiv2::XmpTextValue *)new Exiv2::XmpTextValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__XmpTextValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_XmpTextValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Exiv2::XmpTextValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_XmpTextValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_XmpTextValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_XmpTextValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_XmpTextValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Exiv2::XmpTextValue *)new Exiv2::XmpTextValue((std::string const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__XmpTextValue, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_XmpTextValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_XmpTextValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    int retval = _wrap_new_XmpTextValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 1) {
    int retval = _wrap_new_XmpTextValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_XmpTextValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::XmpTextValue::XmpTextValue()\n"
    "    Exiv2::XmpTextValue::XmpTextValue(std::string const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "XmpTextValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_read" "', argument " "1"" of type '" "Exiv2::XmpTextValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpTextValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "XmpTextValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpTextValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  
  release_views(self);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "XmpTextValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_read" "', argument " "1"" of type '" "Exiv2::XmpTextValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmpTextValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "XmpTextValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  
  release_views(self);
  
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_XmpTextValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_XmpTextValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'XmpTextValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::XmpTextValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::XmpTextValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::XmpTextValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpTextValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_clone" "', argument " "1"" of type '" "Exiv2::XmpTextValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  {
    try {
      result = ((Exiv2::XmpTextValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__XmpTextValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpTextValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_size" "', argument " "1"" of type '" "Exiv2::XmpTextValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  result = (long)((Exiv2::XmpTextValue const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpTextValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_count" "', argument " "1"" of type '" "Exiv2::XmpTextValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  result = (long)((Exiv2::XmpTextValue const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "XmpTextValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_toLong" "', argument " "1"" of type '" "Exiv2::XmpTextValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmpTextValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::XmpTextValue const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "XmpTextValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_toFloat" "', argument " "1"" of type '" "Exiv2::XmpTextValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmpTextValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::XmpTextValue const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "XmpTextValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_toRational" "', argument " "1"" of type '" "Exiv2::XmpTextValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmpTextValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::XmpTextValue const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "XmpTextValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_write" "', argument " "1"" of type '" "Exiv2::XmpTextValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::XmpTextValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue_data(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpTextValue_data takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue_data" "', argument " "1"" of type '" "Exiv2::XmpTextValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  result = (char *)Exiv2_XmpTextValue_data(arg1);
  {
    resultobj = PyMemoryView_FromMemory((char*)result, arg1->value_.size(), PyBUF_READ);
    if (!resultobj)
    SWIG_fail;
    // Store a weak ref to the new memoryview
    if (store_view(self, resultobj))
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpTextValue__view_deleted_cb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "XmpTextValue__view_deleted_cb", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpTextValue__view_deleted_cb" "', argument " "1"" of type '" "Exiv2::XmpTextValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  arg2 = obj1;
  Exiv2_XmpTextValue__view_deleted_cb(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_XmpTextValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpTextValue *arg1 = (Exiv2::XmpTextValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_XmpTextValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpTextValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XmpTextValue" "', argument " "1"" of type '" "Exiv2::XmpTextValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpTextValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_XmpTextValue_count) /* defines _wrap_XmpTextValue_count_lenfunc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_XmpTextValue) /* defines _wrap_delete_XmpTextValue_destructor_closure */

SWIGINTERN PyObject *_wrap_XmpArrayValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_read" "', argument " "1"" of type '" "Exiv2::XmpArrayValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpArrayValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "XmpArrayValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "XmpArrayValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_read" "', argument " "1"" of type '" "Exiv2::XmpArrayValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "XmpArrayValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "XmpArrayValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_XmpArrayValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_XmpArrayValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'XmpArrayValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::XmpArrayValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::XmpArrayValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::XmpArrayValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpArrayValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_clone" "', argument " "1"" of type '" "Exiv2::XmpArrayValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  {
    try {
      result = ((Exiv2::XmpArrayValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__XmpArrayValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "XmpArrayValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_count" "', argument " "1"" of type '" "Exiv2::XmpArrayValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  result = (long)((Exiv2::XmpArrayValue const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_toString" "', argument " "1"" of type '" "Exiv2::XmpArrayValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmpArrayValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::XmpArrayValue const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_toLong" "', argument " "1"" of type '" "Exiv2::XmpArrayValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmpArrayValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::XmpArrayValue const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_toFloat" "', argument " "1"" of type '" "Exiv2::XmpArrayValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmpArrayValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::XmpArrayValue const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_toRational" "', argument " "1"" of type '" "Exiv2::XmpArrayValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "XmpArrayValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::XmpArrayValue const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_write" "', argument " "1"" of type '" "Exiv2::XmpArrayValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::XmpArrayValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_XmpArrayValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::vector< std::string,std::allocator< std::string > > arg1 ;
  Exiv2::TypeId arg2 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::XmpArrayValue *result = 0 ;
  
  {
    arg2 = Exiv2::xmpBag;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_XmpArrayValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_XmpArrayValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  {
    std::vector< std::string,std::allocator< std::string > > *ptr = (std::vector< std::string,std::allocator< std::string > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_XmpArrayValue" "', argument " "1"" of type '" "std::vector< std::string,std::allocator< std::string > >""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_XmpArrayValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_XmpArrayValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::XmpArrayValue *)new_Exiv2_XmpArrayValue__SWIG_0(SWIG_STD_MOVE(arg1),arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__XmpArrayValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_XmpArrayValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::XmpArrayValue *result = 0 ;
  
  {
    arg1 = Exiv2::xmpBag;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_XmpArrayValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_XmpArrayValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_XmpArrayValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_XmpArrayValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::XmpArrayValue *)new_Exiv2_XmpArrayValue__SWIG_1(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__XmpArrayValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_XmpArrayValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_XmpArrayValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_XmpArrayValue__SWIG_1(self, args, NULL);
  }
check_1:
  
  if ((argc >= 1) && (argc <= 2)) {
    int retval = _wrap_new_XmpArrayValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_XmpArrayValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::XmpArrayValue::XmpArrayValue(std::vector< std::string,std::allocator< std::string > >,Exiv2::TypeId)\n"
    "    Exiv2::XmpArrayValue::XmpArrayValue(Exiv2::TypeId)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_XmpArrayValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  std::string arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "XmpArrayValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "XmpArrayValue_append" "', argument " "1"" of type '" "Exiv2::XmpArrayValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    int res = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "XmpArrayValue_append" "', argument " "2"" of type '" "std::string""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  result = (PyObject *)Exiv2_XmpArrayValue_append(arg1,SWIG_STD_MOVE(arg2));
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_XmpArrayValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::XmpArrayValue *arg1 = (Exiv2::XmpArrayValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_XmpArrayValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__XmpArrayValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_XmpArrayValue" "', argument " "1"" of type '" "Exiv2::XmpArrayValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::XmpArrayValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_XmpArrayValue_count) /* defines _wrap_XmpArrayValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_XmpArrayValue_toString) /* defines _wrap_XmpArrayValue_toString_ssizeargfunc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_XmpArrayValue) /* defines _wrap_delete_XmpArrayValue_destructor_closure */

SWIGINTERN int _wrap_new_LangAltValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LangAltValue")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_LangAltValue takes no arguments");
  {
    try {
      result = (Exiv2::LangAltValue *)new Exiv2::LangAltValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__LangAltValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_LangAltValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  Exiv2::LangAltValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LangAltValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_LangAltValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LangAltValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_LangAltValue" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (Exiv2::LangAltValue *)new Exiv2::LangAltValue((std::string const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__LangAltValue, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN PyObject *_wrap_LangAltValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "LangAltValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_read" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LangAltValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "LangAltValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LangAltValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "LangAltValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_read" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LangAltValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LangAltValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_LangAltValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_LangAltValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LangAltValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::LangAltValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::LangAltValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LangAltValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::LangAltValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LangAltValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_clone" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    try {
      result = ((Exiv2::LangAltValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__LangAltValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LangAltValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_count" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  result = (long)((Exiv2::LangAltValue const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_toString__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LangAltValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_toString" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangAltValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::LangAltValue const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_toString__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_UnpackTuple(args, "LangAltValue_toString", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_toString" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LangAltValue_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LangAltValue_toString" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = ((Exiv2::LangAltValue const *)arg1)->toString((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_toString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    if (argc > 1) {
      {
        {
          int res = SWIG_AsVal_long(argv[1], NULL);
          _v = SWIG_CheckState(res);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_LangAltValue_toString__SWIG_0(self, args);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_LangAltValue_toString__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LangAltValue_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::LangAltValue::toString(long) const\n"
    "    Exiv2::LangAltValue::toString(std::string const &) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LangAltValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LangAltValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_toLong" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangAltValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::LangAltValue const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LangAltValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_toFloat" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangAltValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::LangAltValue const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LangAltValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_toRational" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LangAltValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::LangAltValue const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "LangAltValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_write" "', argument " "1"" of type '" "Exiv2::LangAltValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::LangAltValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_LangAltValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue::ValueType arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::LangAltValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LangAltValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_LangAltValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::map< std::string,std::string,Exiv2::LangAltValueComparator,std::allocator< std::pair< std::string const,std::string > > > *ptr = (std::map< std::string,std::string,Exiv2::LangAltValueComparator,std::allocator< std::pair< std::string const,std::string > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LangAltValue" "', argument " "1"" of type '" "Exiv2::LangAltValue::ValueType""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::LangAltValue *)new_Exiv2_LangAltValue__SWIG_2(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__LangAltValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_LangAltValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LangAltValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    int retval = _wrap_new_LangAltValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_LangAltValue__SWIG_1(self, args, NULL);
  }
check_2:
  
  if (argc == 1) {
    int retval = _wrap_new_LangAltValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LangAltValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::LangAltValue::LangAltValue()\n"
    "    Exiv2::LangAltValue::LangAltValue(std::string const &)\n"
    "    Exiv2::LangAltValue::LangAltValue(Exiv2::LangAltValue::ValueType)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_LangAltValue_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LangAltValue_keys takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_keys" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  result = (PyObject *)Exiv2_LangAltValue_keys(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LangAltValue_values takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_values" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  result = (PyObject *)Exiv2_LangAltValue_values(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LangAltValue_items takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue_items" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  result = (PyObject *)Exiv2_LangAltValue_items(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LangAltValue___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue___iter__" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  result = (PyObject *)Exiv2_LangAltValue___iter__(arg1);
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "LangAltValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue___getitem__" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LangAltValue___getitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LangAltValue___getitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (PyObject *)Exiv2_LangAltValue___getitem__(arg1,(std::string const &)*arg2);
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = (std::string *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "LangAltValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue___setitem__" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LangAltValue___setitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LangAltValue___setitem__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  if (obj2) {
    res3 = SWIG_AsPtr_std_string(obj2, &arg3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LangAltValue___setitem__" "', argument " "3"" of type '" "std::string const *""'");
    }
    res3 = SWIG_AddTmpMask(res3);
  }
  result = (PyObject *)Exiv2_LangAltValue___setitem__(arg1,(std::string const &)*arg2,(std::string const *)arg3);
  resultobj = result;
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LangAltValue___contains__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "LangAltValue___contains__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LangAltValue___contains__" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LangAltValue___contains__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LangAltValue___contains__" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  result = (bool)Exiv2_LangAltValue___contains__(arg1,(std::string const &)*arg2);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LangAltValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::LangAltValue *arg1 = (Exiv2::LangAltValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_LangAltValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__LangAltValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LangAltValue" "', argument " "1"" of type '" "Exiv2::LangAltValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::LangAltValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_LENFUNC_CLOSURE(_wrap_LangAltValue_count) /* defines _wrap_LangAltValue_count_lenfunc_closure */

SWIGPY_GETITERFUNC_CLOSURE(_wrap_LangAltValue___iter__) /* defines _wrap_LangAltValue___iter___getiterfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_LangAltValue___getitem__) /* defines _wrap_LangAltValue___getitem___binaryfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_LangAltValue___setitem__) /* defines _wrap_LangAltValue___setitem___objobjargproc_closure */

SWIGPY_OBJOBJPROC_CLOSURE(_wrap_LangAltValue___contains__) /* defines _wrap_LangAltValue___contains___objobjproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_LangAltValue) /* defines _wrap_delete_LangAltValue_destructor_closure */

SWIGINTERN int _wrap_new_DateValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DateValue")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_DateValue takes no arguments");
  {
    try {
      result = (Exiv2::DateValue *)new Exiv2::DateValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__DateValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DateValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::DateValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DateValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DateValue", 3, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DateValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_DateValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj3, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_DateValue" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (Exiv2::DateValue *)new Exiv2::DateValue(arg1,arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__DateValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_DateValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_DateValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DateValue" "', argument " "1"" of type '" "Exiv2::DateValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "DateValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_read" "', argument " "1"" of type '" "Exiv2::DateValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DateValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "DateValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DateValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "DateValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_read" "', argument " "1"" of type '" "Exiv2::DateValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "DateValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_DateValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_DateValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DateValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::DateValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::DateValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DateValue_setDate__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  Exiv2::DateValue::Date *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "DateValue_setDate", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_setDate" "', argument " "1"" of type '" "Exiv2::DateValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Exiv2__DateValue__Date,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DateValue_setDate" "', argument " "2"" of type '" "Exiv2::DateValue::Date const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "DateValue_setDate" "', argument " "2"" of type '" "Exiv2::DateValue::Date const &""'"); 
  }
  arg2 = reinterpret_cast< Exiv2::DateValue::Date * >(argp2);
  {
    try {
      (arg1)->setDate((Exiv2::DateValue::Date const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DateValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DateValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_clone" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  {
    try {
      result = ((Exiv2::DateValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__DateValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "DateValue_copy", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_copy" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DateValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "DateValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DateValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "DateValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::DateValue const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_getDate(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DateValue::Date *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DateValue_getDate takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_getDate" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  {
    try {
      result = (Exiv2::DateValue::Date *) &((Exiv2::DateValue const *)arg1)->getDate();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DateValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_count" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  result = (long)((Exiv2::DateValue const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DateValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_size" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  result = (long)((Exiv2::DateValue const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "DateValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_write" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::DateValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DateValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_toLong" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::DateValue const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DateValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_toFloat" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::DateValue const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DateValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_toRational" "', argument " "1"" of type '" "Exiv2::DateValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::DateValue const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_DateValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::DateValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DateValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DateValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__DateValue__Date,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DateValue" "', argument " "1"" of type '" "Exiv2::DateValue::Date &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_DateValue" "', argument " "1"" of type '" "Exiv2::DateValue::Date &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  {
    try {
      result = (Exiv2::DateValue *)new_Exiv2_DateValue__SWIG_2(*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__DateValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DateValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DateValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    int retval = _wrap_new_DateValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 1) {
    int retval = _wrap_new_DateValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 3) {
    int retval = _wrap_new_DateValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DateValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::DateValue::DateValue()\n"
    "    Exiv2::DateValue::DateValue(int,int,int)\n"
    "    Exiv2::DateValue::DateValue(Exiv2::DateValue::Date &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_DateValue_setDate__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue *arg1 = (Exiv2::DateValue *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "DateValue_setDate", 3, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DateValue_setDate" "', argument " "1"" of type '" "Exiv2::DateValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DateValue_setDate" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DateValue_setDate" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DateValue_setDate" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      Exiv2_DateValue_setDate__SWIG_1(arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DateValue_setDate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_DateValue_setDate__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 4) {
    PyObject *retobj = _wrap_DateValue_setDate__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DateValue_setDate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::DateValue::setDate(Exiv2::DateValue::Date const &)\n"
    "    Exiv2::DateValue::setDate(int,int,int)\n");
  return 0;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_DateValue) /* defines _wrap_delete_DateValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_DateValue_count) /* defines _wrap_DateValue_count_lenfunc_closure */

SWIGINTERN int _wrap_new_Date(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Date")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_Date takes no arguments");
  {
    try {
      result = (Exiv2::DateValue::Date *)new Exiv2::DateValue::Date();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__DateValue__Date, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_Date_year_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Date_year_set", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_year_set" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_year_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->year = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_year_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Date_year_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_year_get" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  result = (int) ((arg1)->year);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_month_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Date_month_set", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_month_set" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_month_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->month = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_month_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Date_month_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_month_get" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  result = (int) ((arg1)->month);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_day_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Date_day_set", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_day_set" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Date_day_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->day = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_day_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Date_day_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_day_get" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  result = (int) ((arg1)->day);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Date_items takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_items" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_DateValue_Date_items(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Date_keys takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_keys" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_DateValue_Date_keys(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Date_values takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date_values" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_DateValue_Date_values(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Date___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date___iter__" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_DateValue_Date___iter__(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (!PyArg_UnpackTuple(args, "Date___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date___getitem__" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  arg3 = obj1;
  {
    try {
      result = (PyObject *)Exiv2_DateValue_Date___getitem__(arg1,arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Date___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg4 = NULL;
  }
  {
    arg2 = self;
  }
  if (!PyArg_UnpackTuple(args, "Date___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Date___setitem__" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  arg3 = obj1;
  if (obj2) {
    arg4 = obj2;
  }
  {
    try {
      result = (PyObject *)Exiv2_DateValue_Date___setitem__(arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Date(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::DateValue::Date *arg1 = (Exiv2::DateValue::Date *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Date takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__DateValue__Date, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Date" "', argument " "1"" of type '" "Exiv2::DateValue::Date *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::DateValue::Date * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_Date___iter__) /* defines _wrap_Date___iter___getiterfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_Date___getitem__) /* defines _wrap_Date___getitem___binaryfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_Date___setitem__) /* defines _wrap_Date___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Date) /* defines _wrap_delete_Date_destructor_closure */

SWIGINTERN int _wrap_new_TimeValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_TimeValue")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_TimeValue takes no arguments");
  {
    try {
      result = (Exiv2::TimeValue *)new Exiv2::TimeValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__TimeValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_TimeValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  Exiv2::TimeValue *result = 0 ;
  
  {
    arg3 = 0;
  }
  {
    arg4 = 0;
  }
  {
    arg5 = 0;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_TimeValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_TimeValue", 2, 5, &obj1, &obj2, &obj3, &obj4, &obj5)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_TimeValue" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj2, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TimeValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (obj3) {
    ecode3 = SWIG_AsVal_int(obj3, &val3);
    if (!SWIG_IsOK(ecode3)) {
      SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_TimeValue" "', argument " "3"" of type '" "int""'");
    } 
    arg3 = static_cast< int >(val3);
  }
  if (obj4) {
    ecode4 = SWIG_AsVal_int(obj4, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_TimeValue" "', argument " "4"" of type '" "int""'");
    } 
    arg4 = static_cast< int >(val4);
  }
  if (obj5) {
    ecode5 = SWIG_AsVal_int(obj5, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_TimeValue" "', argument " "5"" of type '" "int""'");
    } 
    arg5 = static_cast< int >(val5);
  }
  {
    try {
      result = (Exiv2::TimeValue *)new Exiv2::TimeValue(arg1,arg2,arg3,arg4,arg5);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__TimeValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_TimeValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_TimeValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TimeValue" "', argument " "1"" of type '" "Exiv2::TimeValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  delete arg1;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  {
    arg4 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "TimeValue_read", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_read" "', argument " "1"" of type '" "Exiv2::TimeValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TimeValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "TimeValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TimeValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "TimeValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_read" "', argument " "1"" of type '" "Exiv2::TimeValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TimeValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_TimeValue_read__SWIG_1(self, args);
  }
check_1:
  
  if ((argc >= 2) && (argc <= 3)) {
    PyObject *retobj = _wrap_TimeValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TimeValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::TimeValue::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::TimeValue::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_TimeValue_setTime__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  Exiv2::TimeValue::Time *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "TimeValue_setTime", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_setTime" "', argument " "1"" of type '" "Exiv2::TimeValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Exiv2__TimeValue__Time,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TimeValue_setTime" "', argument " "2"" of type '" "Exiv2::TimeValue::Time const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "TimeValue_setTime" "', argument " "2"" of type '" "Exiv2::TimeValue::Time const &""'"); 
  }
  arg2 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp2);
  {
    try {
      (arg1)->setTime((Exiv2::TimeValue::Time const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::TimeValue::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "TimeValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_clone" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  {
    try {
      result = ((Exiv2::TimeValue const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__TimeValue, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  {
    arg3 = Exiv2::invalidByteOrder;
  }
  if (!PyArg_UnpackTuple(args, "TimeValue_copy", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_copy" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TimeValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_ByteOrder())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "TimeValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "TimeValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
        ;
      }
      arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
    }
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "TimeValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::TimeValue const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_getTime(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::TimeValue::Time *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "TimeValue_getTime takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_getTime" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  {
    try {
      result = (Exiv2::TimeValue::Time *) &((Exiv2::TimeValue const *)arg1)->getTime();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "TimeValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_count" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  result = (long)((Exiv2::TimeValue const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "TimeValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_size" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  result = (long)((Exiv2::TimeValue const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "TimeValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_write" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::TimeValue const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "TimeValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_toLong" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::TimeValue const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "TimeValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_toFloat" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::TimeValue const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "TimeValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_toRational" "', argument " "1"" of type '" "Exiv2::TimeValue const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::TimeValue const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_TimeValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::TimeValue *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_TimeValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_TimeValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__TimeValue__Time,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TimeValue" "', argument " "1"" of type '" "Exiv2::TimeValue::Time &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_TimeValue" "', argument " "1"" of type '" "Exiv2::TimeValue::Time &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  {
    try {
      result = (Exiv2::TimeValue *)new_Exiv2_TimeValue__SWIG_2(*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__TimeValue, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_TimeValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_TimeValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    int retval = _wrap_new_TimeValue__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 1) {
    int retval = _wrap_new_TimeValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 5)) {
    int retval = _wrap_new_TimeValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TimeValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::TimeValue::TimeValue()\n"
    "    Exiv2::TimeValue::TimeValue(int,int,int,int,int)\n"
    "    Exiv2::TimeValue::TimeValue(Exiv2::TimeValue::Time &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_TimeValue_setTime__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue *arg1 = (Exiv2::TimeValue *) 0 ;
  int32_t arg2 ;
  int32_t arg3 ;
  int32_t arg4 ;
  int32_t arg5 ;
  int32_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  int val6 ;
  int ecode6 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  {
    arg4 = 0;
  }
  {
    arg5 = 0;
  }
  {
    arg6 = 0;
  }
  if (!PyArg_UnpackTuple(args, "TimeValue_setTime", 2, 5, &obj1, &obj2, &obj3, &obj4, &obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TimeValue_setTime" "', argument " "1"" of type '" "Exiv2::TimeValue *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TimeValue_setTime" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TimeValue_setTime" "', argument " "3"" of type '" "int32_t""'");
  } 
  arg3 = static_cast< int32_t >(val3);
  if (obj3) {
    ecode4 = SWIG_AsVal_int(obj3, &val4);
    if (!SWIG_IsOK(ecode4)) {
      SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "TimeValue_setTime" "', argument " "4"" of type '" "int32_t""'");
    } 
    arg4 = static_cast< int32_t >(val4);
  }
  if (obj4) {
    ecode5 = SWIG_AsVal_int(obj4, &val5);
    if (!SWIG_IsOK(ecode5)) {
      SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "TimeValue_setTime" "', argument " "5"" of type '" "int32_t""'");
    } 
    arg5 = static_cast< int32_t >(val5);
  }
  if (obj5) {
    ecode6 = SWIG_AsVal_int(obj5, &val6);
    if (!SWIG_IsOK(ecode6)) {
      SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "TimeValue_setTime" "', argument " "6"" of type '" "int32_t""'");
    } 
    arg6 = static_cast< int32_t >(val6);
  }
  {
    try {
      Exiv2_TimeValue_setTime__SWIG_1(arg1,arg2,arg3,arg4,arg5,arg6);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TimeValue_setTime(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_TimeValue_setTime__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if ((argc >= 3) && (argc <= 6)) {
    PyObject *retobj = _wrap_TimeValue_setTime__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TimeValue_setTime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::TimeValue::setTime(Exiv2::TimeValue::Time const &)\n"
    "    Exiv2::TimeValue::setTime(int32_t,int32_t,int32_t,int32_t,int32_t)\n");
  return 0;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_TimeValue) /* defines _wrap_delete_TimeValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_TimeValue_count) /* defines _wrap_TimeValue_count_lenfunc_closure */

SWIGINTERN int _wrap_new_Time(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Time")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_Time takes no arguments");
  {
    try {
      result = (Exiv2::TimeValue::Time *)new Exiv2::TimeValue::Time();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__TimeValue__Time, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_Time_hour_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Time_hour_set", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_hour_set" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_hour_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->hour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_hour_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_hour_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_hour_get" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  result = (int) ((arg1)->hour);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_minute_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Time_minute_set", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_minute_set" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_minute_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->minute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_minute_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_minute_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_minute_get" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  result = (int) ((arg1)->minute);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_second_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Time_second_set", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_second_set" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_second_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (arg1) (arg1)->second = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_second_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_second_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_second_get" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  result = (int) ((arg1)->second);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_tzHour_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Time_tzHour_set", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_tzHour_set" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_tzHour_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (arg1) (arg1)->tzHour = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_tzHour_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_tzHour_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_tzHour_get" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  result = (int) ((arg1)->tzHour);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_tzMinute_set(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Time_tzMinute_set", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_tzMinute_set" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_int(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Time_tzMinute_set" "', argument " "2"" of type '" "int""'");
    } 
    arg2 = static_cast< int >(val2);
  }
  if (arg1) (arg1)->tzMinute = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_tzMinute_get(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_tzMinute_get takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_tzMinute_get" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  result = (int) ((arg1)->tzMinute);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_items(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_items takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_items" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_TimeValue_Time_items(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_keys(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_keys takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_keys" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_TimeValue_Time_keys(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time_values(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time_values takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time_values" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_TimeValue_Time_values(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Time___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___iter__" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  {
    try {
      result = (PyObject *)Exiv2_TimeValue_Time___iter__(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg2 = self;
  }
  if (!PyArg_UnpackTuple(args, "Time___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___getitem__" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  arg3 = obj1;
  {
    try {
      result = (PyObject *)Exiv2_TimeValue_Time___getitem__(arg1,arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Time___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg4 = NULL;
  }
  {
    arg2 = self;
  }
  if (!PyArg_UnpackTuple(args, "Time___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Time___setitem__" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  arg3 = obj1;
  if (obj2) {
    arg4 = obj2;
  }
  {
    try {
      result = (PyObject *)Exiv2_TimeValue_Time___setitem__(arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Time(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::TimeValue::Time *arg1 = (Exiv2::TimeValue::Time *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Time takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__TimeValue__Time, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Time" "', argument " "1"" of type '" "Exiv2::TimeValue::Time *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::TimeValue::Time * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_Time___iter__) /* defines _wrap_Time___iter___getiterfunc_closure */

SWIGPY_BINARYFUNC_CLOSURE(_wrap_Time___getitem__) /* defines _wrap_Time___getitem___binaryfunc_closure */

SWIGPY_OBJOBJARGPROC_CLOSURE(_wrap_Time___setitem__) /* defines _wrap_Time___setitem___objobjargproc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Time) /* defines _wrap_delete_Time_destructor_closure */

SWIGINTERN int _wrap_new_UShortValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< uint16_t > *result = 0 ;
  
  {
    arg1 = Exiv2::unsignedShort;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_UShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_UShortValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_UShortValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_UShortValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< uint16_t > *)new Exiv2::ValueType< uint16_t >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_UShortValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< uint16_t > *result = 0 ;
  
  {
    arg4 = Exiv2::unsignedShort;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_UShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_UShortValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_UShortValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_UShortValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_UShortValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_UShortValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_UShortValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< uint16_t > *)new Exiv2::ValueType< uint16_t >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_UShortValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned short *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  unsigned short temp1 ;
  unsigned short val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< uint16_t > *result = 0 ;
  
  {
    arg2 = Exiv2::unsignedShort;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_UShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_UShortValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_short(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_UShortValue" "', argument " "1"" of type '" "unsigned short""'");
  } 
  temp1 = static_cast< unsigned short >(val1);
  arg1 = &temp1;
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_UShortValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_UShortValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< uint16_t > *)new Exiv2::ValueType< uint16_t >((unsigned short const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_UShortValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< unsigned short > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< uint16_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_UShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_UShortValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_UShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< unsigned short > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_UShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< unsigned short > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< unsigned short > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< uint16_t > *)new Exiv2::ValueType< uint16_t >((Exiv2::ValueType< unsigned short > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_UShortValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_UShortValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_UShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "UShortValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UShortValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "UShortValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UShortValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "UShortValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "UShortValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "UShortValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_UShortValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_UShortValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'UShortValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< uint16_t >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< uint16_t >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_UShortValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "UShortValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UShortValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< unsigned short >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "UShortValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< uint16_t > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "UShortValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UShortValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "UShortValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "UShortValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "UShortValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< uint16_t > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "UShortValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  result = (long)((Exiv2::ValueType< uint16_t > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "UShortValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  result = (long)((Exiv2::ValueType< uint16_t > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "UShortValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< uint16_t > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "UShortValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< uint16_t > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "UShortValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< uint16_t > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "UShortValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< uint16_t > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "UShortValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< uint16_t > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "UShortValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< uint16_t > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "UShortValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< uint16_t > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_UShortValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< uint16_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_UShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_UShortValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< unsigned short,std::allocator< unsigned short > > *ptr = (std::vector< unsigned short,std::allocator< unsigned short > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_UShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< uint16_t > *)new_Exiv2_ValueType_Sl_uint16_t_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_UShortValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_UShortValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_UShortValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_UShortValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_short(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_UShortValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_UShortValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_UShortValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_UShortValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< uint16_t >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< uint16_t >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< uint16_t >::ValueType(unsigned short const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< uint16_t >::ValueType(Exiv2::ValueType< unsigned short > const &)\n"
    "    Exiv2::ValueType< uint16_t >::ValueType(Exiv2::ValueType< uint16_t >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_UShortValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  uint16_t result;
  
  if (!PyArg_UnpackTuple(args, "UShortValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = (uint16_t)Exiv2_ValueType_Sl_uint16_t_Sg____getitem__(arg1,arg2);
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  long arg2 ;
  uint16_t *arg3 = (uint16_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  uint16_t temp3 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "UShortValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_short,0))))) {
      unsigned short val;
      int ecode = SWIG_AsVal_unsigned_SS_short(obj2, &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "UShortValue___setitem__" "', argument " "3"" of type '" "uint16_t""'");
      }
      temp3 = static_cast< uint16_t >(val);
      arg3 = &temp3;
      res3 = SWIG_AddTmpMask(ecode);
    }
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_uint16_t_Sg____setitem__(arg1,arg2,(unsigned short const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_UShortValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint16_t > *arg1 = (Exiv2::ValueType< uint16_t > *) 0 ;
  uint16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "UShortValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "UShortValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< uint16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint16_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "UShortValue_append" "', argument " "2"" of type '" "uint16_t""'");
  } 
  arg2 = static_cast< uint16_t >(val2);
  Exiv2_ValueType_Sl_uint16_t_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_UShortValue) /* defines _wrap_delete_UShortValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_UShortValue_count) /* defines _wrap_UShortValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_UShortValue___getitem__) /* defines _wrap_UShortValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_UShortValue___setitem__) /* defines _wrap_UShortValue___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_ULongValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< uint32_t > *result = 0 ;
  
  {
    arg1 = Exiv2::unsignedLong;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ULongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ULongValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_ULongValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ULongValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< uint32_t > *)new Exiv2::ValueType< uint32_t >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ULongValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< uint32_t > *result = 0 ;
  
  {
    arg4 = Exiv2::unsignedLong;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ULongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ULongValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ULongValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_ULongValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ULongValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_ULongValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ULongValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< uint32_t > *)new Exiv2::ValueType< uint32_t >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_ULongValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  unsigned int *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  unsigned int temp1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< uint32_t > *result = 0 ;
  
  {
    arg2 = Exiv2::unsignedLong;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ULongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ULongValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ULongValue" "', argument " "1"" of type '" "unsigned int""'");
  } 
  temp1 = static_cast< unsigned int >(val1);
  arg1 = &temp1;
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_ULongValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ULongValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< uint32_t > *)new Exiv2::ValueType< uint32_t >((unsigned int const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ULongValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< unsigned int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< uint32_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ULongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ULongValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ULongValue" "', argument " "1"" of type '" "Exiv2::ValueType< unsigned int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_ULongValue" "', argument " "1"" of type '" "Exiv2::ValueType< unsigned int > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< unsigned int > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< uint32_t > *)new Exiv2::ValueType< uint32_t >((Exiv2::ValueType< unsigned int > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ULongValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_ULongValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ULongValue" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ULongValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ULongValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "ULongValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ULongValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ULongValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ULongValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ULongValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_ULongValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ULongValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ULongValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< uint32_t >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< uint32_t >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ULongValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ULongValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ULongValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< unsigned int >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ULongValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< uint32_t > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "ULongValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ULongValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "ULongValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ULongValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "ULongValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< uint32_t > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ULongValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  result = (long)((Exiv2::ValueType< uint32_t > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ULongValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  result = (long)((Exiv2::ValueType< uint32_t > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ULongValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< uint32_t > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ULongValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< uint32_t > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ULongValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< uint32_t > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ULongValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< uint32_t > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ULongValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< uint32_t > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ULongValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< uint32_t > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ULongValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< uint32_t > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_ULongValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< uint32_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ULongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ULongValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< unsigned int,std::allocator< unsigned int > > *ptr = (std::vector< unsigned int,std::allocator< unsigned int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ULongValue" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< uint32_t > *)new_Exiv2_ValueType_Sl_uint32_t_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ULongValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ULongValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_ULongValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_ULongValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_ULongValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_ULongValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_ULongValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ULongValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< uint32_t >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< uint32_t >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< uint32_t >::ValueType(unsigned int const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< uint32_t >::ValueType(Exiv2::ValueType< unsigned int > const &)\n"
    "    Exiv2::ValueType< uint32_t >::ValueType(Exiv2::ValueType< uint32_t >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_ULongValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  uint32_t result;
  
  if (!PyArg_UnpackTuple(args, "ULongValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = (uint32_t)Exiv2_ValueType_Sl_uint32_t_Sg____getitem__(arg1,arg2);
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  long arg2 ;
  uint32_t *arg3 = (uint32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  uint32_t temp3 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "ULongValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_unsigned_int,0))))) {
      unsigned int val;
      int ecode = SWIG_AsVal_unsigned_SS_int(obj2, &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "ULongValue___setitem__" "', argument " "3"" of type '" "uint32_t""'");
      }
      temp3 = static_cast< uint32_t >(val);
      arg3 = &temp3;
      res3 = SWIG_AddTmpMask(ecode);
    }
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_uint32_t_Sg____setitem__(arg1,arg2,(unsigned int const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ULongValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< uint32_t > *arg1 = (Exiv2::ValueType< uint32_t > *) 0 ;
  uint32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ULongValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ULongValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< uint32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< uint32_t > * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ULongValue_append" "', argument " "2"" of type '" "uint32_t""'");
  } 
  arg2 = static_cast< uint32_t >(val2);
  Exiv2_ValueType_Sl_uint32_t_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ULongValue) /* defines _wrap_delete_ULongValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_ULongValue_count) /* defines _wrap_ULongValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_ULongValue___getitem__) /* defines _wrap_ULongValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_ULongValue___setitem__) /* defines _wrap_ULongValue___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_URationalValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< Exiv2::URational > *result = 0 ;
  
  {
    arg1 = Exiv2::unsignedRational;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_URationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_URationalValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_URationalValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_URationalValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::URational > *)new Exiv2::ValueType< Exiv2::URational >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_URationalValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< Exiv2::URational > *result = 0 ;
  
  {
    arg4 = Exiv2::unsignedRational;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_URationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_URationalValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_URationalValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_URationalValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_URationalValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_URationalValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_URationalValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::URational > *)new Exiv2::ValueType< Exiv2::URational >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_URationalValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::pair< unsigned int,unsigned int > *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< Exiv2::URational > *result = 0 ;
  
  {
    arg2 = Exiv2::unsignedRational;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_URationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_URationalValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  {
    std::pair< unsigned int,unsigned int > *ptr = (std::pair< unsigned int,unsigned int > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_URationalValue" "', argument " "1"" of type '" "std::pair< unsigned int,unsigned int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_URationalValue" "', argument " "1"" of type '" "std::pair< unsigned int,unsigned int > const &""'"); 
    }
    arg1 = ptr;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_URationalValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_URationalValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::URational > *)new Exiv2::ValueType< Exiv2::URational >((std::pair< unsigned int,unsigned int > const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_URationalValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< std::pair< unsigned int,unsigned int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< Exiv2::URational > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_URationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_URationalValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_URationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< std::pair< unsigned int,unsigned int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_URationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< std::pair< unsigned int,unsigned int > > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< std::pair< unsigned int,unsigned int > > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< Exiv2::URational > *)new Exiv2::ValueType< Exiv2::URational >((Exiv2::ValueType< std::pair< unsigned int,unsigned int > > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_URationalValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_URationalValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_URationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "URationalValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "URationalValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "URationalValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "URationalValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "URationalValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "URationalValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "URationalValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_URationalValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_URationalValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'URationalValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< Exiv2::URational >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< Exiv2::URational >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_URationalValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "URationalValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "URationalValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< std::pair< unsigned int,unsigned int > >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "URationalValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::URational > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "URationalValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "URationalValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "URationalValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "URationalValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "URationalValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< Exiv2::URational > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "URationalValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  result = (long)((Exiv2::ValueType< Exiv2::URational > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "URationalValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  result = (long)((Exiv2::ValueType< Exiv2::URational > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "URationalValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< Exiv2::URational > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "URationalValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "URationalValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::URational > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "URationalValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "URationalValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< Exiv2::URational > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "URationalValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "URationalValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< Exiv2::URational > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "URationalValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "URationalValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::URational > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "URationalValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< Exiv2::URational > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "URationalValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::URational > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_URationalValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< Exiv2::URational > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_URationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_URationalValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< std::pair< unsigned int,unsigned int >,std::allocator< std::pair< unsigned int,unsigned int > > > *ptr = (std::vector< std::pair< unsigned int,unsigned int >,std::allocator< std::pair< unsigned int,unsigned int > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_URationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::URational > *)new_Exiv2_ValueType_Sl_Exiv2_URational_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_URationalValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_URationalValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_URationalValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_URationalValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      int res = swig::asptr(argv[0], (std::pair< unsigned int,unsigned int >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_URationalValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_URationalValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_URationalValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_URationalValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< Exiv2::URational >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< Exiv2::URational >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< Exiv2::URational >::ValueType(std::pair< unsigned int,unsigned int > const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< Exiv2::URational >::ValueType(Exiv2::ValueType< std::pair< unsigned int,unsigned int > > const &)\n"
    "    Exiv2::ValueType< Exiv2::URational >::ValueType(Exiv2::ValueType< Exiv2::URational >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_URationalValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::URational result;
  
  if (!PyArg_UnpackTuple(args, "URationalValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "URationalValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = Exiv2_ValueType_Sl_Exiv2_URational_Sg____getitem__(arg1,arg2);
  resultobj = swig::from(static_cast< std::pair< unsigned int,unsigned int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  long arg2 ;
  Exiv2::URational *arg3 = (Exiv2::URational *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "URationalValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "URationalValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    res3 = swig::asptr(obj2, &arg3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "URationalValue___setitem__" "', argument " "3"" of type '" "Exiv2::URational const *""'");
    }
    res3 = SWIG_AddTmpMask(res3);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_Exiv2_URational_Sg____setitem__(arg1,arg2,(std::pair< unsigned int,unsigned int > const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_URationalValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::URational > *arg1 = (Exiv2::ValueType< Exiv2::URational > *) 0 ;
  Exiv2::URational arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "URationalValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "URationalValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::URational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::URational > * >(argp1);
  {
    std::pair< unsigned int,unsigned int > *ptr = (std::pair< unsigned int,unsigned int > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "URationalValue_append" "', argument " "2"" of type '" "Exiv2::URational""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  Exiv2_ValueType_Sl_Exiv2_URational_Sg__append(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_URationalValue) /* defines _wrap_delete_URationalValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_URationalValue_count) /* defines _wrap_URationalValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_URationalValue___getitem__) /* defines _wrap_URationalValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_URationalValue___setitem__) /* defines _wrap_URationalValue___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_ShortValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< int16_t > *result = 0 ;
  
  {
    arg1 = Exiv2::signedShort;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ShortValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_ShortValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ShortValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< int16_t > *)new Exiv2::ValueType< int16_t >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ShortValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< int16_t > *result = 0 ;
  
  {
    arg4 = Exiv2::signedShort;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ShortValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ShortValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_ShortValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ShortValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_ShortValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ShortValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< int16_t > *)new Exiv2::ValueType< int16_t >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_ShortValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  short *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  short temp1 ;
  short val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< int16_t > *result = 0 ;
  
  {
    arg2 = Exiv2::signedShort;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ShortValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_short(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ShortValue" "', argument " "1"" of type '" "short""'");
  } 
  temp1 = static_cast< short >(val1);
  arg1 = &temp1;
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_ShortValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_ShortValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< int16_t > *)new Exiv2::ValueType< int16_t >((short const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ShortValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< short > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< int16_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ShortValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< short > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_ShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< short > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< short > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< int16_t > *)new Exiv2::ValueType< int16_t >((Exiv2::ValueType< short > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ShortValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_ShortValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ShortValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShortValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "ShortValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShortValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ShortValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ShortValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ShortValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_ShortValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ShortValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ShortValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< int16_t >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< int16_t >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ShortValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "ShortValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShortValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< short >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ShortValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< int16_t > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "ShortValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShortValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "ShortValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ShortValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "ShortValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< int16_t > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ShortValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  result = (long)((Exiv2::ValueType< int16_t > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ShortValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  result = (long)((Exiv2::ValueType< int16_t > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ShortValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< int16_t > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ShortValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< int16_t > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ShortValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< int16_t > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ShortValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< int16_t > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "ShortValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< int16_t > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ShortValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< int16_t > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ShortValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< int16_t > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_ShortValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< int16_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ShortValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ShortValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< short,std::allocator< short > > *ptr = (std::vector< short,std::allocator< short > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_ShortValue" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< int16_t > *)new_Exiv2_ValueType_Sl_int16_t_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_ShortValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ShortValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_ShortValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_ShortValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_short(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_ShortValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_ShortValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_ShortValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ShortValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< int16_t >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< int16_t >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< int16_t >::ValueType(short const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< int16_t >::ValueType(Exiv2::ValueType< short > const &)\n"
    "    Exiv2::ValueType< int16_t >::ValueType(Exiv2::ValueType< int16_t >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_ShortValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  int16_t result;
  
  if (!PyArg_UnpackTuple(args, "ShortValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = (int16_t)Exiv2_ValueType_Sl_int16_t_Sg____getitem__(arg1,arg2);
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  long arg2 ;
  int16_t *arg3 = (int16_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int16_t temp3 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "ShortValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_short,0))))) {
      short val;
      int ecode = SWIG_AsVal_short(obj2, &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "ShortValue___setitem__" "', argument " "3"" of type '" "int16_t""'");
      }
      temp3 = static_cast< int16_t >(val);
      arg3 = &temp3;
      res3 = SWIG_AddTmpMask(ecode);
    }
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_int16_t_Sg____setitem__(arg1,arg2,(short const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ShortValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int16_t > *arg1 = (Exiv2::ValueType< int16_t > *) 0 ;
  int16_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ShortValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ShortValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< int16_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int16_t > * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ShortValue_append" "', argument " "2"" of type '" "int16_t""'");
  } 
  arg2 = static_cast< int16_t >(val2);
  Exiv2_ValueType_Sl_int16_t_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ShortValue) /* defines _wrap_delete_ShortValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_ShortValue_count) /* defines _wrap_ShortValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_ShortValue___getitem__) /* defines _wrap_ShortValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_ShortValue___setitem__) /* defines _wrap_ShortValue___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_LongValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< int32_t > *result = 0 ;
  
  {
    arg1 = Exiv2::signedLong;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_LongValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_LongValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_LongValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< int32_t > *)new Exiv2::ValueType< int32_t >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_LongValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< int32_t > *result = 0 ;
  
  {
    arg4 = Exiv2::signedLong;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_LongValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_LongValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_LongValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_LongValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_LongValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_LongValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< int32_t > *)new Exiv2::ValueType< int32_t >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_LongValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  int *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  int temp1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< int32_t > *result = 0 ;
  
  {
    arg2 = Exiv2::signedLong;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_LongValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_LongValue" "', argument " "1"" of type '" "int""'");
  } 
  temp1 = static_cast< int >(val1);
  arg1 = &temp1;
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_LongValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_LongValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< int32_t > *)new Exiv2::ValueType< int32_t >((int const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_LongValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< int32_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_LongValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LongValue" "', argument " "1"" of type '" "Exiv2::ValueType< int > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_LongValue" "', argument " "1"" of type '" "Exiv2::ValueType< int > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< int32_t > *)new Exiv2::ValueType< int32_t >((Exiv2::ValueType< int > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_LongValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_LongValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LongValue" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "LongValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "LongValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "LongValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LongValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "LongValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_LongValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_LongValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'LongValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< int32_t >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< int32_t >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LongValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "LongValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< int >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LongValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< int32_t > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "LongValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "LongValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "LongValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "LongValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< int32_t > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LongValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  result = (long)((Exiv2::ValueType< int32_t > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LongValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  result = (long)((Exiv2::ValueType< int32_t > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "LongValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< int32_t > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LongValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< int32_t > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LongValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< int32_t > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LongValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< int32_t > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "LongValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< int32_t > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LongValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< int32_t > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "LongValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< int32_t > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_LongValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< int32_t > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LongValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_LongValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< int,std::allocator< int > > *ptr = (std::vector< int,std::allocator< int > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_LongValue" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< int32_t > *)new_Exiv2_ValueType_Sl_int32_t_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_LongValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_LongValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_LongValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_LongValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_int(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_LongValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_LongValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_LongValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_LongValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< int32_t >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< int32_t >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< int32_t >::ValueType(int const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< int32_t >::ValueType(Exiv2::ValueType< int > const &)\n"
    "    Exiv2::ValueType< int32_t >::ValueType(Exiv2::ValueType< int32_t >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_LongValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  int32_t result;
  
  if (!PyArg_UnpackTuple(args, "LongValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = (int32_t)Exiv2_ValueType_Sl_int32_t_Sg____getitem__(arg1,arg2);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  long arg2 ;
  int32_t *arg3 = (int32_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int32_t temp3 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "LongValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_int,0))))) {
      int val;
      int ecode = SWIG_AsVal_int(obj2, &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "LongValue___setitem__" "', argument " "3"" of type '" "int32_t""'");
      }
      temp3 = static_cast< int32_t >(val);
      arg3 = &temp3;
      res3 = SWIG_AddTmpMask(ecode);
    }
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_int32_t_Sg____setitem__(arg1,arg2,(int const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LongValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< int32_t > *arg1 = (Exiv2::ValueType< int32_t > *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "LongValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LongValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< int32_t > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< int32_t > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "LongValue_append" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  Exiv2_ValueType_Sl_int32_t_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_LongValue) /* defines _wrap_delete_LongValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_LongValue_count) /* defines _wrap_LongValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_LongValue___getitem__) /* defines _wrap_LongValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_LongValue___setitem__) /* defines _wrap_LongValue___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_RationalValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< Exiv2::Rational > *result = 0 ;
  
  {
    arg1 = Exiv2::signedRational;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_RationalValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_RationalValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_RationalValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::Rational > *)new Exiv2::ValueType< Exiv2::Rational >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_RationalValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< Exiv2::Rational > *result = 0 ;
  
  {
    arg4 = Exiv2::signedRational;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_RationalValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_RationalValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_RationalValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_RationalValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_RationalValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_RationalValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::Rational > *)new Exiv2::ValueType< Exiv2::Rational >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_RationalValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  std::pair< int,int > *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< Exiv2::Rational > *result = 0 ;
  
  {
    arg2 = Exiv2::signedRational;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_RationalValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    res1 = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RationalValue" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_RationalValue" "', argument " "1"" of type '" "std::pair< int,int > const &""'"); 
    }
    arg1 = ptr;
  }
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_RationalValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_RationalValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::Rational > *)new Exiv2::ValueType< Exiv2::Rational >((std::pair< int,int > const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj == Py_None ? -1 : 0;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return -1;
}


SWIGINTERN int _wrap_new_RationalValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< std::pair< int,int > > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< Exiv2::Rational > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_RationalValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< std::pair< int,int > > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_RationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< std::pair< int,int > > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< std::pair< int,int > > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< Exiv2::Rational > *)new Exiv2::ValueType< Exiv2::Rational >((Exiv2::ValueType< std::pair< int,int > > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_RationalValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_RationalValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "RationalValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RationalValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "RationalValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RationalValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "RationalValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RationalValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "RationalValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_RationalValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_RationalValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'RationalValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< Exiv2::Rational >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< Exiv2::Rational >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RationalValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "RationalValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RationalValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< std::pair< int,int > >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "RationalValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "RationalValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RationalValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "RationalValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "RationalValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "RationalValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "RationalValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  result = (long)((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "RationalValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  result = (long)((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "RationalValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "RationalValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RationalValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "RationalValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RationalValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "RationalValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RationalValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "RationalValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RationalValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "RationalValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "RationalValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< Exiv2::Rational > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_RationalValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< Exiv2::Rational > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RationalValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_RationalValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *ptr = (std::vector< std::pair< int,int >,std::allocator< std::pair< int,int > > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_RationalValue" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< Exiv2::Rational > *)new_Exiv2_ValueType_Sl_Exiv2_Rational_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_RationalValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_RationalValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_RationalValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_RationalValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      int res = swig::asptr(argv[0], (std::pair< int,int >**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_RationalValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_RationalValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_RationalValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_RationalValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< Exiv2::Rational >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< Exiv2::Rational >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< Exiv2::Rational >::ValueType(std::pair< int,int > const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< Exiv2::Rational >::ValueType(Exiv2::ValueType< std::pair< int,int > > const &)\n"
    "    Exiv2::ValueType< Exiv2::Rational >::ValueType(Exiv2::ValueType< Exiv2::Rational >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_RationalValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  if (!PyArg_UnpackTuple(args, "RationalValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RationalValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = Exiv2_ValueType_Sl_Exiv2_Rational_Sg____getitem__(arg1,arg2);
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  long arg2 ;
  Exiv2::Rational *arg3 = (Exiv2::Rational *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "RationalValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RationalValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    res3 = swig::asptr(obj2, &arg3);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RationalValue___setitem__" "', argument " "3"" of type '" "Exiv2::Rational const *""'");
    }
    res3 = SWIG_AddTmpMask(res3);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_Exiv2_Rational_Sg____setitem__(arg1,arg2,(std::pair< int,int > const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RationalValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< Exiv2::Rational > *arg1 = (Exiv2::ValueType< Exiv2::Rational > *) 0 ;
  Exiv2::Rational arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "RationalValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RationalValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< Exiv2::Rational > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< Exiv2::Rational > * >(argp1);
  {
    std::pair< int,int > *ptr = (std::pair< int,int > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "RationalValue_append" "', argument " "2"" of type '" "Exiv2::Rational""'"); 
    }
    arg2 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  Exiv2_ValueType_Sl_Exiv2_Rational_Sg__append(arg1,SWIG_STD_MOVE(arg2));
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_RationalValue) /* defines _wrap_delete_RationalValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_RationalValue_count) /* defines _wrap_RationalValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_RationalValue___getitem__) /* defines _wrap_RationalValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_RationalValue___setitem__) /* defines _wrap_RationalValue___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_FloatValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< float > *result = 0 ;
  
  {
    arg1 = Exiv2::tiffFloat;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_FloatValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_FloatValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_FloatValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_FloatValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< float > *)new Exiv2::ValueType< float >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_FloatValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< float > *result = 0 ;
  
  {
    arg4 = Exiv2::tiffFloat;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_FloatValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_FloatValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_FloatValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_FloatValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_FloatValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_FloatValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_FloatValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< float > *)new Exiv2::ValueType< float >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_FloatValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  float *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  float temp1 ;
  float val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< float > *result = 0 ;
  
  {
    arg2 = Exiv2::tiffFloat;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_FloatValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_FloatValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_float(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FloatValue" "', argument " "1"" of type '" "float""'");
  } 
  temp1 = static_cast< float >(val1);
  arg1 = &temp1;
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_FloatValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_FloatValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< float > *)new Exiv2::ValueType< float >((float const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_FloatValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< float > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_FloatValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_FloatValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_float_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FloatValue" "', argument " "1"" of type '" "Exiv2::ValueType< float > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_FloatValue" "', argument " "1"" of type '" "Exiv2::ValueType< float > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< float > *)new Exiv2::ValueType< float >((Exiv2::ValueType< float > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_FloatValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_FloatValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FloatValue" "', argument " "1"" of type '" "Exiv2::ValueType< float > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "FloatValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< float > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "FloatValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "FloatValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< float > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FloatValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "FloatValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_FloatValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_FloatValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FloatValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< float >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< float >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FloatValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "FloatValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< float > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< float >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "FloatValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< float > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "FloatValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "FloatValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "FloatValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "FloatValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< float > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "FloatValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  result = (long)((Exiv2::ValueType< float > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "FloatValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  result = (long)((Exiv2::ValueType< float > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "FloatValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< float > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "FloatValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< float > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "FloatValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< float > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "FloatValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< float > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "FloatValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< float > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "FloatValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< float > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "FloatValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< float > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< float > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_FloatValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< float > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_FloatValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_FloatValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< float,std::allocator< float > > *ptr = (std::vector< float,std::allocator< float > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_FloatValue" "', argument " "1"" of type '" "Exiv2::ValueType< float >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< float > *)new_Exiv2_ValueType_Sl_float_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_FloatValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_FloatValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_FloatValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_float_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_FloatValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_float(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_FloatValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_FloatValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_FloatValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_FloatValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< float >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< float >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< float >::ValueType(float const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< float >::ValueType(Exiv2::ValueType< float > const &)\n"
    "    Exiv2::ValueType< float >::ValueType(Exiv2::ValueType< float >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_FloatValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  if (!PyArg_UnpackTuple(args, "FloatValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< float > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = (float)Exiv2_ValueType_Sl_float_Sg____getitem__(arg1,arg2);
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  long arg2 ;
  float *arg3 = (float *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  float temp3 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "FloatValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< float > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_float,0))))) {
      float val;
      int ecode = SWIG_AsVal_float(obj2, &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "FloatValue___setitem__" "', argument " "3"" of type '" "float""'");
      }
      temp3 = static_cast< float >(val);
      arg3 = &temp3;
      res3 = SWIG_AddTmpMask(ecode);
    }
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_float_Sg____setitem__(arg1,arg2,(float const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FloatValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< float > *arg1 = (Exiv2::ValueType< float > *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "FloatValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_float_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FloatValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< float > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< float > * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FloatValue_append" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  Exiv2_ValueType_Sl_float_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_FloatValue) /* defines _wrap_delete_FloatValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_FloatValue_count) /* defines _wrap_FloatValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_FloatValue___getitem__) /* defines _wrap_FloatValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_FloatValue___setitem__) /* defines _wrap_FloatValue___setitem___ssizeobjargproc_closure */

SWIGINTERN int _wrap_new_DoubleValue__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::TypeId arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< double > *result = 0 ;
  
  {
    arg1 = Exiv2::tiffDouble;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DoubleValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DoubleValue", 0, 1, &obj1)) SWIG_fail;
  if (obj1) {
    {
      if (!PyObject_IsInstance(obj1,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_DoubleValue argument 1 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj1)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DoubleValue" "', argument " "1"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg1 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< double > *)new Exiv2::ValueType< double >(arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DoubleValue__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::byte *arg1 = (Exiv2::byte *) 0 ;
  long arg2 ;
  Exiv2::ByteOrder arg3 ;
  Exiv2::TypeId arg4 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  Exiv2::ValueType< double > *result = 0 ;
  
  {
    arg4 = Exiv2::tiffDouble;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DoubleValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DoubleValue", 2, 3, &obj1, &obj2, &obj3)) SWIG_fail;
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DoubleValue" "', argument " "1"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg1 = (Exiv2::byte *) buff->buf;
    arg2 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "new_DoubleValue argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DoubleValue" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  if (obj3) {
    {
      if (!PyObject_IsInstance(obj3,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_DoubleValue argument 4 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj3)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DoubleValue" "', argument " "4"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg4 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj3));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< double > *)new Exiv2::ValueType< double >((Exiv2::byte const *)arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_BUILTIN_INIT |  0 );
  
  Py_XDECREF(_global_view);
  
  return resultobj == Py_None ? -1 : 0;
fail:
  
  Py_XDECREF(_global_view);
  
  return -1;
}


SWIGINTERN int _wrap_new_DoubleValue__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  double *arg1 = 0 ;
  Exiv2::TypeId arg2 ;
  double temp1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::ValueType< double > *result = 0 ;
  
  {
    arg2 = Exiv2::tiffDouble;
  }
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DoubleValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DoubleValue", 1, 2, &obj1, &obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj1, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_DoubleValue" "', argument " "1"" of type '" "double""'");
  } 
  temp1 = static_cast< double >(val1);
  arg1 = &temp1;
  if (obj2) {
    {
      if (!PyObject_IsInstance(obj2,
          get_enum_typeobject_Exiv2_TypeId())) {
        // deprecated since 2024-01-09
        PyErr_WarnEx(PyExc_DeprecationWarning,
          "new_DoubleValue argument 2 type should be 'Exiv2::TypeId'.", 1);
      }
      if (!PyLong_Check(obj2)) {
        SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "new_DoubleValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
        ;
      }
      arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj2));
    }
  }
  {
    try {
      result = (Exiv2::ValueType< double > *)new Exiv2::ValueType< double >((double const &)*arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DoubleValue__SWIG_3(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< double > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DoubleValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DoubleValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ValueTypeT_double_t,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DoubleValue" "', argument " "1"" of type '" "Exiv2::ValueType< double > const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_DoubleValue" "', argument " "1"" of type '" "Exiv2::ValueType< double > const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    try {
      result = (Exiv2::ValueType< double > *)new Exiv2::ValueType< double >((Exiv2::ValueType< double > const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_DoubleValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_DoubleValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DoubleValue" "', argument " "1"" of type '" "Exiv2::ValueType< double > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_read__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::ByteOrder arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "DoubleValue_read", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< double > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleValue_read" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "DoubleValue_read argument 4 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleValue_read" "', argument " "4"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg4 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    try {
      result = (int)(arg1)->read((Exiv2::byte const *)arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_read__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "DoubleValue_read", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_read" "', argument " "1"" of type '" "Exiv2::ValueType< double > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DoubleValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "DoubleValue_read" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (int)(arg1)->read((std::string const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_read(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_DoubleValue_read__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_DoubleValue_read__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'DoubleValue_read'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< double >::read(Exiv2::byte const *,long,Exiv2::ByteOrder)\n"
    "    Exiv2::ValueType< double >::read(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DoubleValue_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "DoubleValue_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_setDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< double > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    _global_view = PyMemoryView_GetContiguous(obj1, PyBUF_READ, 'A');
    if (!_global_view) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleValue_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    Py_buffer* buff = PyMemoryView_GET_BUFFER(_global_view);
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_clone(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::ValueType< double >::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DoubleValue_clone takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_clone" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< double > const *)arg1)->clone();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj((&result)->release(), SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_POINTER_OWN |  0 );
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_view ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "DoubleValue_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_copy" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    _global_view.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_view, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleValue_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_view.buf;
  }
  {
    if (!PyObject_IsInstance(obj2,
        get_enum_typeobject_Exiv2_ByteOrder())) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "DoubleValue_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "DoubleValue_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_view.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "DoubleValue_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
  }
  {
    try {
      result = (long)((Exiv2::ValueType< double > const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return resultobj;
fail:
  
  if (_global_view.obj) {
    PyBuffer_Release(&_global_view);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DoubleValue_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_count" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  result = (long)((Exiv2::ValueType< double > const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DoubleValue_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_size" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  result = (long)((Exiv2::ValueType< double > const *)arg1)->size();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  std::ostream *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "DoubleValue_write", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_write" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  {
    try {
      result = (std::ostream *) &((Exiv2::ValueType< double > const *)arg1)->write(*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_toString(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DoubleValue_toString", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_toString" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleValue_toString" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< double > const *)arg1)->toString(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DoubleValue_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_toLong" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleValue_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (long)((Exiv2::ValueType< double > const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DoubleValue_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_toFloat" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleValue_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = (float)((Exiv2::ValueType< double > const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "DoubleValue_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_toRational" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleValue_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  {
    try {
      result = ((Exiv2::ValueType< double > const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DoubleValue_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_sizeDataArea" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    try {
      result = (long)((Exiv2::ValueType< double > const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "DoubleValue_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_dataArea" "', argument " "1"" of type '" "Exiv2::ValueType< double > const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  {
    try {
      result = ((Exiv2::ValueType< double > const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_DoubleValue__SWIG_4(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double >::ValueList arg1 ;
  PyObject * obj1 = 0 ;
  Exiv2::ValueType< double > *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DoubleValue")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_DoubleValue", 1, 1, &obj1)) SWIG_fail;
  {
    std::vector< double,std::allocator< double > > *ptr = (std::vector< double,std::allocator< double > > *)0;
    int res = swig::asptr(obj1, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_DoubleValue" "', argument " "1"" of type '" "Exiv2::ValueType< double >::ValueList""'"); 
    }
    arg1 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    try {
      result = (Exiv2::ValueType< double > *)new_Exiv2_ValueType_Sl_double_Sg___SWIG_4(SWIG_STD_MOVE(arg1));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_DoubleValue(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_DoubleValue")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if ((argc >= 0) && (argc <= 1)) {
    int _v = 0;
    if (argc > 0) {
      {
        {
          _v = PyObject_IsInstance(argv[0], Py_IntEnum);
        }
      }
      if (!_v) goto check_1;
    }
    return _wrap_new_DoubleValue__SWIG_0(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ValueTypeT_double_t, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_2;
    return _wrap_new_DoubleValue__SWIG_3(self, args, NULL);
  }
check_2:
  
  if ((argc >= 1) && (argc <= 2)) {
    int _v = 0;
    {
      {
        int res = SWIG_AsVal_double(argv[0], NULL);
        _v = SWIG_CheckState(res);
      }
    }
    if (!_v) goto check_3;
    int retval = _wrap_new_DoubleValue__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
check_3:
  
  if (argc == 1) {
    int retval = _wrap_new_DoubleValue__SWIG_4(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if ((argc >= 2) && (argc <= 3)) {
    int retval = _wrap_new_DoubleValue__SWIG_1(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_DoubleValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ValueType< double >::ValueType(Exiv2::TypeId)\n"
    "    Exiv2::ValueType< double >::ValueType(Exiv2::byte const *,long,Exiv2::ByteOrder,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< double >::ValueType(double const &,Exiv2::TypeId)\n"
    "    Exiv2::ValueType< double >::ValueType(Exiv2::ValueType< double > const &)\n"
    "    Exiv2::ValueType< double >::ValueType(Exiv2::ValueType< double >::ValueList)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_DoubleValue___getitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  double result;
  
  if (!PyArg_UnpackTuple(args, "DoubleValue___getitem__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue___getitem__" "', argument " "1"" of type '" "Exiv2::ValueType< double > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleValue___getitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  result = (double)Exiv2_ValueType_Sl_double_Sg____getitem__(arg1,arg2);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue___setitem__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  long arg2 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "DoubleValue___setitem__", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue___setitem__" "', argument " "1"" of type '" "Exiv2::ValueType< double > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleValue___setitem__" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (obj2) {
    if (!(SWIG_IsOK((res3 = SWIG_ConvertPtr(obj2,SWIG_as_voidptrptr(&arg3),SWIGTYPE_p_double,0))))) {
      double val;
      int ecode = SWIG_AsVal_double(obj2, &val);
      if (!SWIG_IsOK(ecode)) {
        SWIG_exception_fail(SWIG_ArgError(ecode), "in method '" "DoubleValue___setitem__" "', argument " "3"" of type '" "double""'");
      }
      temp3 = static_cast< double >(val);
      arg3 = &temp3;
      res3 = SWIG_AddTmpMask(ecode);
    }
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  Exiv2_ValueType_Sl_double_Sg____setitem__(arg1,arg2,(double const *)arg3);
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DoubleValue_append(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ValueType< double > *arg1 = (Exiv2::ValueType< double > *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "DoubleValue_append", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ValueTypeT_double_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DoubleValue_append" "', argument " "1"" of type '" "Exiv2::ValueType< double > *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ValueType< double > * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DoubleValue_append" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  Exiv2_ValueType_Sl_double_Sg__append(arg1,arg2);
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_DoubleValue) /* defines _wrap_delete_DoubleValue_destructor_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_DoubleValue_count) /* defines _wrap_DoubleValue_count_lenfunc_closure */

SWIGPY_SSIZEARGFUNC_CLOSURE(_wrap_DoubleValue___getitem__) /* defines _wrap_DoubleValue___getitem___ssizeargfunc_closure */

SWIGPY_SSIZEOBJARGPROC_CLOSURE(_wrap_DoubleValue___setitem__) /* defines _wrap_DoubleValue___setitem___ssizeobjargproc_closure */

static PyMethodDef SwigMethods[] = {
	 { "_enum_list_CharsetId", _wrap__enum_list_CharsetId, METH_VARARGS, NULL},
	 { "_enum_list_XmpArrayType", _wrap__enum_list_XmpArrayType, METH_VARARGS, NULL},
	 { "_enum_list_XmpStruct", _wrap__enum_list_XmpStruct, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static SwigPyGetSet Value___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__Value_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &Value___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__Value_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__Value_methods[] = {
  { "read", _wrap_Value_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`\n"
		":param byteOrder: Applicable byte order (little or big endian).\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Set the value from a string buffer. The format of the string\n"
		"       corresponds to that of the write() method, i.e., a string\n"
		"       obtained through the write() method can be read by this\n"
		"       function.\n"
		"\n"
		":type buf: str\n"
		":param buf: The string to read from.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"" },
  { "setDataArea", _wrap_Value_setDataArea, METH_VARARGS, "\n"
		"Set the data area, if the value has one by copying (cloning)\n"
		"       the buffer pointed to by buf.\n"
		"\n"
		"Values may have a data area, which can contain additional\n"
		"information besides the actual value. This method is used to set such\n"
		"a data area.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the source data area\n"
		":type len: int\n"
		":param len: Size of the data area\n"
		":rtype: int\n"
		":return: Return -1 if the value has no data area, else 0.\n"
		"" },
  { "typeId", _wrap_Value_typeId, METH_VARARGS, "Return the type identifier (Exif data format type)." },
  { "clone", _wrap_Value_clone, METH_VARARGS, "\n"
		"Return an auto-pointer to a copy of itself (deep copy).\n"
		"       The caller owns this copy and the auto-pointer ensures that\n"
		"       it will be deleted.\n"
		"" },
  { "copy", _wrap_Value_copy, METH_VARARGS, "\n"
		"Write value to a data buffer.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`\n"
		":param byteOrder: Applicable byte order (little or big endian).\n"
		":rtype: int\n"
		":return: Number of bytes written.\n"
		"" },
  { "count", _wrap_Value_count, METH_VARARGS, "Return the number of components of the value" },
  { "size", _wrap_Value_size, METH_VARARGS, "Return the size of the value in bytes" },
  { "write", _wrap_Value_write, METH_VARARGS, "\n"
		"Write the value to an output stream. You do not usually have\n"
		"       to use this function; it is used for the implementation of\n"
		"       the output operator for %Value,\n"
		"       operator<<(std::ostream &os, const Value &value).\n"
		"" },
  { "toString", _wrap_Value_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The default implementation returns toString(). The behaviour\n"
		"       of this method may be undefined if there is no **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_Value_toLong, METH_VARARGS, "\n"
		"Convert the **n**-th component of the value to a long.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th component.\n"
		"\n"
		":rtype: int\n"
		":return: The converted value.\n"
		"" },
  { "toFloat", _wrap_Value_toFloat, METH_VARARGS, "\n"
		"Convert the **n**-th component of the value to a float.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th component.\n"
		"\n"
		":rtype: float\n"
		":return: The converted value.\n"
		"" },
  { "toRational", _wrap_Value_toRational, METH_VARARGS, "\n"
		"Convert the **n**-th component of the value to a Rational.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th component.\n"
		"\n"
		":rtype: (int, int) tuple\n"
		":return: The converted value.\n"
		"" },
  { "sizeDataArea", _wrap_Value_sizeDataArea, METH_VARARGS, "Return the size of the data area, 0 if there is none." },
  { "dataArea", _wrap_Value_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area if the value has one. The\n"
		"       caller owns this copy and DataBuf ensures that it will be\n"
		"       deleted.\n"
		"\n"
		"Values may have a data area, which can contain additional\n"
		"information besides the actual value. This method is used to access\n"
		"such a data area.\n"
		"\n"
		":rtype: :py:class:`DataBuf`\n"
		":return: A DataBuf containing a copy of the data area or an empty\n"
		"            DataBuf if the value does not have a data area assigned.\n"
		"" },
  { "ok", _wrap_Value_ok, METH_VARARGS, "\n"
		"Check the *ok* status indicator. After a to<Type> conversion,\n"
		"       this indicator shows whether the conversion was successful.\n"
		"" },
  { "create", (PyCFunction)(void(*)(void))_wrap_Value_create, METH_STATIC|METH_VARARGS, "\n"
		"A (simple) factory to create a Value type.\n"
		"\n"
		"The following Value subclasses are created depending on typeId:\n"
		"\n"
		"\n"
		"\n"
		"|**typeId**|**%Value subclass**|\n"
		"|``invalidTypeId``|%DataValue(invalidTypeId)|\n"
		"|``unsignedByte``|%DataValue(unsignedByte)|\n"
		"|``asciiString``|%AsciiValue|\n"
		"|``string``|%StringValue|\n"
		"|``unsignedShort``|%ValueType < uint16_t >|\n"
		"|``unsignedLong``|%ValueType < uint32_t >|\n"
		"|``unsignedRational``|%ValueType < URational >|\n"
		"|``invalid6``|%DataValue(invalid6)|\n"
		"|``undefined``|%DataValue|\n"
		"|``signedShort``|%ValueType < int16_t >|\n"
		"|``signedLong``|%ValueType < int32_t >|\n"
		"|``signedRational``|%ValueType < Rational >|\n"
		"|``tiffFloat``|%ValueType < float >|\n"
		"|``tiffDouble``|%ValueType < double >|\n"
		"|``tiffIfd``|%ValueType < uint32_t >|\n"
		"|``date``|%DateValue|\n"
		"|``time``|%TimeValue|\n"
		"|``comment``|%CommentValue|\n"
		"|``xmpText``|%XmpTextValue|\n"
		"|``xmpBag``|%XmpArrayValue|\n"
		"|``xmpSeq``|%XmpArrayValue|\n"
		"|``xmpAlt``|%XmpArrayValue|\n"
		"|``langAlt``|%LangAltValue|\n"
		"|**default**|%DataValue(typeId)|\n"
		"\n"
		"\n"
		":type typeId: :py:class:`TypeId`\n"
		":param typeId: Type of the value.\n"
		":rtype: :py:class:`Value`\n"
		":return: Auto-pointer to the newly created Value. The caller owns this\n"
		"            copy and the auto-pointer ensures that it will be deleted.\n"
		"" },
  { "__str__", _wrap_Value___str__, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__Value_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.Value",                    /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    SwigPyBuiltin_BadDealloc,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__Value_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__Value_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__Value_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    _wrap_Value___str___reprfunc_closure,   /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__Value_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Common interface for all types of values used with metadata.\n"
		"\n"
		"The interface provides a uniform way to access values independent of\n"
		"their actual C++ type for simple tasks like reading the values from a\n"
		"string or data buffer.  For other tasks, like modifying values you may\n"
		"need to downcast it to a specific subclass to access its interface.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__Value_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__Value_methods,    /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__Value_getset,     /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_Value_count_lenfunc_closure,      /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__Value_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__Value_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Value'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__Value_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)SwigPyBuiltin_BadInit },
    { Py_tp_dealloc,                    (void *)SwigPyBuiltin_BadDealloc },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Common interface for all types of values used with metadata.\n"
		"\n"
		"The interface provides a uniform way to access values independent of\n"
		"their actual C++ type for simple tasks like reading the values from a\n"
		"string or data buffer.  For other tasks, like modifying values you may\n"
		"need to downcast it to a specific subclass to access its interface.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)_wrap_Value___str___reprfunc_closure },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__Value_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__Value_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__Value_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_Value_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.Value",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__Value_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet DataValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__DataValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &DataValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__DataValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__DataValue_methods[] = {
  { "read", _wrap_DataValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"         Read the value from a character buffer.\n"
		"\n"
		"         Notes: The byte order is required by the interface but not\n"
		"               used by this method, so just use the default.\n"
		"\n"
		"         :type buf: :py:term:`bytes-like object`\n"
		"         :param buf: Pointer to the data buffer to read from\n"
		"         :type len: int\n"
		"         :param len: Number of bytes in the data buffer\n"
		"         :type byteOrder: :py:class:`ByteOrder`, optional\n"
		"         :param byteOrder: Byte order. Not needed.\n"
		"\n"
		"         :rtype: int\n"
		"         :return: 0 if successful.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Set the data from a string of integer values (e.g., \"0 1 2 3\")\n"
		"" },
  { "clone", _wrap_DataValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_DataValue_copy, METH_VARARGS, "\n"
		"Write value to a character data buffer.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		":rtype: int\n"
		":return: Number of characters written.\n"
		"" },
  { "count", _wrap_DataValue_count, METH_VARARGS, "" },
  { "size", _wrap_DataValue_size, METH_VARARGS, "" },
  { "write", _wrap_DataValue_write, METH_VARARGS, "" },
  { "toString", _wrap_DataValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th component.\n"
		"" },
  { "toLong", _wrap_DataValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_DataValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_DataValue_toRational, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__DataValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.DataValue",                /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_DataValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__DataValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__DataValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__DataValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__DataValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "%Value for an undefined data type.",   /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__DataValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__DataValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__DataValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_DataValue,                    /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_DataValue_count_lenfunc_closure,  /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__DataValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__DataValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DataValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__DataValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_DataValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_DataValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"%Value for an undefined data type." },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__DataValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__DataValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__DataValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_DataValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.DataValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__DataValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet StringValueBase___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__StringValueBase_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Read the value from buf. This default implementation uses buf as it is.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"         Read the value from a character buffer.\n"
		"\n"
		"         Notes: The byte order is required by the interface but not used by this\n"
		"               method, so just use the default.\n"
		"\n"
		"         :type buf: :py:term:`bytes-like object`\n"
		"         :param buf: Pointer to the data buffer to read from\n"
		"         :type len: int\n"
		"         :param len: Number of bytes in the data buffer\n"
		"         :type byteOrder: :py:class:`ByteOrder`, optional\n"
		"         :param byteOrder: Byte order. Not needed.\n"
		"\n"
		"         :rtype: int\n"
		"         :return: 0 if successful.\n"
		"", &StringValueBase___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__StringValueBase_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__StringValueBase_methods[] = {
  { "read", _wrap_StringValueBase_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"Read the value from buf. This default implementation uses buf as it is.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"         Read the value from a character buffer.\n"
		"\n"
		"         Notes: The byte order is required by the interface but not used by this\n"
		"               method, so just use the default.\n"
		"\n"
		"         :type buf: :py:term:`bytes-like object`\n"
		"         :param buf: Pointer to the data buffer to read from\n"
		"         :type len: int\n"
		"         :param len: Number of bytes in the data buffer\n"
		"         :type byteOrder: :py:class:`ByteOrder`, optional\n"
		"         :param byteOrder: Byte order. Not needed.\n"
		"\n"
		"         :rtype: int\n"
		"         :return: 0 if successful.\n"
		"" },
  { "clone", _wrap_StringValueBase_clone, METH_VARARGS, "" },
  { "copy", _wrap_StringValueBase_copy, METH_VARARGS, "\n"
		"Write value to a character data buffer.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not used.\n"
		":rtype: int\n"
		":return: Number of characters written.\n"
		"" },
  { "count", _wrap_StringValueBase_count, METH_VARARGS, "" },
  { "size", _wrap_StringValueBase_size, METH_VARARGS, "" },
  { "toLong", _wrap_StringValueBase_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_StringValueBase_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_StringValueBase_toRational, METH_VARARGS, "" },
  { "write", _wrap_StringValueBase_write, METH_VARARGS, "" },
  { "data", _wrap_StringValueBase_data, METH_VARARGS, "\n"
		"Returns a temporary Python memoryview of the object's data.\n"
		"\n"
		":rtype: memoryview\n"
		"" },
  { "_view_deleted_cb", _wrap_StringValueBase__view_deleted_cb, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__StringValueBase_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.StringValueBase",          /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    SwigPyBuiltin_BadDealloc,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__StringValueBase_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__StringValueBase_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__StringValueBase_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__StringValueBase_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Abstract base class for a string based %Value type.\n"
		"\n"
		"Uses a std::string to store the value and implements defaults for\n"
		"most operations.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__StringValueBase_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__StringValueBase_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__StringValueBase_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_StringValueBase_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__StringValueBase_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__StringValueBase_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'StringValueBase'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__StringValueBase_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)SwigPyBuiltin_BadInit },
    { Py_tp_dealloc,                    (void *)SwigPyBuiltin_BadDealloc },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Abstract base class for a string based %Value type.\n"
		"\n"
		"Uses a std::string to store the value and implements defaults for\n"
		"most operations.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__StringValueBase_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__StringValueBase_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__StringValueBase_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_StringValueBase_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.StringValueBase",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__StringValueBase_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet StringValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__StringValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Default constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor\n"
		"", &StringValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__StringValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__StringValue_methods[] = {
  { "clone", _wrap_StringValue_clone, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__StringValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.StringValue",              /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_StringValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__StringValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__StringValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__StringValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__StringValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value for string type.\n"
		"\n"
		"This can be a plain Ascii string or a multipe byte encoded string. It is\n"
		"left to caller to decode and encode the string to and from readable\n"
		"text if that is required.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__StringValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__StringValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__StringValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_StringValue,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__StringValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__StringValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'StringValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__StringValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_StringValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_StringValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value for string type.\n"
		"\n"
		"This can be a plain Ascii string or a multipe byte encoded string. It is\n"
		"left to caller to decode and encode the string to and from readable\n"
		"text if that is required.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__StringValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__StringValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__StringValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.StringValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__StringValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet AsciiValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__AsciiValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"Default constructor.", &AsciiValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__AsciiValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__AsciiValue_methods[] = {
  { "read", _wrap_AsciiValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Set the value to that of the string buf. Overrides base class\n"
		"       to append a terminating '\\0' character if buf doesn't end\n"
		"       with '\\0'.\n"
		"" },
  { "clone", _wrap_AsciiValue_clone, METH_VARARGS, "" },
  { "write", _wrap_AsciiValue_write, METH_VARARGS, "\n"
		"Write the ASCII value up to the the first '\\0' character to an\n"
		"       output stream.  Any further characters are ignored and not\n"
		"       written to the output stream.\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__AsciiValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.AsciiValue",               /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_AsciiValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__AsciiValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__AsciiValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__AsciiValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__AsciiValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value for an Ascii string type.\n"
		"\n"
		"This class is for null terminated single byte Ascii strings.\n"
		"This class also ensures that the string is null terminated.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__AsciiValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__AsciiValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__AsciiValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_AsciiValue,                   /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__AsciiValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__AsciiValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'AsciiValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__AsciiValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_AsciiValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_AsciiValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value for an Ascii string type.\n"
		"\n"
		"This class is for null terminated single byte Ascii strings.\n"
		"This class also ensures that the string is null terminated.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__AsciiValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__AsciiValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__AsciiValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.AsciiValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__AsciiValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet CommentValue___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet CommentValue_byteOrder__getset = { _wrap_CommentValue_byteOrder__get, _wrap_CommentValue_byteOrder__set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__CommentValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Default constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor, uses read(const std::string& comment)\n"
		"", &CommentValue___dict___getset },
    { (char *)"byteOrder_", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Byte order of the comment string that was read", &CommentValue_byteOrder__getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__CommentValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__CommentValue_methods[] = {
  { "read", _wrap_CommentValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a comment\n"
		"\n"
		"The format of *comment* is:\n"
		"\n"
		"\n"
		"``[charset=[\"]Ascii|Jis|Unicode|Undefined[\"] ]comment``\n"
		"\n"
		"\n"
		"The default charset is Undefined.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful\n"
		"\n"
		"            1 if an invalid character set is encountered\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Read the comment from a byte buffer.\n"
		"" },
  { "clone", _wrap_CommentValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_CommentValue_copy, METH_VARARGS, "" },
  { "write", _wrap_CommentValue_write, METH_VARARGS, "\n"
		"Write the comment in a format which can be read by\n"
		"read(const std::string& comment).\n"
		"" },
  { "comment", _wrap_CommentValue_comment, METH_VARARGS, "\n"
		"Return the comment (without a charset=\"...\" prefix)\n"
		"\n"
		"The comment is decoded to UTF-8. For Exif UNICODE comments, the\n"
		"function makes an attempt to correctly determine the character\n"
		"encoding of the value. Alternatively, the optional *encoding*\n"
		"parameter can be used to specify it.\n"
		"\n"
		":type encoding: string, optional\n"
		":param encoding: Optional argument to specify the character encoding\n"
		"        that the comment is encoded in, as an iconv(3) name. Only used\n"
		"        for Exif UNICODE comments.\n"
		"\n"
		":rtype: str\n"
		":return: A string containing the comment converted to UTF-8.\n"
		"" },
  { "detectCharset", _wrap_CommentValue_detectCharset, METH_VARARGS, "\n"
		"Determine the character encoding that was used to encode the\n"
		"    UNICODE comment value as an iconv(3) name.\n"
		"\n"
		"If the comment *c* starts with a BOM, the BOM is interpreted and\n"
		"removed from the string.\n"
		"\n"
		"Todo: Implement rules to guess if the comment is UTF-8 encoded.\n"
		"" },
  { "charsetId", _wrap_CommentValue_charsetId, METH_VARARGS, "Return the Exif charset id of the comment" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__CommentValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.CommentValue",             /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_CommentValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__CommentValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__CommentValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__CommentValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__CommentValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value for an Exif comment.\n"
		"\n"
		"This can be a plain Ascii string or a multipe byte encoded string. The\n"
		"comment is expected to be encoded in the character set indicated (default\n"
		"undefined), but this is not checked. It is left to caller to decode and\n"
		"encode the string to and from readable text if that is required.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__CommentValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__CommentValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__CommentValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_CommentValue,                 /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__CommentValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__CommentValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CommentValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__CommentValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_CommentValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_CommentValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value for an Exif comment.\n"
		"\n"
		"This can be a plain Ascii string or a multipe byte encoded string. The\n"
		"comment is expected to be encoded in the character set indicated (default\n"
		"undefined), but this is not checked. It is left to caller to decode and\n"
		"encode the string to and from readable text if that is required.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__CommentValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__CommentValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__CommentValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.CommentValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__CommentValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet XmpValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__XmpValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"Return XMP array type, indicates if an XMP value is an array.", &XmpValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__XmpValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__XmpValue_methods[] = {
  { "xmpArrayType", _wrap_XmpValue_xmpArrayType, METH_VARARGS, "Return XMP array type, indicates if an XMP value is an array." },
  { "xmpStruct", _wrap_XmpValue_xmpStruct, METH_VARARGS, "Return XMP struct, indicates if an XMP value is a structure." },
  { "size", _wrap_XmpValue_size, METH_VARARGS, "" },
  { "copy", _wrap_XmpValue_copy, METH_VARARGS, "\n"
		"Write value to a character data buffer.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not used.\n"
		":rtype: int\n"
		":return: Number of characters written.\n"
		"" },
  { "setXmpArrayType", _wrap_XmpValue_setXmpArrayType, METH_VARARGS, "Set the XMP array type to indicate that an XMP value is an array." },
  { "setXmpStruct", _wrap_XmpValue_setXmpStruct, METH_VARARGS, "Set the XMP struct type to indicate that an XMP value is a structure." },
  { "read", _wrap_XmpValue_read, METH_VARARGS, "\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Uses read(const std::string& buf)\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__XmpValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.XmpValue",                 /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    SwigPyBuiltin_BadDealloc,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__XmpValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__XmpValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__XmpValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__XmpValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "Base class for all Exiv2 values used to store XMP property values.", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__XmpValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__XmpValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__XmpValue_getset,  /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__XmpValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__XmpValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'XmpValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__XmpValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)SwigPyBuiltin_BadInit },
    { Py_tp_dealloc,                    (void *)SwigPyBuiltin_BadDealloc },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"Base class for all Exiv2 values used to store XMP property values." },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__XmpValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__XmpValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__XmpValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.XmpValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__XmpValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet XmpTextValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__XmpTextValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor, reads the value from a string.\n"
		"", &XmpTextValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__XmpTextValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__XmpTextValue_methods[] = {
  { "read", _wrap_XmpTextValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Uses read(const std::string& buf)\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Read a simple property value from *buf* to set the value.\n"
		"\n"
		"Sets the value to the contents of *buf*. A optional keyword,\n"
		"*type* is supported to set the XMP value type. This is useful for\n"
		"complex value types for which Exiv2 does not have direct support.\n"
		"\n"
		"The format of *buf* is:\n"
		"\n"
		"\n"
		"``[type=[\"]Alt|Bag|Seq|Struct[\"] ]text``\n"
		"\n"
		"\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"" },
  { "clone", _wrap_XmpTextValue_clone, METH_VARARGS, "" },
  { "size", _wrap_XmpTextValue_size, METH_VARARGS, "" },
  { "count", _wrap_XmpTextValue_count, METH_VARARGS, "" },
  { "toLong", _wrap_XmpTextValue_toLong, METH_VARARGS, "\n"
		"Convert the value to a long.\n"
		"       The optional parameter *n* is not used and is ignored.\n"
		"\n"
		":rtype: int\n"
		":return: The converted value.\n"
		"" },
  { "toFloat", _wrap_XmpTextValue_toFloat, METH_VARARGS, "\n"
		"Convert the value to a float.\n"
		"       The optional parameter *n* is not used and is ignored.\n"
		"\n"
		":rtype: float\n"
		":return: The converted value.\n"
		"" },
  { "toRational", _wrap_XmpTextValue_toRational, METH_VARARGS, "\n"
		"Convert the value to a Rational.\n"
		"       The optional parameter *n* is not used and is ignored.\n"
		"\n"
		":rtype: (int, int) tuple\n"
		":return: The converted value.\n"
		"" },
  { "write", _wrap_XmpTextValue_write, METH_VARARGS, "" },
  { "data", _wrap_XmpTextValue_data, METH_VARARGS, "\n"
		"Returns a temporary Python memoryview of the object's data.\n"
		"\n"
		":rtype: memoryview\n"
		"" },
  { "_view_deleted_cb", _wrap_XmpTextValue__view_deleted_cb, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__XmpTextValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.XmpTextValue",             /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_XmpTextValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__XmpTextValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__XmpTextValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__XmpTextValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__XmpTextValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value type suitable for simple XMP properties and\n"
		"       XMP nodes of complex types which are not parsed into\n"
		"       specific values.\n"
		"\n"
		"Uses a std::string to store the value.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__XmpTextValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__XmpTextValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__XmpTextValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_XmpTextValue,                 /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_XmpTextValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__XmpTextValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__XmpTextValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'XmpTextValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__XmpTextValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_XmpTextValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_XmpTextValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value type suitable for simple XMP properties and\n"
		"       XMP nodes of complex types which are not parsed into\n"
		"       specific values.\n"
		"\n"
		"Uses a std::string to store the value.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__XmpTextValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__XmpTextValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__XmpTextValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_XmpTextValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.XmpTextValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__XmpTextValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet XmpArrayValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__XmpArrayValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Uses read(const std::string& buf)\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Read a simple property value from *buf* and append it\n"
		"       to the value.\n"
		"\n"
		"Appends *buf* to the value after the last existing array element.\n"
		"Subsequent calls will therefore populate multiple array elements in\n"
		"the order they are read.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"", &XmpArrayValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__XmpArrayValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__XmpArrayValue_methods[] = {
  { "read", _wrap_XmpArrayValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Uses read(const std::string& buf)\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Read a simple property value from *buf* and append it\n"
		"       to the value.\n"
		"\n"
		"Appends *buf* to the value after the last existing array element.\n"
		"Subsequent calls will therefore populate multiple array elements in\n"
		"the order they are read.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"" },
  { "clone", _wrap_XmpArrayValue_clone, METH_VARARGS, "" },
  { "count", _wrap_XmpArrayValue_count, METH_VARARGS, "" },
  { "toString", _wrap_XmpArrayValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th component.\n"
		"" },
  { "toLong", _wrap_XmpArrayValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_XmpArrayValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_XmpArrayValue_toRational, METH_VARARGS, "" },
  { "write", _wrap_XmpArrayValue_write, METH_VARARGS, "\n"
		"Write all elements of the value to *os*, separated by commas.\n"
		"\n"
		"Notes: The output of this method cannot directly be used as the parameter\n"
		"      for read().\n"
		"" },
  { "append", _wrap_XmpArrayValue_append, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__XmpArrayValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.XmpArrayValue",            /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_XmpArrayValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__XmpArrayValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__XmpArrayValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__XmpArrayValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__XmpArrayValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value type for simple arrays. Each item in the array is a simple\n"
		"       value, without qualifiers. The array may be an ordered (*seq)*,\n"
		"       unordered (*bag)* or alternative array (*alt)*. The array\n"
		"       items must not contain qualifiers. For language alternatives use\n"
		"       LangAltValue.\n"
		"\n"
		"Uses a vector of std::string to store the value(s).\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__XmpArrayValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__XmpArrayValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__XmpArrayValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_XmpArrayValue,                /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_XmpArrayValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_XmpArrayValue_toString_ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__XmpArrayValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__XmpArrayValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'XmpArrayValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__XmpArrayValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_XmpArrayValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_XmpArrayValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value type for simple arrays. Each item in the array is a simple\n"
		"       value, without qualifiers. The array may be an ordered (*seq)*,\n"
		"       unordered (*bag)* or alternative array (*alt)*. The array\n"
		"       items must not contain qualifiers. For language alternatives use\n"
		"       LangAltValue.\n"
		"\n"
		"Uses a vector of std::string to store the value(s).\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__XmpArrayValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__XmpArrayValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__XmpArrayValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_XmpArrayValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_XmpArrayValue_toString_ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.XmpArrayValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__XmpArrayValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet LangAltValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__LangAltValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor, reads the value from a string.\n"
		"", &LangAltValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__LangAltValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__LangAltValue_methods[] = {
  { "read", _wrap_LangAltValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Uses read(const std::string& buf)\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Read a simple property value from *buf* and append it\n"
		"       to the value.\n"
		"\n"
		"Appends *buf* to the value after the last existing array element.\n"
		"Subsequent calls will therefore populate multiple array elements in\n"
		"the order they are read.\n"
		"\n"
		"The format of *buf* is:\n"
		"\n"
		"\n"
		"``[lang=[\"]language code[\"] ]text``\n"
		"\n"
		"\n"
		"The XMP default language code ``x-default`` is used if\n"
		"*buf* doesn't start with the keyword ``lang``.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful.\n"
		"" },
  { "clone", _wrap_LangAltValue_clone, METH_VARARGS, "" },
  { "count", _wrap_LangAltValue_count, METH_VARARGS, "" },
  { "toString", _wrap_LangAltValue_toString, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Return the text value associated with the default language\n"
		"       qualifier ``x-default``. The parameter *n* is not used, but\n"
		"       it is suggested that only 0 is passed in. Returns an empty\n"
		"       string and sets the ok-flag to ``false`` if there is no\n"
		"       default value.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Return the text value associated with the language qualifier\n"
		"       *qualifier*. Returns an empty string and sets the ok-flag\n"
		"       to ``false`` if there is no entry for the language qualifier.\n"
		"" },
  { "toLong", _wrap_LangAltValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_LangAltValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_LangAltValue_toRational, METH_VARARGS, "" },
  { "write", _wrap_LangAltValue_write, METH_VARARGS, "\n"
		"Write all elements of the value to *os*, separated by commas.\n"
		"\n"
		"Notes: The output of this method cannot directly be used as the parameter\n"
		"      for read().\n"
		"" },
  { "keys", _wrap_LangAltValue_keys, METH_VARARGS, "Get keys (i.e. languages) of the LangAltValue components." },
  { "values", _wrap_LangAltValue_values, METH_VARARGS, "Get values (i.e. text strings) of the LangAltValue components." },
  { "items", _wrap_LangAltValue_items, METH_VARARGS, "\n"
		"Get key, value pairs (i.e. language, text) of the LangAltValue\n"
		"components.\n"
		"" },
  { "__iter__", _wrap_LangAltValue___iter__, METH_VARARGS, "" },
  { "__getitem__", _wrap_LangAltValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_LangAltValue___setitem__, METH_VARARGS, "" },
  { "__contains__", _wrap_LangAltValue___contains__, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__LangAltValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.LangAltValue",             /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_LangAltValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__LangAltValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__LangAltValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__LangAltValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__LangAltValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value type for XMP language alternative properties.\n"
		"\n"
		"A language alternative is an array consisting of simple text values,\n"
		"each of which has a language qualifier.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__LangAltValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    _wrap_LangAltValue___iter___getiterfunc_closure, /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__LangAltValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__LangAltValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_LangAltValue,                 /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    _wrap_LangAltValue___getitem___binaryfunc_closure, /* mp_subscript */
    _wrap_LangAltValue___setitem___objobjargproc_closure, /* mp_ass_subscript */
  },
  {
    _wrap_LangAltValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    _wrap_LangAltValue___contains___objobjproc_closure, /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__LangAltValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__LangAltValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'LangAltValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__LangAltValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_LangAltValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_LangAltValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value type for XMP language alternative properties.\n"
		"\n"
		"A language alternative is an array consisting of simple text values,\n"
		"each of which has a language qualifier.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__LangAltValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__LangAltValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__LangAltValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)_wrap_LangAltValue___getitem___binaryfunc_closure },
    { Py_mp_ass_subscript,              (void *)_wrap_LangAltValue___setitem___objobjargproc_closure },
    { Py_tp_iter,                       (void *)_wrap_LangAltValue___iter___getiterfunc_closure },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_LangAltValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)_wrap_LangAltValue___contains___objobjproc_closure },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.LangAltValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__LangAltValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet DateValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__DateValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Default constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor\n"
		"", &DateValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__DateValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__DateValue_methods[] = {
  { "read", _wrap_DateValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful\n"
		"\n"
		"            1 in case of an unsupported date format\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Set the value to that of the string buf.\n"
		"\n"
		":type buf: str\n"
		":param buf: String containing the date\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful\n"
		"\n"
		"            1 in case of an unsupported date format\n"
		"" },
  { "setDate", _wrap_DateValue_setDate, METH_VARARGS, "Set the date" },
  { "clone", _wrap_DateValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_DateValue_copy, METH_VARARGS, "\n"
		"Write value to a character data buffer.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not used.\n"
		":rtype: int\n"
		":return: Number of characters written.\n"
		"" },
  { "getDate", _wrap_DateValue_getDate, METH_VARARGS, "Return date struct containing date information" },
  { "count", _wrap_DateValue_count, METH_VARARGS, "" },
  { "size", _wrap_DateValue_size, METH_VARARGS, "" },
  { "write", _wrap_DateValue_write, METH_VARARGS, "" },
  { "toLong", _wrap_DateValue_toLong, METH_VARARGS, "Return the value as a UNIX calender time converted to long." },
  { "toFloat", _wrap_DateValue_toFloat, METH_VARARGS, "Return the value as a UNIX calender time converted to float." },
  { "toRational", _wrap_DateValue_toRational, METH_VARARGS, "Return the value as a UNIX calender time  converted to Rational." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__DateValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.DateValue",                /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_DateValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__DateValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__DateValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__DateValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__DateValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value for simple ISO 8601 dates\n"
		"\n"
		"This class is limited to parsing simple date strings in the ISO 8601\n"
		"format CCYYMMDD (century, year, month, day).\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__DateValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__DateValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__DateValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_DateValue,                    /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_DateValue_count_lenfunc_closure,  /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__DateValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__DateValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DateValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__DateValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_DateValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_DateValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value for simple ISO 8601 dates\n"
		"\n"
		"This class is limited to parsing simple date strings in the ISO 8601\n"
		"format CCYYMMDD (century, year, month, day).\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__DateValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__DateValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__DateValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_DateValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.DateValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__DateValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet Date_year_getset = { _wrap_Date_year_get, _wrap_Date_year_set };
static SwigPyGetSet Date___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet Date_day_getset = { _wrap_Date_day_get, _wrap_Date_day_set };
static SwigPyGetSet Date_month_getset = { _wrap_Date_month_get, _wrap_Date_month_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__DateValue__Date_getset[] = {
    { (char *)"year", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Year", &Date_year_getset },
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &Date___dict___getset },
    { (char *)"day", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Day", &Date_day_getset },
    { (char *)"month", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Month", &Date_month_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__DateValue__Date_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__DateValue__Date_methods[] = {
  { "items", _wrap_Date_items, METH_VARARGS, "\n"
		"Get structure members.\n"
		":rtype: list of (str, value) tuple\n"
		":return: structure member (name, value) pairs (with any trailing\n"
		"    underscores removed from names).\n"
		"" },
  { "keys", _wrap_Date_keys, METH_VARARGS, "\n"
		"Get structure member names.\n"
		":rtype: list of str\n"
		":return: structure member names (with any trailing underscores\n"
		"    removed).\n"
		"" },
  { "values", _wrap_Date_values, METH_VARARGS, "\n"
		"Get structure member values.\n"
		":rtype: list of value\n"
		":return: structure member values.\n"
		"" },
  { "__iter__", _wrap_Date___iter__, METH_VARARGS, "" },
  { "__getitem__", _wrap_Date___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_Date___setitem__, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__DateValue__Date_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.Date",                     /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_Date_destructor_closure,   /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__DateValue__Date_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__DateValue__Date_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__DateValue__Date_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    set_attr_nostrip,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__DateValue__Date_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "Simple Date helper structure",         /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__DateValue__Date_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    _wrap_Date___iter___getiterfunc_closure, /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__DateValue__Date_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__DateValue__Date_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_Date,                         /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    _wrap_Date___getitem___binaryfunc_closure, /* mp_subscript */
    _wrap_Date___setitem___objobjargproc_closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__DateValue__Date_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__DateValue__Date_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Date'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__DateValue__Date_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_Date },
    { Py_tp_dealloc,                    (void *)_wrap_delete_Date_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"Simple Date helper structure" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__DateValue__Date_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__DateValue__Date_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__DateValue__Date_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)set_attr_nostrip },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)_wrap_Date___getitem___binaryfunc_closure },
    { Py_mp_ass_subscript,              (void *)_wrap_Date___setitem___objobjargproc_closure },
    { Py_tp_iter,                       (void *)_wrap_Date___iter___getiterfunc_closure },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.Date",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__DateValue__Date_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet TimeValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__TimeValue_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Default constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor\n"
		"", &TimeValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__TimeValue_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__TimeValue_methods[] = {
  { "read", _wrap_TimeValue_read, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Read the value from a character buffer.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the data buffer to read from\n"
		":type len: int\n"
		":param len: Number of bytes in the data buffer\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not needed.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful\n"
		"\n"
		"            1 in case of an unsupported time format\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Set the value to that of the string buf.\n"
		"\n"
		":type buf: str\n"
		":param buf: String containing the time.\n"
		"\n"
		":rtype: int\n"
		":return: 0 if successful\n"
		"\n"
		"            1 in case of an unsupported time format\n"
		"" },
  { "setTime", _wrap_TimeValue_setTime, METH_VARARGS, "Set the time" },
  { "clone", _wrap_TimeValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_TimeValue_copy, METH_VARARGS, "\n"
		"Write value to a character data buffer.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		"Notes: The byte order is required by the interface but not used by this\n"
		"      method, so just use the default.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`, optional\n"
		":param byteOrder: Byte order. Not used.\n"
		":rtype: int\n"
		":return: Number of characters written.\n"
		"" },
  { "getTime", _wrap_TimeValue_getTime, METH_VARARGS, "Return time struct containing time information" },
  { "count", _wrap_TimeValue_count, METH_VARARGS, "" },
  { "size", _wrap_TimeValue_size, METH_VARARGS, "" },
  { "write", _wrap_TimeValue_write, METH_VARARGS, "" },
  { "toLong", _wrap_TimeValue_toLong, METH_VARARGS, "Returns number of seconds in the day in UTC." },
  { "toFloat", _wrap_TimeValue_toFloat, METH_VARARGS, "Returns number of seconds in the day in UTC converted to float." },
  { "toRational", _wrap_TimeValue_toRational, METH_VARARGS, "Returns number of seconds in the day in UTC converted to Rational." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__TimeValue_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.TimeValue",                /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_TimeValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__TimeValue_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__TimeValue_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__TimeValue_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__TimeValue_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"%Value for simple ISO 8601 times.\n"
		"\n"
		"This class is limited to handling simple time strings in the ISO 8601\n"
		"format HHMMSS±HHMM where HHMMSS refers to local hour, minute and\n"
		"seconds and ±HHMM refers to hours and minutes ahead or behind\n"
		"Universal Coordinated Time.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__TimeValue_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__TimeValue_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__TimeValue_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_TimeValue,                    /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_TimeValue_count_lenfunc_closure,  /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__TimeValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__TimeValue_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'TimeValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__TimeValue_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_TimeValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_TimeValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"%Value for simple ISO 8601 times.\n"
		"\n"
		"This class is limited to handling simple time strings in the ISO 8601\n"
		"format HHMMSS±HHMM where HHMMSS refers to local hour, minute and\n"
		"seconds and ±HHMM refers to hours and minutes ahead or behind\n"
		"Universal Coordinated Time.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__TimeValue_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__TimeValue_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__TimeValue_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_TimeValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.TimeValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__TimeValue_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet Time_tzHour_getset = { _wrap_Time_tzHour_get, _wrap_Time_tzHour_set };
static SwigPyGetSet Time___dict___getset = { SwigPyObject_get___dict__, 0 };
static SwigPyGetSet Time_hour_getset = { _wrap_Time_hour_get, _wrap_Time_hour_set };
static SwigPyGetSet Time_minute_getset = { _wrap_Time_minute_get, _wrap_Time_minute_set };
static SwigPyGetSet Time_second_getset = { _wrap_Time_second_get, _wrap_Time_second_set };
static SwigPyGetSet Time_tzMinute_getset = { _wrap_Time_tzMinute_get, _wrap_Time_tzMinute_set };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__TimeValue__Time_getset[] = {
    { (char *)"tzHour", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Hours ahead or behind UTC", &Time_tzHour_getset },
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &Time___dict___getset },
    { (char *)"hour", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Hour", &Time_hour_getset },
    { (char *)"minute", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Minute", &Time_minute_getset },
    { (char *)"second", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Second", &Time_second_getset },
    { (char *)"tzMinute", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, (char *)"Minutes ahead or behind UTC", &Time_tzMinute_getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__TimeValue__Time_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__TimeValue__Time_methods[] = {
  { "items", _wrap_Time_items, METH_VARARGS, "\n"
		"Get structure members.\n"
		":rtype: list of (str, value) tuple\n"
		":return: structure member (name, value) pairs (with any trailing\n"
		"    underscores removed from names).\n"
		"" },
  { "keys", _wrap_Time_keys, METH_VARARGS, "\n"
		"Get structure member names.\n"
		":rtype: list of str\n"
		":return: structure member names (with any trailing underscores\n"
		"    removed).\n"
		"" },
  { "values", _wrap_Time_values, METH_VARARGS, "\n"
		"Get structure member values.\n"
		":rtype: list of value\n"
		":return: structure member values.\n"
		"" },
  { "__iter__", _wrap_Time___iter__, METH_VARARGS, "" },
  { "__getitem__", _wrap_Time___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_Time___setitem__, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__TimeValue__Time_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.Time",                     /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_Time_destructor_closure,   /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__TimeValue__Time_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__TimeValue__Time_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__TimeValue__Time_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    set_attr_nostrip,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__TimeValue__Time_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "Simple Time helper structure",         /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__TimeValue__Time_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    _wrap_Time___iter___getiterfunc_closure, /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__TimeValue__Time_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__TimeValue__Time_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_Time,                         /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    _wrap_Time___getitem___binaryfunc_closure, /* mp_subscript */
    _wrap_Time___setitem___objobjargproc_closure, /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__TimeValue__Time_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__TimeValue__Time_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Time'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__TimeValue__Time_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_Time },
    { Py_tp_dealloc,                    (void *)_wrap_delete_Time_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"Simple Time helper structure" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__TimeValue__Time_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__TimeValue__Time_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__TimeValue__Time_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)set_attr_nostrip },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)_wrap_Time___getitem___binaryfunc_closure },
    { Py_mp_ass_subscript,              (void *)_wrap_Time___setitem___objobjargproc_closure },
    { Py_tp_iter,                       (void *)_wrap_Time___iter___getiterfunc_closure },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.Time",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__TimeValue__Time_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet UShortValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &UShortValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_methods[] = {
  { "read", _wrap_UShortValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_UShortValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_UShortValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_UShortValue_copy, METH_VARARGS, "" },
  { "count", _wrap_UShortValue_count, METH_VARARGS, "" },
  { "size", _wrap_UShortValue_size, METH_VARARGS, "" },
  { "write", _wrap_UShortValue_write, METH_VARARGS, "" },
  { "toString", _wrap_UShortValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_UShortValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_UShortValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_UShortValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_UShortValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_UShortValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_UShortValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_UShortValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_UShortValue_append, METH_VARARGS, "Append a uint16_t component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.UShortValue",              /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_UShortValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of uint16_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_UShortValue,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_UShortValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_UShortValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_UShortValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'UShortValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_UShortValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_UShortValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of uint16_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_UShortValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_UShortValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_UShortValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.UShortValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet ULongValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &ULongValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_methods[] = {
  { "read", _wrap_ULongValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_ULongValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_ULongValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_ULongValue_copy, METH_VARARGS, "" },
  { "count", _wrap_ULongValue_count, METH_VARARGS, "" },
  { "size", _wrap_ULongValue_size, METH_VARARGS, "" },
  { "write", _wrap_ULongValue_write, METH_VARARGS, "" },
  { "toString", _wrap_ULongValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_ULongValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_ULongValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_ULongValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_ULongValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_ULongValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_ULongValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_ULongValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_ULongValue_append, METH_VARARGS, "Append a uint32_t component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.ULongValue",               /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_ULongValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of uint32_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_ULongValue,                   /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_ULongValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_ULongValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_ULongValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ULongValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_ULongValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_ULongValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of uint32_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_ULongValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_ULongValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_ULongValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.ULongValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet URationalValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &URationalValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_methods[] = {
  { "read", _wrap_URationalValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_URationalValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_URationalValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_URationalValue_copy, METH_VARARGS, "" },
  { "count", _wrap_URationalValue_count, METH_VARARGS, "" },
  { "size", _wrap_URationalValue_size, METH_VARARGS, "" },
  { "write", _wrap_URationalValue_write, METH_VARARGS, "" },
  { "toString", _wrap_URationalValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_URationalValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_URationalValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_URationalValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_URationalValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_URationalValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_URationalValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_URationalValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_URationalValue_append, METH_VARARGS, "Append a Exiv2::URational component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.URationalValue",           /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_URationalValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of Exiv2::URational values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_URationalValue,               /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_URationalValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_URationalValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_URationalValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'URationalValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_URationalValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_URationalValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of Exiv2::URational values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_URationalValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_URationalValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_URationalValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.URationalValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet ShortValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &ShortValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_methods[] = {
  { "read", _wrap_ShortValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_ShortValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_ShortValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_ShortValue_copy, METH_VARARGS, "" },
  { "count", _wrap_ShortValue_count, METH_VARARGS, "" },
  { "size", _wrap_ShortValue_size, METH_VARARGS, "" },
  { "write", _wrap_ShortValue_write, METH_VARARGS, "" },
  { "toString", _wrap_ShortValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_ShortValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_ShortValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_ShortValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_ShortValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_ShortValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_ShortValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_ShortValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_ShortValue_append, METH_VARARGS, "Append a int16_t component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.ShortValue",               /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_ShortValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of int16_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_ShortValue,                   /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_ShortValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_ShortValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_ShortValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ShortValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_ShortValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_ShortValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of int16_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_ShortValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_ShortValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_ShortValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.ShortValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet LongValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &LongValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_methods[] = {
  { "read", _wrap_LongValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_LongValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_LongValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_LongValue_copy, METH_VARARGS, "" },
  { "count", _wrap_LongValue_count, METH_VARARGS, "" },
  { "size", _wrap_LongValue_size, METH_VARARGS, "" },
  { "write", _wrap_LongValue_write, METH_VARARGS, "" },
  { "toString", _wrap_LongValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_LongValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_LongValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_LongValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_LongValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_LongValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_LongValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_LongValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_LongValue_append, METH_VARARGS, "Append a int32_t component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.LongValue",                /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_LongValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of int32_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_LongValue,                    /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_LongValue_count_lenfunc_closure,  /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_LongValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_LongValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'LongValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_LongValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_LongValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of int32_t values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_LongValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_LongValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_LongValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.LongValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet RationalValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &RationalValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_methods[] = {
  { "read", _wrap_RationalValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_RationalValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_RationalValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_RationalValue_copy, METH_VARARGS, "" },
  { "count", _wrap_RationalValue_count, METH_VARARGS, "" },
  { "size", _wrap_RationalValue_size, METH_VARARGS, "" },
  { "write", _wrap_RationalValue_write, METH_VARARGS, "" },
  { "toString", _wrap_RationalValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_RationalValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_RationalValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_RationalValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_RationalValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_RationalValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_RationalValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_RationalValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_RationalValue_append, METH_VARARGS, "Append a Exiv2::Rational component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.RationalValue",            /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_RationalValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of Exiv2::Rational values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_RationalValue,                /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_RationalValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_RationalValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_RationalValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'RationalValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_RationalValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_RationalValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of Exiv2::Rational values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_RationalValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_RationalValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_RationalValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.RationalValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet FloatValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_float_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &FloatValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_float_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_float_t_methods[] = {
  { "read", _wrap_FloatValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_FloatValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_FloatValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_FloatValue_copy, METH_VARARGS, "" },
  { "count", _wrap_FloatValue_count, METH_VARARGS, "" },
  { "size", _wrap_FloatValue_size, METH_VARARGS, "" },
  { "write", _wrap_FloatValue_write, METH_VARARGS, "" },
  { "toString", _wrap_FloatValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_FloatValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_FloatValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_FloatValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_FloatValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_FloatValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_FloatValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_FloatValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_FloatValue_append, METH_VARARGS, "Append a float component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.FloatValue",               /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_FloatValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of float values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_float_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_float_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_float_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_FloatValue,                   /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_FloatValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_FloatValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_FloatValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'FloatValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_FloatValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_FloatValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of float values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_float_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_float_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_float_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_FloatValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_FloatValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_FloatValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.FloatValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_float_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet DoubleValue___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ValueTypeT_double_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"Constructor.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"Copy constructor\n"
		"", &DoubleValue___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ValueTypeT_double_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ValueTypeT_double_t_methods[] = {
  { "read", _wrap_DoubleValue_read, METH_VARARGS, "" },
  { "setDataArea", _wrap_DoubleValue_setDataArea, METH_VARARGS, "\n"
		"Set the data area. This method copies (clones) the buffer\n"
		"       pointed to by buf.\n"
		"" },
  { "clone", _wrap_DoubleValue_clone, METH_VARARGS, "" },
  { "copy", _wrap_DoubleValue_copy, METH_VARARGS, "" },
  { "count", _wrap_DoubleValue_count, METH_VARARGS, "" },
  { "size", _wrap_DoubleValue_size, METH_VARARGS, "" },
  { "write", _wrap_DoubleValue_write, METH_VARARGS, "" },
  { "toString", _wrap_DoubleValue_toString, METH_VARARGS, "\n"
		"Return the **n**-th component of the value as a string.\n"
		"       The behaviour of this method may be undefined if there is no\n"
		"       **n**-th\n"
		"       component.\n"
		"" },
  { "toLong", _wrap_DoubleValue_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_DoubleValue_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_DoubleValue_toRational, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_DoubleValue_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_DoubleValue_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area in a DataBuf. The caller owns\n"
		"       this copy and DataBuf ensures that it will be deleted.\n"
		"" },
  { "__getitem__", _wrap_DoubleValue___getitem__, METH_VARARGS, "" },
  { "__setitem__", _wrap_DoubleValue___setitem__, METH_VARARGS, "" },
  { "append", _wrap_DoubleValue_append, METH_VARARGS, "Append a double component to the value." },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.value.DoubleValue",              /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_DoubleValue_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Sequence of double values.\n"
		"The data components can be accessed like a Python list.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ValueTypeT_double_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ValueTypeT_double_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ValueTypeT_double_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_DoubleValue,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    _wrap_DoubleValue_count_lenfunc_closure, /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    _wrap_DoubleValue___getitem___ssizeargfunc_closure, /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    _wrap_DoubleValue___setitem___ssizeobjargproc_closure, /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DoubleValue'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_DoubleValue },
    { Py_tp_dealloc,                    (void *)_wrap_delete_DoubleValue_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Sequence of double values.\n"
		"The data components can be accessed like a Python list.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ValueTypeT_double_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ValueTypeT_double_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ValueTypeT_double_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)_wrap_DoubleValue_count_lenfunc_closure },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)_wrap_DoubleValue___getitem___ssizeargfunc_closure },
    { Py_sq_ass_item,                   (void *)_wrap_DoubleValue___setitem___ssizeobjargproc_closure },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.value.DoubleValue",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ValueTypeT_double_t_clientdata = {0, 0, 0, 0, 0, 0, 0};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Exiv2__AsciiValueTo_p_Exiv2__StringValueBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::StringValueBase *)  ((Exiv2::AsciiValue *) x));
}
static void *_p_Exiv2__CommentValueTo_p_Exiv2__StringValueBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::StringValueBase *)  ((Exiv2::CommentValue *) x));
}
static void *_p_Exiv2__StringValueTo_p_Exiv2__StringValueBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::StringValueBase *)  ((Exiv2::StringValue *) x));
}
static void *_p_Exiv2__AsciiValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::StringValueBase *) ((Exiv2::AsciiValue *) x));
}
static void *_p_Exiv2__CommentValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::StringValueBase *) ((Exiv2::CommentValue *) x));
}
static void *_p_Exiv2__DataValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::DataValue *) x));
}
static void *_p_Exiv2__DateValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::DateValue *) x));
}
static void *_p_Exiv2__LangAltValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::XmpValue *) ((Exiv2::LangAltValue *) x));
}
static void *_p_Exiv2__StringValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::StringValueBase *) ((Exiv2::StringValue *) x));
}
static void *_p_Exiv2__StringValueBaseTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::StringValueBase *) x));
}
static void *_p_Exiv2__TimeValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::TimeValue *) x));
}
static void *_p_Exiv2__ValueTypeT_double_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< double > *) x));
}
static void *_p_Exiv2__ValueTypeT_float_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< float > *) x));
}
static void *_p_Exiv2__ValueTypeT_int32_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< int > *) x));
}
static void *_p_Exiv2__ValueTypeT_int16_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< short > *) x));
}
static void *_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< std::pair< int32_t,int32_t > > *) x));
}
static void *_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< std::pair< uint32_t,uint32_t > > *) x));
}
static void *_p_Exiv2__ValueTypeT_uint32_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< unsigned int > *) x));
}
static void *_p_Exiv2__ValueTypeT_uint16_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< unsigned short > *) x));
}
static void *_p_Exiv2__XmpArrayValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::XmpValue *) ((Exiv2::XmpArrayValue *) x));
}
static void *_p_Exiv2__XmpTextValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::XmpValue *) ((Exiv2::XmpTextValue *) x));
}
static void *_p_Exiv2__XmpValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::XmpValue *) x));
}
static void *_p_Exiv2__LangAltValueTo_p_Exiv2__XmpValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::XmpValue *)  ((Exiv2::LangAltValue *) x));
}
static void *_p_Exiv2__XmpArrayValueTo_p_Exiv2__XmpValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::XmpValue *)  ((Exiv2::XmpArrayValue *) x));
}
static void *_p_Exiv2__XmpTextValueTo_p_Exiv2__XmpValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::XmpValue *)  ((Exiv2::XmpTextValue *) x));
}
static swig_type_info _swigt__p_Exiv2__AsciiValue = {"_p_Exiv2__AsciiValue", "Exiv2::AsciiValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__AsciiValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__CommentValue = {"_p_Exiv2__CommentValue", "Exiv2::CommentValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__CommentValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__DataBuf = {"_p_Exiv2__DataBuf", "Exiv2::DataBuf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__DataValue = {"_p_Exiv2__DataValue", "Exiv2::DataValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__DataValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__DateValue = {"_p_Exiv2__DateValue", "Exiv2::DateValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__DateValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__DateValue__Date = {"_p_Exiv2__DateValue__Date", "Exiv2::DateValue::Date *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__DateValue__Date_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__LangAltValue = {"_p_Exiv2__LangAltValue", "Exiv2::LangAltValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__LangAltValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__StringValue = {"_p_Exiv2__StringValue", "Exiv2::StringValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__StringValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__StringValueBase = {"_p_Exiv2__StringValueBase", "Exiv2::StringValueBase *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__StringValueBase_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__TimeValue = {"_p_Exiv2__TimeValue", "Exiv2::TimeValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__TimeValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__TimeValue__Time = {"_p_Exiv2__TimeValue__Time", "Exiv2::TimeValue::Time *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__TimeValue__Time_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__Value = {"_p_Exiv2__Value", "Exiv2::Value *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__Value_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_double_t = {"_p_Exiv2__ValueTypeT_double_t", "Exiv2::DoubleValue *|Exiv2::ValueType< double > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_double_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_float_t = {"_p_Exiv2__ValueTypeT_float_t", "Exiv2::FloatValue *|Exiv2::ValueType< float > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_float_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_int16_t_t = {"_p_Exiv2__ValueTypeT_int16_t_t", "Exiv2::ShortValue *|Exiv2::ValueType< int16_t > *|Exiv2::ValueType< short > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_int32_t_t = {"_p_Exiv2__ValueTypeT_int32_t_t", "Exiv2::LongValue *|Exiv2::ValueType< int32_t > *|Exiv2::ValueType< int > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t = {"_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t", "Exiv2::RationalValue *|Exiv2::ValueType< Exiv2::Rational > *|Exiv2::ValueType< std::pair< int32_t,int32_t > > *|Exiv2::ValueType< std::pair< int,int > > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t = {"_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t", "Exiv2::URationalValue *|Exiv2::ValueType< Exiv2::URational > *|Exiv2::ValueType< std::pair< uint32_t,uint32_t > > *|Exiv2::ValueType< std::pair< unsigned int,unsigned int > > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_uint16_t_t = {"_p_Exiv2__ValueTypeT_uint16_t_t", "Exiv2::UShortValue *|Exiv2::ValueType< uint16_t > *|Exiv2::ValueType< unsigned short > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_uint32_t_t = {"_p_Exiv2__ValueTypeT_uint32_t_t", "Exiv2::ULongValue *|Exiv2::ValueType< uint32_t > *|Exiv2::ValueType< unsigned int > *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__XmpArrayValue = {"_p_Exiv2__XmpArrayValue", "Exiv2::XmpArrayValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__XmpArrayValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__XmpTextValue = {"_p_Exiv2__XmpTextValue", "Exiv2::XmpTextValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__XmpTextValue_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__XmpValue = {"_p_Exiv2__XmpValue", "Exiv2::XmpValue *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__XmpValue_clientdata, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int32_t_int32_t_t = {"_p_std__pairT_int32_t_int32_t_t", "Exiv2::Rational *|std::pair< int,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_uint32_t_uint32_t_t = {"_p_std__pairT_uint32_t_uint32_t_t", "Exiv2::URational *|std::pair< unsigned int,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "Exiv2::byte *|uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Exiv2__AsciiValue,
  &_swigt__p_Exiv2__CommentValue,
  &_swigt__p_Exiv2__DataBuf,
  &_swigt__p_Exiv2__DataValue,
  &_swigt__p_Exiv2__DateValue,
  &_swigt__p_Exiv2__DateValue__Date,
  &_swigt__p_Exiv2__LangAltValue,
  &_swigt__p_Exiv2__StringValue,
  &_swigt__p_Exiv2__StringValueBase,
  &_swigt__p_Exiv2__TimeValue,
  &_swigt__p_Exiv2__TimeValue__Time,
  &_swigt__p_Exiv2__Value,
  &_swigt__p_Exiv2__ValueTypeT_double_t,
  &_swigt__p_Exiv2__ValueTypeT_float_t,
  &_swigt__p_Exiv2__ValueTypeT_int16_t_t,
  &_swigt__p_Exiv2__ValueTypeT_int32_t_t,
  &_swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t,
  &_swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t,
  &_swigt__p_Exiv2__ValueTypeT_uint16_t_t,
  &_swigt__p_Exiv2__ValueTypeT_uint32_t_t,
  &_swigt__p_Exiv2__XmpArrayValue,
  &_swigt__p_Exiv2__XmpTextValue,
  &_swigt__p_Exiv2__XmpValue,
  &_swigt__p_SwigPyObject,
  &_swigt__p_ValueType,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_first_type,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_second_type,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__ostream,
  &_swigt__p_std__pairT_int32_t_int32_t_t,
  &_swigt__p_std__pairT_uint32_t_uint32_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Exiv2__AsciiValue[] = {  {&_swigt__p_Exiv2__AsciiValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__CommentValue[] = {  {&_swigt__p_Exiv2__CommentValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DataBuf[] = {  {&_swigt__p_Exiv2__DataBuf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DataValue[] = {  {&_swigt__p_Exiv2__DataValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DateValue[] = {  {&_swigt__p_Exiv2__DateValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DateValue__Date[] = {  {&_swigt__p_Exiv2__DateValue__Date, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__LangAltValue[] = {  {&_swigt__p_Exiv2__LangAltValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__StringValue[] = {  {&_swigt__p_Exiv2__StringValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__StringValueBase[] = {  {&_swigt__p_Exiv2__StringValueBase, 0, 0, 0},  {&_swigt__p_Exiv2__AsciiValue, _p_Exiv2__AsciiValueTo_p_Exiv2__StringValueBase, 0, 0},  {&_swigt__p_Exiv2__CommentValue, _p_Exiv2__CommentValueTo_p_Exiv2__StringValueBase, 0, 0},  {&_swigt__p_Exiv2__StringValue, _p_Exiv2__StringValueTo_p_Exiv2__StringValueBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__TimeValue[] = {  {&_swigt__p_Exiv2__TimeValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__TimeValue__Time[] = {  {&_swigt__p_Exiv2__TimeValue__Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__Value[] = {  {&_swigt__p_Exiv2__Value, 0, 0, 0},  {&_swigt__p_Exiv2__AsciiValue, _p_Exiv2__AsciiValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__CommentValue, _p_Exiv2__CommentValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__DataValue, _p_Exiv2__DataValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__DateValue, _p_Exiv2__DateValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__LangAltValue, _p_Exiv2__LangAltValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__StringValue, _p_Exiv2__StringValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__StringValueBase, _p_Exiv2__StringValueBaseTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__TimeValue, _p_Exiv2__TimeValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_double_t, _p_Exiv2__ValueTypeT_double_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_float_t, _p_Exiv2__ValueTypeT_float_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_int16_t_t, _p_Exiv2__ValueTypeT_int16_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_int32_t_t, _p_Exiv2__ValueTypeT_int32_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, _p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, _p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_uint16_t_t, _p_Exiv2__ValueTypeT_uint16_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_uint32_t_t, _p_Exiv2__ValueTypeT_uint32_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__XmpArrayValue, _p_Exiv2__XmpArrayValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__XmpTextValue, _p_Exiv2__XmpTextValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__XmpValue, _p_Exiv2__XmpValueTo_p_Exiv2__Value, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_double_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_float_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_int16_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_int16_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_int32_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_int32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_uint16_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_uint16_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_uint32_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_uint32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__XmpArrayValue[] = {  {&_swigt__p_Exiv2__XmpArrayValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__XmpTextValue[] = {  {&_swigt__p_Exiv2__XmpTextValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__XmpValue[] = {  {&_swigt__p_Exiv2__XmpValue, 0, 0, 0},  {&_swigt__p_Exiv2__LangAltValue, _p_Exiv2__LangAltValueTo_p_Exiv2__XmpValue, 0, 0},  {&_swigt__p_Exiv2__XmpArrayValue, _p_Exiv2__XmpArrayValueTo_p_Exiv2__XmpValue, 0, 0},  {&_swigt__p_Exiv2__XmpTextValue, _p_Exiv2__XmpTextValueTo_p_Exiv2__XmpValue, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int32_t_int32_t_t[] = {  {&_swigt__p_std__pairT_int32_t_int32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_uint32_t_uint32_t_t[] = {  {&_swigt__p_std__pairT_uint32_t_uint32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Exiv2__AsciiValue,
  _swigc__p_Exiv2__CommentValue,
  _swigc__p_Exiv2__DataBuf,
  _swigc__p_Exiv2__DataValue,
  _swigc__p_Exiv2__DateValue,
  _swigc__p_Exiv2__DateValue__Date,
  _swigc__p_Exiv2__LangAltValue,
  _swigc__p_Exiv2__StringValue,
  _swigc__p_Exiv2__StringValueBase,
  _swigc__p_Exiv2__TimeValue,
  _swigc__p_Exiv2__TimeValue__Time,
  _swigc__p_Exiv2__Value,
  _swigc__p_Exiv2__ValueTypeT_double_t,
  _swigc__p_Exiv2__ValueTypeT_float_t,
  _swigc__p_Exiv2__ValueTypeT_int16_t_t,
  _swigc__p_Exiv2__ValueTypeT_int32_t_t,
  _swigc__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t,
  _swigc__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t,
  _swigc__p_Exiv2__ValueTypeT_uint16_t_t,
  _swigc__p_Exiv2__ValueTypeT_uint32_t_t,
  _swigc__p_Exiv2__XmpArrayValue,
  _swigc__p_Exiv2__XmpTextValue,
  _swigc__p_Exiv2__XmpValue,
  _swigc__p_SwigPyObject,
  _swigc__p_ValueType,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_first_type,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_second_type,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__ostream,
  _swigc__p_std__pairT_int32_t_int32_t_t,
  _swigc__p_std__pairT_uint32_t_uint32_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[3];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  SWIG_Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "__doc__",SWIG_FromCharPtr("Exiv2 metadata value classes."));
  
  {
    exiv2_module = PyImport_ImportModule("exiv2");
    if (!exiv2_module)
    return INIT_ERROR_RETURN;
  }
  
  
  {
    PyExc_Exiv2Error = PyObject_GetAttrString(exiv2_module, "Exiv2Error");
    if (!PyExc_Exiv2Error) {
      PyErr_SetString(PyExc_RuntimeError,
        "Import error: exiv2.Exiv2Error not found.");
      return INIT_ERROR_RETURN;
    }
  }
  
  
  /* type 'Exiv2::Value' */
  d = PyDict_New();
  
  {
    PyObject* module = PyImport_ImportModule("enum");
    if (!module)
    return INIT_ERROR_RETURN;
    Py_IntEnum = PyObject_GetAttrString(module, "IntEnum");
    Py_DECREF(module);
    if (!Py_IntEnum) {
      PyErr_SetString(PyExc_RuntimeError, "Import error: enum.IntEnum.");
      return INIT_ERROR_RETURN;
    }
  }
  
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__Value_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__Value_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "Value", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Value");
  d = md;
  
  /* type 'Exiv2::DataValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DataValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__DataValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__DataValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "DataValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "DataValue");
  d = md;
  
  /* type 'Exiv2::StringValueBase' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'StringValueBase' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__StringValueBase_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__StringValueBase_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "StringValueBase", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "StringValueBase");
  d = md;
  
  /* type 'Exiv2::StringValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__StringValueBase");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'StringValue' as base 'Exiv2::StringValueBase' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__StringValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__StringValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "StringValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "StringValue");
  d = md;
  
  /* type 'Exiv2::AsciiValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__StringValueBase");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'AsciiValue' as base 'Exiv2::StringValueBase' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__AsciiValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__AsciiValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "AsciiValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "AsciiValue");
  d = md;
  
  /* type 'Exiv2::CommentValue' */
  d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "CharsetId",_create_enum_Exiv2_CommentValue_CharsetId(
      "CharsetId", "Character set identifiers for the character sets defined by Exif.", _get_enum_list(0, "ascii",Exiv2::CommentValue::ascii,"jis",Exiv2::CommentValue::jis,"unicode",Exiv2::CommentValue::unicode,"undefined",Exiv2::CommentValue::undefined,"invalidCharsetId",Exiv2::CommentValue::invalidCharsetId,"lastCharsetId",Exiv2::CommentValue::lastCharsetId, NULL)));
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__StringValueBase");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'CommentValue' as base 'Exiv2::StringValueBase' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__CommentValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__CommentValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "CommentValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "CommentValue");
  d = md;
  
  /* type 'Exiv2::XmpValue' */
  d = PyDict_New();
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "XmpArrayType",_create_enum_Exiv2_XmpValue_XmpArrayType(
      "XmpArrayType", "XMP array types.", _get_enum_list(0, "xaNone",Exiv2::XmpValue::xaNone,"xaAlt",Exiv2::XmpValue::xaAlt,"xaBag",Exiv2::XmpValue::xaBag,"xaSeq",Exiv2::XmpValue::xaSeq, NULL)));
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "XmpStruct",_create_enum_Exiv2_XmpValue_XmpStruct(
      "XmpStruct", "XMP structure indicator.", _get_enum_list(0, "xsNone",Exiv2::XmpValue::xsNone,"xsStruct",Exiv2::XmpValue::xsStruct, NULL)));
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'XmpValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__XmpValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__XmpValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "XmpValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "XmpValue");
  d = md;
  
  /* type 'Exiv2::XmpTextValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__XmpValue");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'XmpTextValue' as base 'Exiv2::XmpValue' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__XmpTextValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__XmpTextValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "XmpTextValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "XmpTextValue");
  d = md;
  
  /* type 'Exiv2::XmpArrayValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__XmpValue");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'XmpArrayValue' as base 'Exiv2::XmpValue' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__XmpArrayValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__XmpArrayValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "XmpArrayValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "XmpArrayValue");
  d = md;
  
  /* type 'Exiv2::LangAltValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__XmpValue");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'LangAltValue' as base 'Exiv2::XmpValue' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__LangAltValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__LangAltValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "LangAltValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "LangAltValue");
  d = md;
  
  /* type 'Exiv2::DateValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DateValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__DateValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__DateValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "DateValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "DateValue");
  d = md;
  
  /* type 'Exiv2::DateValue::Date' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__DateValue__Date_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__DateValue__Date_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "Date", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Date");
  d = md;
  
  /* type 'Exiv2::TimeValue' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'TimeValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__TimeValue_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__TimeValue_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "TimeValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "TimeValue");
  d = md;
  
  /* type 'Exiv2::TimeValue::Time' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__TimeValue__Time_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__TimeValue__Time_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "Time", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Time");
  d = md;
  
  /* type 'Exiv2::ValueType< uint16_t >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'UShortValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_uint16_t_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "UShortValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "UShortValue");
  d = md;
  
  /* type 'Exiv2::ValueType< uint32_t >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ULongValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_uint32_t_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "ULongValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ULongValue");
  d = md;
  
  /* type 'Exiv2::ValueType< Exiv2::URational >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'URationalValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__URational_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "URationalValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "URationalValue");
  d = md;
  
  /* type 'Exiv2::ValueType< int16_t >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ShortValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_int16_t_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "ShortValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ShortValue");
  d = md;
  
  /* type 'Exiv2::ValueType< int32_t >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'LongValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_int32_t_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "LongValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "LongValue");
  d = md;
  
  /* type 'Exiv2::ValueType< Exiv2::Rational >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'RationalValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_Exiv2__Rational_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "RationalValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "RationalValue");
  d = md;
  
  /* type 'Exiv2::ValueType< float >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'FloatValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_float_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_float_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "FloatValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "FloatValue");
  d = md;
  
  /* type 'Exiv2::ValueType< double >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Value");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'DoubleValue' as base 'Exiv2::Value' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ValueTypeT_double_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ValueTypeT_double_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "DoubleValue", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "DoubleValue");
  d = md;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

