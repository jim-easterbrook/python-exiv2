/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.3.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040301
#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE
#define SWIGPYTHON_BUILTIN
#define SWIGPYTHON_FASTPROXY

#define SWIG_name    "_exif"
/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 *
 * Note that SWIG expects __cplusplus to be defined to the appropriate C++ standard.
 * MSVC users are urged to check and examine the /Zc:__cplusplus compiler option.
 * See https://learn.microsoft.com/en-us/cpp/build/reference/zc-cplusplus.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if !defined(PY_SSIZE_T_CLEAN) && !defined(SWIG_NO_PY_SSIZE_T_CLEAN)
#define PY_SSIZE_T_CLEAN
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic push
#if defined(__cplusplus) && __cplusplus >=201703L
#pragma GCC diagnostic ignored "-Wregister" /* For python-2.7 headers that use register */
#endif
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */

#if defined(_MSC_VER) && _MSC_VER >= 1929
/* Workaround compilation errors when redefining _DEBUG in MSVC 2019 version 16.10 and later
 * See https://github.com/swig/swig/issues/2090 */
# include <corecrt.h>
#endif

# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

#if defined(SWIGPYTHON_BUILTIN) && defined(SWIG_HEAPTYPES)
/* SWIG_HEAPTYPES is not ready for use with SWIGPYTHON_BUILTIN, but if turned on manually requires the following */
#if PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030c0000
#include <structmember.h>
#define Py_READONLY READONLY
#define Py_T_PYSSIZET T_PYSSIZET
#endif
#endif

#if __GNUC__ >= 7
#pragma GCC diagnostic pop
#endif

#include <stdio.h>
#include <stdlib.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4
#define SWIG_POINTER_CLEAR         0x8
#define SWIG_POINTER_RELEASE       (SWIG_POINTER_CLEAR | SWIG_POINTER_DISOWN)

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows returning the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
/* Runtime errors are < 0 */
#define SWIG_ERROR                 (-1)
/* Errors in range -1 to -99 are in swigerrors.swg (errors for all languages including those not using the runtime) */
/* Errors in range -100 to -199 are language specific errors defined in *errors.swg */
/* Errors < -200 are generic runtime specific errors */
#define SWIG_ERROR_RELEASE_NOT_OWNED (-200)

#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporary objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del object mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(const swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  Choose the last
     name. It should be the most specific; a fully resolved name
     but not necessarily with default template parameters expanded. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* SWIG Errors applicable to all language modules, values are reserved from -1 to -99 */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13


/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Wrapper around PyUnicode_AsUTF8AndSize - call Py_XDECREF on the returned pbytes when finished with the returned string */
SWIGINTERN const char *
SWIG_PyUnicode_AsUTF8AndSize(PyObject *str, Py_ssize_t *psize, PyObject **pbytes)
{
#if PY_VERSION_HEX >= 0x03030000
# if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x030A0000
  *pbytes = NULL;
  return PyUnicode_AsUTF8AndSize(str, psize);
# else
  const char *chars;
  *pbytes = PyUnicode_AsUTF8String(str);
  chars = *pbytes ? PyBytes_AsString(*pbytes) : NULL;
  if (chars && psize)
    *psize = PyBytes_Size(*pbytes);
  return chars;
# endif
#else
  char *chars = NULL;
  *pbytes = NULL;
  PyString_AsStringAndSize(str, &chars, psize);
  return chars;
#endif
}

SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user interface files check for it. */
# define SWIGPY_USE_CAPSULE
#ifdef SWIGPYTHON_BUILTIN
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule_builtin" SWIG_TYPE_TABLE_NAME
#else
# define SWIGPY_CAPSULE_ATTR_NAME "type_pointer_capsule" SWIG_TYPE_TABLE_NAME
#endif
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION "." SWIGPY_CAPSULE_ATTR_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

#ifdef Py_LIMITED_API
# define PyTuple_GET_ITEM PyTuple_GetItem
/* Note that PyTuple_SetItem() has different semantics from PyTuple_SET_ITEM as it decref's the original tuple item, so in general they cannot be used
  interchangeably. However in SWIG-generated code PyTuple_SET_ITEM is only used with newly initialized tuples without any items and for them this does work. */
# define PyTuple_SET_ITEM PyTuple_SetItem
# define PyTuple_GET_SIZE PyTuple_Size
# define PyCFunction_GET_FLAGS PyCFunction_GetFlags
# define PyCFunction_GET_FUNCTION PyCFunction_GetFunction
# define PyCFunction_GET_SELF PyCFunction_GetSelf
# define PyList_GET_ITEM PyList_GetItem
# define PyList_SET_ITEM PyList_SetItem
# define PySliceObject PyObject
#endif

/* Increment and Decrement wrappers - for portability when using the stable abi and for performance otherwise */
#ifdef Py_LIMITED_API
# define SWIG_Py_INCREF Py_IncRef
# define SWIG_Py_XINCREF Py_IncRef
# define SWIG_Py_DECREF Py_DecRef
# define SWIG_Py_XDECREF Py_DecRef
#else
# define SWIG_Py_INCREF Py_INCREF
# define SWIG_Py_XINCREF Py_XINCREF
# define SWIG_Py_DECREF Py_DECREF
# define SWIG_Py_XDECREF Py_XDECREF
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  case SWIG_NullReferenceError:
    type = PyExc_TypeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    PyObject *bytes = NULL;
    const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
    PyErr_Clear();
    SWIG_Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_DECREF(old_str);
    SWIG_Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    if (newvalue) {
      SWIG_Py_XDECREF(value);
      PyErr_Restore(type, newvalue, traceback);
    } else {
      PyErr_Restore(type, value, traceback);
    }
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      if PY_VERSION_HEX < 0x03070000
#        define SWIG_PYTHON_INITIALIZE_THREADS PyEval_InitThreads()
#      else
#        define SWIG_PYTHON_INITIALIZE_THREADS
#      endif
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { status = false; PyEval_RestoreThread(save); }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03030000
# error "This version of SWIG only supports Python 3 >= 3.3"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  SWIG_Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  SWIG_Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  SWIG_Py_DECREF(obj);
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj, int is_void) {
  if (!result) {
    result = obj;
  } else if (result == Py_None && is_void) {
    SWIG_Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      if (result) {
        PyList_SET_ITEM(result, 0, o2);
      } else {
        SWIG_Py_DECREF(obj);
        return o2;
      }
    }
    PyList_Append(result,obj);
    SWIG_Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
 
/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */
 
typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

SWIGINTERN PyObject *
swig_varlink_repr(PyObject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_InternFromString("<Swig global variables>");
#else
  return PyString_FromString("<Swig global variables>");
#endif
}

SWIGINTERN PyObject *
swig_varlink_str(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
#if PY_VERSION_HEX >= 0x03000000
  PyObject *str = PyUnicode_InternFromString("(");
  PyObject *tail;
  PyObject *joined;
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    tail = PyUnicode_FromString(var->name);
    joined = PyUnicode_Concat(str, tail);
    SWIG_Py_DECREF(str);
    SWIG_Py_DECREF(tail);
    str = joined;
    if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        SWIG_Py_DECREF(str);
        SWIG_Py_DECREF(tail);
        str = joined;
    }
  }
  tail = PyUnicode_InternFromString(")");
  joined = PyUnicode_Concat(str, tail);
  SWIG_Py_DECREF(str);
  SWIG_Py_DECREF(tail);
  str = joined;
#else
  PyObject *str = PyString_FromString("(");
  swig_globalvar *var;
  for (var = v->vars; var; var=var->next) {
    PyString_ConcatAndDel(&str,PyString_FromString(var->name));
    if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
  }
  PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
  return str;
}

SWIGINTERN void
swig_varlink_dealloc(PyObject *o) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  swig_globalvar *var = v->vars;
  while (var) {
    swig_globalvar *n = var->next;
    free(var->name);
    free(var);
    var = n;
  }
}

SWIGINTERN PyObject *
swig_varlink_getattr(PyObject *o, char *n) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  PyObject *res = NULL;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->get_attr)();
      break;
    }
    var = var->next;
  }
  if (res == NULL && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

SWIGINTERN int
swig_varlink_setattr(PyObject *o, char *n, PyObject *p) {
  swig_varlinkobject *v = (swig_varlinkobject *) o;
  int res = 1;
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      res = (*var->set_attr)(p);
      break;
    }
    var = var->next;
  }
  if (res == 1 && !PyErr_Occurred()) {
    PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
  }
  return res;
}

#if !defined(SWIGPYTHON_BUILTIN) && PY_VERSION_HEX >= 0x03030000
#define SWIG_HEAPTYPES
#endif

SWIGINTERN PyTypeObject*
swig_varlink_type(void) {
  static char varlink__doc__[] = "Swig var link object";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject varlink_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                  /* ob_size */
#endif
      "swigvarlink",                      /* tp_name */
      sizeof(swig_varlinkobject),         /* tp_basicsize */
      0,                                  /* tp_itemsize */
      (destructor) swig_varlink_dealloc,  /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                       /* tp_print */
#else
      (Py_ssize_t)0,                      /* tp_vectorcall_offset */
#endif
      (getattrfunc) swig_varlink_getattr, /* tp_getattr */
      (setattrfunc) swig_varlink_setattr, /* tp_setattr */
      0,                                  /* tp_compare */
      (reprfunc) swig_varlink_repr,       /* tp_repr */
      0,                                  /* tp_as_number */
      0,                                  /* tp_as_sequence */
      0,                                  /* tp_as_mapping */
      0,                                  /* tp_hash */
      0,                                  /* tp_call */
      (reprfunc) swig_varlink_str,        /* tp_str */
      0,                                  /* tp_getattro */
      0,                                  /* tp_setattro */
      0,                                  /* tp_as_buffer */
      0,                                  /* tp_flags */
      varlink__doc__,                     /* tp_doc */
      0,                                  /* tp_traverse */
      0,                                  /* tp_clear */
      0,                                  /* tp_richcompare */
      0,                                  /* tp_weaklistoffset */
      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
      0,                                  /* tp_del */
      0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                  /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                  /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                  /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                  /* tp_allocs */
      0,                                  /* tp_frees */
      0,                                  /* tp_maxalloc */
      0,                                  /* tp_prev */
      0                                   /* tp_next */
#endif
    };
    varlink_type = tmp;
    type_init = 1;
    if (PyType_Ready(&varlink_type) < 0)
      return NULL;
  }
  return &varlink_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)swig_varlink_dealloc },
    { Py_tp_repr, (void *)swig_varlink_repr },
    { Py_tp_getattr, (void *)swig_varlink_getattr },
    { Py_tp_setattr, (void *)swig_varlink_setattr },
    { Py_tp_str, (void *)swig_varlink_str },
    { Py_tp_doc, (void *)varlink__doc__ },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "swigvarlink",
    sizeof(swig_varlinkobject),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

/* Create a variable linking object for use later */
SWIGINTERN PyObject *
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = PyObject_New(swig_varlinkobject, swig_varlink_type());
  if (result) {
    result->vars = 0;
  }
  return ((PyObject*) result);
}

SWIGINTERN void 
SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v = (swig_varlinkobject *) p;
  swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  if (gv) {
    size_t size = strlen(name)+1;
    gv->name = (char *)malloc(size);
    if (gv->name) {
      memcpy(gv->name, name, size);
      gv->get_attr = get_attr;
      gv->set_attr = set_attr;
      gv->next = v->vars;
    }
  }
  v->vars = gv;
}


static PyObject *Swig_Globals_global = NULL;
  
SWIGINTERN PyObject *
SWIG_globals(void) {
  if (Swig_Globals_global == NULL) {
    Swig_Globals_global = SWIG_newvarlink();
  }
  return Swig_Globals_global;
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  SWIG_Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    SWIG_Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      SWIG_Py_INCREF(obj);
      data->newargs = obj;
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
        data->newargs = PyTuple_New(1);
        if (data->newargs) {
          SWIG_Py_INCREF(obj);
          PyTuple_SET_ITEM(data->newargs, 0, obj);
        } else {
          SWIG_Py_DECREF(data->newraw);
          SWIG_Py_DECREF(data->klass);
          free(data);
          return 0;
        }
      } else {
        SWIG_Py_INCREF(obj);
        data->newargs = obj;
      }
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      data->delargs = !(PyCFunction_GET_FLAGS(data->destroy) & METH_O);
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data)
{
  SWIG_Py_XDECREF(data->klass);
  SWIG_Py_XDECREF(data->newraw);
  SWIG_Py_XDECREF(data->newargs);
  SWIG_Py_XDECREF(data->destroy);
  free(data);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  SWIG_Py_XINCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    PyObject *val = SwigPyObject_long(v);
    if (val) {
      PyObject *ofmt;
      PyTuple_SET_ITEM(args, 0, val);
      ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
        res = PyUnicode_Format(ofmt,args);
#else
        res = PyString_Format(ofmt,args);
#endif
        SWIG_Py_DECREF(ofmt);
      }
    }
    SWIG_Py_DECREF(args);
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (repr && v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
    if (nrep) {
# if PY_VERSION_HEX >= 0x03000000
      PyObject *joined = PyUnicode_Concat(repr, nrep);
      SWIG_Py_DECREF(repr);
      SWIG_Py_DECREF(nrep);
      repr = joined;
# else
      PyString_ConcatAndDel(&repr,nrep);
# endif
    } else {
      SWIG_Py_DECREF(repr);
      repr = NULL;
    }
  }
  return repr;
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res = NULL;
  if (!PyErr_Occurred()) {
    if (op != Py_EQ && op != Py_NE) {
      SWIG_Py_INCREF(Py_NotImplemented);
      return Py_NotImplemented;
    }
    res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  }
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
  PyTypeObject *target_tp = SwigPyObject_type();
  PyTypeObject *op_type = Py_TYPE(op);
#ifdef SWIGPYTHON_BUILTIN
  if (PyType_IsSubtype(op_type, target_tp))
    return 1;
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
#else
# ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  if (op_type == target_tp)
    return 1;
# ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyObject");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
# else
  return (strcmp(op_type->tp_name, "SwigPyObject") == 0);
# endif
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

static PyObject* Swig_Capsule_global = NULL;

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        if (tmp) {
          res = SWIG_Python_CallFunctor(destroy, tmp);
        } else {
          res = 0;
        }
        SWIG_Py_XDECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      SWIG_Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
    SWIG_Py_XDECREF(Swig_Capsule_global);
  }
  SWIG_Py_XDECREF(next);
#ifdef SWIGPYTHON_BUILTIN
  SWIG_Py_XDECREF(sobj->dict);
#endif
  PyObject_Free(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  ((SwigPyObject *)next)->next = sobj->next;
  sobj->next = next;
  SWIG_Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    SWIG_Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SWIG_Py_DECREF(SwigPyObject_acquire(v,args));
      } else {
        SWIG_Py_DECREF(SwigPyObject_disown(v,args));
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) != 0)
      return NULL;
  }
  return &swigpyobject_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyObject_dealloc },
    { Py_tp_repr, (void *)SwigPyObject_repr },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigobject_doc },
    { Py_tp_richcompare, (void *)SwigPyObject_richcompare },
    { Py_tp_methods, (void *)swigobject_methods },
    { Py_nb_int, (void *)SwigPyObject_long },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyObject",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_New(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
    sobj->dict = 0;
#endif
    if (own == SWIG_POINTER_OWN) {
      /* Obtain a reference to the Python capsule wrapping the module information, so that the
       * module information is correctly destroyed after all SWIG python objects have been freed
       * by the GC (and corresponding destructors invoked) */
      SWIG_Py_XINCREF(Swig_Capsule_global);
    }
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
#ifdef Py_LIMITED_API
  int cmp;
  PyObject *tp_name;
#endif
  PyTypeObject* op_type = Py_TYPE(op);
  if (op_type == SwigPyPacked_TypeOnce())
    return 1;
#ifdef Py_LIMITED_API
  tp_name = PyObject_GetAttrString((PyObject *)op_type, "__name__");
  if (!tp_name)
    return 0;
  cmp = PyUnicode_CompareWithASCIIString(tp_name, "SwigPyPacked");
  SWIG_Py_DECREF(tp_name);
  return cmp == 0;
#else
  return (strcmp(op_type->tp_name, "SwigPyPacked") == 0);
#endif
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_Free(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
#ifndef SWIG_HEAPTYPES
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                         /* tp_print */
#else
      (Py_ssize_t)0,                        /* tp_vectorcall_offset */
#endif
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                    /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                    /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) != 0)
      return NULL;
  }
  return &swigpypacked_type;
#else
  PyType_Slot slots[] = {
    { Py_tp_dealloc, (void *)SwigPyPacked_dealloc },
    { Py_tp_repr, (void *)SwigPyPacked_repr },
    { Py_tp_str, (void *)SwigPyPacked_str },
    { Py_tp_getattro, (void *)PyObject_GenericGetAttr },
    { Py_tp_doc, (void *)swigpacked_doc },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "SwigPyPacked",
    sizeof(SwigPyPacked),
    0,
    Py_TPFLAGS_DEFAULT,
    slots
  };
  return (PyTypeObject *)PyType_FromSpec(&spec);
#endif
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_New(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_Free((PyObject *)sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
#if PY_VERSION_HEX >= 0x030d0000
    PyWeakref_GetRef(pyobj, &pyobj);
    Py_DECREF(pyobj);
#else
    pyobj = PyWeakref_GET_OBJECT(pyobj);
#endif
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	SWIG_Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    SWIG_Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (((flags & SWIG_POINTER_RELEASE) == SWIG_POINTER_RELEASE) && !sobj->own) {
      res = SWIG_ERROR_RELEASE_NOT_OWNED;
    } else {
      if (own)
        *own = *own | sobj->own;
      if (flags & SWIG_POINTER_DISOWN) {
        sobj->own = 0;
      }
      if (flags & SWIG_POINTER_CLEAR) {
        sobj->ptr = 0;
      }
      res = SWIG_OK;
    }
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            SWIG_Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
#ifndef Py_LIMITED_API
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
#else
    PyObject* pystr_doc = PyObject_GetAttrString(obj, "__doc__");
    PyObject *bytes = NULL;
    const char *doc = pystr_doc ? SWIG_PyUnicode_AsUTF8AndSize(pystr_doc, NULL, &bytes) : 0;
#endif
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
#ifdef Py_LIMITED_API
    SWIG_Py_XDECREF(bytes);
    SWIG_Py_XDECREF(pystr_doc);
#endif
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
        PyObject *dict = *dictptr;
        if (dict == NULL) {
          dict = PyDict_New();
          *dictptr = dict;
        }
        if (dict) {
          PyDict_SetItem(dict, SWIG_This(), swig_this);
        } else{
          SWIG_Py_DECREF(inst);
          inst = 0;
        }
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        SWIG_Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
#ifndef Py_LIMITED_API
        newfunc newfn = ((PyTypeObject *)data->newargs)->tp_new;
#else
        newfunc newfn = (newfunc)PyType_GetSlot((PyTypeObject *)data->newargs, Py_tp_new);
#endif
        inst = newfn((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        SWIG_Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            SWIG_Py_DECREF(inst);
            inst = 0;
          } else {
            PyType_Modified(Py_TYPE(inst));
          }
        }
      }
      SWIG_Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      SWIG_Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    if (dict) {
      return PyDict_SetItem(dict, SWIG_This(), swig_this);
    } else{
      return -1;
    }
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SWIG_Py_DECREF(SwigPyObject_append((PyObject*) sthis, obj[1]));
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
#ifndef Py_LIMITED_API
        allocfunc alloc = clientdata->pytype->tp_alloc;
#else
        allocfunc alloc = (allocfunc)PyType_GetSlot(clientdata->pytype, Py_tp_alloc);
#endif
        PyObject *next_self = alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      if (newobj) {
        newobj->dict = 0;
      }
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    SWIG_Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

static PyObject *Swig_TypeCache_global = NULL;

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  if (Swig_TypeCache_global == NULL) {
    Swig_TypeCache_global = PyDict_New();
  }
  return Swig_TypeCache_global;
}

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
#ifdef SWIG_LINK_RUNTIME
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
  }
#else
  void *type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
  if (PyErr_Occurred()) {
    PyErr_Clear();
    type_pointer = (void *)0;
  }
#endif
  return (swig_module_info *) type_pointer;
}


static int interpreter_counter = 0; /* how many (sub-)interpreters are using swig_module's types */

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  if (--interpreter_counter != 0) /* another sub-interpreter may still be using the swig_module's types */
    return;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      ty->clientdata = 0;
      if (data) SwigPyClientData_Del(data);
    }
  }
  SWIG_Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
  SWIG_Py_DECREF(SWIG_globals());
  Swig_Globals_global = NULL;
  SWIG_Py_DECREF(SWIG_Python_TypeCache());
  Swig_TypeCache_global = NULL;
  Swig_Capsule_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    if (PyModule_AddObject(module, SWIGPY_CAPSULE_ATTR_NAME, pointer) == 0) {
      ++interpreter_counter;
      Swig_Capsule_global = pointer;
    } else {
      SWIG_Py_DECREF(pointer);
    }
  } else {
    SWIG_Py_XDECREF(pointer);
  }
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      if (obj) {
        PyDict_SetItem(cache, key, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  SWIG_Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      PyObject *bytes = NULL;
      const char *tmp = SWIG_PyUnicode_AsUTF8AndSize(old_str, NULL, &bytes);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      SWIG_Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Py_XDECREF(bytes);
      SWIG_Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  (void) obj;
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
#ifndef Py_LIMITED_API
      /* tp_name is not accessible */
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	PyObject *bytes = NULL;
	const char *cstr = str ? SWIG_PyUnicode_AsUTF8AndSize(str, NULL, &bytes) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	SWIG_Py_XDECREF(bytes);
	SWIG_Py_XDECREF(str);
	return;
      }
#endif
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    SWIG_Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) != 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      SWIG_Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        goto done;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    SWIG_Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  SWIG_Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SWIGINTERN Py_hash_t
SwigPyObject_hash(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  void *ptr = sobj->ptr;
#if PY_VERSION_HEX < 0x03020000
  return (Py_hash_t)(Py_ssize_t)ptr;
#else
  return (Py_hash_t)ptr;
#endif
}

SWIGINTERN Py_hash_t
SWIG_PyNumber_AsPyHash(PyObject *obj) {
  Py_hash_t result = -1;
#if PY_VERSION_HEX < 0x03020000
  if (PyInt_Check(obj))
    result = PyInt_AsLong(obj);
  else if (PyLong_Check(obj))
    result = PyLong_AsLong(obj);
#else
  if (PyNumber_Check(obj))
    result = PyNumber_AsSsize_t(obj, NULL);
#endif
  else
    PyErr_Format(PyExc_TypeError, "Wrong type for hash function");
  return PyErr_Occurred() ? -1 : result;
}

SWIGINTERN int
SwigPyBuiltin_BadInit(PyObject *self, PyObject *SWIGUNUSEDPARM(args), PyObject *SWIGUNUSEDPARM(kwds)) {
  PyErr_Format(PyExc_TypeError, "Cannot create new instances of type '%.300s'", self->ob_type->tp_name);
  return -1;
}

SWIGINTERN void
SwigPyBuiltin_BadDealloc(PyObject *obj) {
  SwigPyObject *sobj = (SwigPyObject *)obj;
  if (sobj->own) {
    PyErr_Format(PyExc_TypeError, "Swig detected a memory leak in type '%.300s': no callable destructor found.", obj->ob_type->tp_name);
  }
}

typedef struct {
  PyCFunction get;
  PyCFunction set;
} SwigPyGetSet;

SWIGINTERN PyObject *
SwigPyBuiltin_GetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  tuple = PyTuple_New(0);
  assert(tuple);
  result = (*getset->get)(obj, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyObject *
SwigPyBuiltin_FunpackGetterClosure (PyObject *obj, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure)
    return SWIG_Py_Void();
  getset = (SwigPyGetSet *)closure;
  if (!getset->get)
    return SWIG_Py_Void();
  result = (*getset->get)(obj, NULL);
  return result;
}

SWIGINTERN int
SwigPyBuiltin_SetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *tuple, *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  tuple = PyTuple_New(1);
  assert(tuple);
  SWIG_Py_INCREF(val);
  PyTuple_SET_ITEM(tuple, 0, val);
  result = (*getset->set)(obj, tuple);
  SWIG_Py_DECREF(tuple);
  SWIG_Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN int
SwigPyBuiltin_FunpackSetterClosure (PyObject *obj, PyObject *val, void *closure) {
  SwigPyGetSet *getset;
  PyObject *result;
  if (!closure) {
    PyErr_Format(PyExc_TypeError, "Missing getset closure");
    return -1;
  }
  getset = (SwigPyGetSet *)closure;
  if (!getset->set) {
    PyErr_Format(PyExc_TypeError, "Illegal member variable assignment in type '%.300s'", obj->ob_type->tp_name);
    return -1;
  }
  result = (*getset->set)(obj, val);
  SWIG_Py_XDECREF(result);
  return result ? 0 : -1;
}

SWIGINTERN void
SwigPyStaticVar_dealloc(PyDescrObject *descr) {
  PyObject_GC_UnTrack(descr);
  SWIG_Py_XDECREF((PyObject *)PyDescr_TYPE(descr));
  SWIG_Py_XDECREF((PyObject *)PyDescr_NAME(descr));
  PyObject_GC_Del(descr);
}

SWIGINTERN PyObject *
SwigPyStaticVar_repr(PyGetSetDescrObject *descr) {
#if PY_VERSION_HEX >= 0x03000000

  return PyUnicode_FromFormat("<class attribute '%S' of type '%s'>", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  return PyString_FromFormat("<class attribute '%s' of type '%s'>", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
}

SWIGINTERN int
SwigPyStaticVar_traverse(PyObject *self, visitproc visit, void *arg) {
  PyDescrObject *descr;
  descr = (PyDescrObject *)self;
  Py_VISIT((PyObject*) PyDescr_TYPE(descr));
  return 0;
}

SWIGINTERN PyObject *
SwigPyStaticVar_get(PyGetSetDescrObject *descr, PyObject *obj, PyObject *SWIGUNUSEDPARM(type)) {
  if (descr->d_getset->get != NULL)
    return descr->d_getset->get(obj, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not readable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not readable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return NULL;
}

SWIGINTERN int
SwigPyStaticVar_set(PyGetSetDescrObject *descr, PyObject *obj, PyObject *value) {
  if (descr->d_getset->set != NULL)
    return descr->d_getset->set(obj, value, descr->d_getset->closure);
#if PY_VERSION_HEX >= 0x03000000
  PyErr_Format(PyExc_AttributeError, "attribute '%.300S' of '%.100s' objects is not writable", PyDescr_NAME(descr), PyDescr_TYPE(descr)->tp_name);
#else
  PyErr_Format(PyExc_AttributeError, "attribute '%.300s' of '%.100s' objects is not writable", PyString_AsString(PyDescr_NAME(descr)), PyDescr_TYPE(descr)->tp_name);
#endif
  return -1;
}

SWIGINTERN int
SwigPyObjectType_setattro(PyObject *typeobject, PyObject *name, PyObject *value) {
  PyObject *attribute;
  PyTypeObject *type;
  descrsetfunc local_set;

  assert(PyType_Check(typeobject));
  type = (PyTypeObject *)typeobject;
  attribute = _PyType_Lookup(type, name);
  if (attribute != NULL) {
    /* Implement descriptor functionality, if any */
    local_set = attribute->ob_type->tp_descr_set;
    if (local_set != NULL)
      return local_set(attribute, (PyObject *)type, value);
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400S'", type->tp_name, name);
#else 
    PyErr_Format(PyExc_AttributeError, "cannot modify read-only attribute '%.50s.%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400S'", type->tp_name, name);
#else
    PyErr_Format(PyExc_AttributeError, "type '%.50s' has no attribute '%.400s'", type->tp_name, PyString_AS_STRING(name));
#endif
  }

  return -1;
}

SWIGINTERN PyTypeObject*
SwigPyStaticVar_Type(void) {
  static PyTypeObject staticvar_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "swig_static_var_getset_descriptor",      /* tp_name */
      sizeof(PyGetSetDescrObject),              /* tp_basicsize */
      0,                                        /* tp_itemsize */
      (destructor)SwigPyStaticVar_dealloc,      /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      (reprfunc)SwigPyStaticVar_repr,           /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      PyObject_GenericGetAttr,                  /* tp_getattro */
      0,                                        /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      0,                                        /* tp_doc */
      SwigPyStaticVar_traverse,                 /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      (descrgetfunc)SwigPyStaticVar_get,        /* tp_descr_get */
      (descrsetfunc)SwigPyStaticVar_set,        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                        /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                        /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    staticvar_type = tmp;
    type_init = 1;
    if (PyType_Ready(&staticvar_type) < 0)
      return NULL;
  }
  return &staticvar_type;
}

SWIGINTERN PyTypeObject*
SwigPyObjectType(void) {
  static char swigpyobjecttype_doc[] = "Metaclass for SWIG wrapped types";
  static PyTypeObject swigpyobjecttype_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(&PyType_Type, 0)
#else
      PyObject_HEAD_INIT(&PyType_Type)
      0,                                        /* ob_size */
#endif
      "SwigPyObjectType",                       /* tp_name */
      PyType_Type.tp_basicsize,                 /* tp_basicsize */
      0,                                        /* tp_itemsize */
      0,                                        /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
      (printfunc)0,                             /* tp_print */
#else
      (Py_ssize_t)0,                            /* tp_vectorcall_offset */
#endif
      0,                                        /* tp_getattr */
      0,                                        /* tp_setattr */
      0,                                        /* tp_compare */
      0,                                        /* tp_repr */
      0,                                        /* tp_as_number */
      0,                                        /* tp_as_sequence */
      0,                                        /* tp_as_mapping */
      0,                                        /* tp_hash */
      0,                                        /* tp_call */
      0,                                        /* tp_str */
      0,                                        /* tp_getattro */
      SwigPyObjectType_setattro,                /* tp_setattro */
      0,                                        /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_CLASS, /* tp_flags */
      swigpyobjecttype_doc,                     /* tp_doc */
      0,                                        /* tp_traverse */
      0,                                        /* tp_clear */
      0,                                        /* tp_richcompare */
      0,                                        /* tp_weaklistoffset */
      0,                                        /* tp_iter */
      0,                                        /* tp_iternext */
      0,                                        /* tp_methods */
      0,                                        /* tp_members */
      0,                                        /* tp_getset */
      0,                                        /* tp_base */
      0,                                        /* tp_dict */
      0,                                        /* tp_descr_get */
      0,                                        /* tp_descr_set */
      0,                                        /* tp_dictoffset */
      0,                                        /* tp_init */
      0,                                        /* tp_alloc */
      0,                                        /* tp_new */
      0,                                        /* tp_free */
      0,                                        /* tp_is_gc */
      0,                                        /* tp_bases */
      0,                                        /* tp_mro */
      0,                                        /* tp_cache */
      0,                                        /* tp_subclasses */
      0,                                        /* tp_weaklist */
      0,                                        /* tp_del */
      0,                                        /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                        /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                        /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                        /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
      0,                                        /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
      0,                                        /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
      0,                                        /* tp_allocs */
      0,                                        /* tp_frees */
      0,                                        /* tp_maxalloc */
      0,                                        /* tp_prev */
      0                                         /* tp_next */
#endif
    };
    swigpyobjecttype_type = tmp;
    type_init = 1;
    swigpyobjecttype_type.tp_base = &PyType_Type;
    if (PyType_Ready(&swigpyobjecttype_type) < 0)
      return NULL;
  }
  return &swigpyobjecttype_type;
}

SWIGINTERN PyGetSetDescrObject *
SwigPyStaticVar_new_getset(PyTypeObject *type, PyGetSetDef *getset) {

  PyGetSetDescrObject *descr;
  descr = (PyGetSetDescrObject *)PyType_GenericAlloc(SwigPyStaticVar_Type(), 0);
  assert(descr);
  SWIG_Py_XINCREF((PyObject *)type);
  PyDescr_TYPE(descr) = type;
  PyDescr_NAME(descr) = PyString_InternFromString(getset->name);
  descr->d_getset = getset;
  if (PyDescr_NAME(descr) == NULL) {
    SWIG_Py_DECREF((PyObject *)descr);
    descr = NULL;
  }
  return descr;
}

SWIGINTERN PyObject *
SwigPyBuiltin_InitBases(PyTypeObject **bases) {
  Py_ssize_t base_count = 0;
  PyTypeObject **b;
  PyObject *tuple;
  Py_ssize_t i;

  if (!bases[0]) {
    bases[0] = SwigPyObject_type();
    bases[1] = NULL;
  }
  for (b = bases; *b != NULL; ++b)
    ++base_count;
  tuple = PyTuple_New(base_count);
  for (i = 0; i < base_count; ++i) {
    SWIG_Py_INCREF((PyObject *)bases[i]);
    PyTuple_SET_ITEM(tuple, i, (PyObject *)bases[i]);
  }
  return tuple;
}

SWIGINTERN PyObject *
SwigPyBuiltin_ThisClosure (PyObject *self, void *SWIGUNUSEDPARM(closure)) {
  PyObject *result;
  result = (PyObject *)SWIG_Python_GetSwigThis(self);
  SWIG_Py_XINCREF(result);
  return result;
}

SWIGINTERN void
SwigPyBuiltin_SetMetaType (PyTypeObject *type, PyTypeObject *metatype)
{
#if PY_VERSION_HEX >= 0x030900a4
    Py_SET_TYPE(type, metatype);
#else
    Py_TYPE(type) = metatype;
#endif
}


/* Start of callback function macros for use in PyTypeObject */

typedef PyObject *(*SwigPyWrapperFunction)(PyObject *, PyObject *);

#define SWIGPY_UNARYFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_unaryfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_unaryfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_unaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_DESTRUCTOR_CLOSURE(wrapper)			\
SWIGINTERN void							\
wrapper##_destructor_closure(PyObject *a) {			\
    SwigPyBuiltin_destructor_closure(wrapper, #wrapper, a);	\
}
SWIGINTERN void
SwigPyBuiltin_destructor_closure(SwigPyWrapperFunction wrapper, const char *wrappername, PyObject *a) {
  SwigPyObject *sobj;
  sobj = (SwigPyObject *)a;
  SWIG_Py_XDECREF(sobj->dict);
  if (sobj->own) {
    PyObject *o;
    PyObject *type = 0, *value = 0, *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    o = wrapper(a, NULL);
    if (!o) {
      PyObject *deallocname = PyString_FromString(wrappername);
      PyErr_WriteUnraisable(deallocname);
      SWIG_Py_DECREF(deallocname);
    }
    PyErr_Restore(type, value, traceback);
    SWIG_Py_XDECREF(o);
  }
  if (PyType_IS_GC(a->ob_type)) {
    PyObject_GC_Del(a);
  } else {
    PyObject_Free(a);
  }
}

#define SWIGPY_INQUIRY_CLOSURE(wrapper)			\
SWIGINTERN int						\
wrapper##_inquiry_closure(PyObject *a) {		\
  return SwigPyBuiltin_inquiry_closure(wrapper, a);	\
}
SWIGINTERN int
SwigPyBuiltin_inquiry_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  int result;
  pyresult = wrapper(a, NULL);
  result = pyresult && PyObject_IsTrue(pyresult) ? 1 : 0;
  SWIG_Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_GETITERFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_getiterfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_getiterfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_getiterfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_BINARYFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *						\
wrapper##_binaryfunc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_binaryfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_binaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

typedef ternaryfunc ternarycallfunc;

#define SWIGPY_TERNARYFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ternaryfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternaryfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternaryfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    SWIG_Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_TERNARYCALLFUNC_CLOSURE(wrapper)					\
SWIGINTERN PyObject *								\
wrapper##_ternarycallfunc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_ternarycallfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ternarycallfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  (void) c;
  return wrapper(a, b);
}

#define SWIGPY_LENFUNC_CLOSURE(wrapper)			\
SWIGINTERN Py_ssize_t					\
wrapper##_lenfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_lenfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_ssize_t
SwigPyBuiltin_lenfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *resultobj;
  Py_ssize_t result;
  resultobj = wrapper(a, NULL);
  result = PyNumber_AsSsize_t(resultobj, NULL);
  SWIG_Py_DECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZESSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *								\
wrapper##_ssizessizeargfunc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c) {	\
  return SwigPyBuiltin_ssizessizeargfunc_closure(wrapper, a, b, c);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizessizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_SSIZESSIZEOBJARGPROC_CLOSURE(wrapper)						\
SWIGINTERN int											\
wrapper##_ssizessizeobjargproc_closure(PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {	\
  return SwigPyBuiltin_ssizessizeobjargproc_closure(wrapper, a, b, c, d);			\
}
SWIGINTERN int
SwigPyBuiltin_ssizessizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, Py_ssize_t c, PyObject *d) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(d ? 3 : 2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  PyTuple_SET_ITEM(tuple, 1, _PyLong_FromSsize_t(c));
  if (d) {
    SWIG_Py_INCREF(d);
    PyTuple_SET_ITEM(tuple, 2, d);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  SWIG_Py_DECREF(tuple);
  SWIG_Py_XDECREF(resultobj);
  return result;
}

#define SWIGPY_SSIZEARGFUNC_CLOSURE(wrapper)				\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_funpack_ssizeargfunc_closure(wrapper, a, b);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_funpack_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *tuple, *result;
  tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  result = wrapper(a, tuple);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_SSIZEARGFUNC_CLOSURE(wrapper)			\
SWIGINTERN PyObject *							\
wrapper##_ssizeargfunc_closure(PyObject *a, Py_ssize_t b) {		\
  return SwigPyBuiltin_ssizeargfunc_closure(wrapper, a, b);		\
}
SWIGINTERN PyObject *
SwigPyBuiltin_ssizeargfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b) {
  PyObject *arg, *result;
  arg = _PyLong_FromSsize_t(b);
  result = wrapper(a, arg);
  SWIG_Py_DECREF(arg);
  return result;
}

#define SWIGPY_SSIZEOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_ssizeobjargproc_closure(PyObject *a, Py_ssize_t b, PyObject *c) {	\
  return SwigPyBuiltin_ssizeobjargproc_closure(wrapper, a, b, c);		\
}
SWIGINTERN int
SwigPyBuiltin_ssizeobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, Py_ssize_t b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(2);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, _PyLong_FromSsize_t(b));
  if (c) {
    SWIG_Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  SWIG_Py_XDECREF(resultobj);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int							\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {	\
  return SwigPyBuiltin_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  PyObject *tuple;
  tuple = PyTuple_New(1);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  pyresult = wrapper(a, tuple);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  SWIG_Py_XDECREF(pyresult);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_FUNPACK_OBJOBJPROC_CLOSURE(wrapper)			\
SWIGINTERN int								\
wrapper##_objobjproc_closure(PyObject *a, PyObject *b) {		\
  return SwigPyBuiltin_funpack_objobjproc_closure(wrapper, a, b);	\
}
SWIGINTERN int
SwigPyBuiltin_funpack_objobjproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b) {
  int result;
  PyObject *pyresult;
  pyresult = wrapper(a, b);
  result = pyresult ? (PyObject_IsTrue(pyresult) ? 1 : 0) : -1;
  SWIG_Py_XDECREF(pyresult);
  return result;
}

#define SWIGPY_OBJOBJARGPROC_CLOSURE(wrapper)					\
SWIGINTERN int									\
wrapper##_objobjargproc_closure(PyObject *a, PyObject *b, PyObject *c) {	\
  return SwigPyBuiltin_objobjargproc_closure(wrapper, a, b, c);			\
}
SWIGINTERN int
SwigPyBuiltin_objobjargproc_closure(SwigPyWrapperFunction wrapper, PyObject *a, PyObject *b, PyObject *c) {
  PyObject *tuple, *resultobj;
  int result;
  tuple = PyTuple_New(c ? 2 : 1);
  assert(tuple);
  SWIG_Py_INCREF(b);
  PyTuple_SET_ITEM(tuple, 0, b);
  if (c) {
    SWIG_Py_INCREF(c);
    PyTuple_SET_ITEM(tuple, 1, c);
  }
  resultobj = wrapper(a, tuple);
  result = resultobj ? 0 : -1;
  SWIG_Py_XDECREF(resultobj);
  SWIG_Py_DECREF(tuple);
  return result;
}

#define SWIGPY_REPRFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_reprfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_reprfunc_closure(wrapper, a);	\
}
SWIGINTERN PyObject *
SwigPyBuiltin_reprfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

#define SWIGPY_HASHFUNC_CLOSURE(wrapper)		\
SWIGINTERN Py_hash_t					\
wrapper##_hashfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_hashfunc_closure(wrapper, a);	\
}
SWIGINTERN Py_hash_t
SwigPyBuiltin_hashfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  PyObject *pyresult;
  Py_hash_t result;
  pyresult = wrapper(a, NULL);
  if (!pyresult)
    return -1;
  result = SWIG_PyNumber_AsPyHash(pyresult);
  SWIG_Py_DECREF(pyresult);
  return result;
}

#define SWIGPY_ITERNEXTFUNC_CLOSURE(wrapper)		\
SWIGINTERN PyObject *					\
wrapper##_iternextfunc_closure(PyObject *a) {		\
  return SwigPyBuiltin_iternextfunc_closure(wrapper, a);\
}
SWIGINTERN PyObject *
SwigPyBuiltin_iternextfunc_closure(SwigPyWrapperFunction wrapper, PyObject *a) {
  return wrapper(a, NULL);
}

/* End of callback function macros for use in PyTypeObject */

#ifdef __cplusplus
}
#endif




#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) do { if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } } while (0) 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Exiv2__AsciiValue swig_types[0]
#define SWIGTYPE_p_Exiv2__CommentValue swig_types[1]
#define SWIGTYPE_p_Exiv2__DataBuf swig_types[2]
#define SWIGTYPE_p_Exiv2__DataValue swig_types[3]
#define SWIGTYPE_p_Exiv2__DateValue swig_types[4]
#define SWIGTYPE_p_Exiv2__DateValue__Date swig_types[5]
#define SWIGTYPE_p_Exiv2__ExifData swig_types[6]
#define SWIGTYPE_p_Exiv2__ExifKey swig_types[7]
#define SWIGTYPE_p_Exiv2__ExifThumb swig_types[8]
#define SWIGTYPE_p_Exiv2__ExifThumbC swig_types[9]
#define SWIGTYPE_p_Exiv2__Exifdatum swig_types[10]
#define SWIGTYPE_p_Exiv2__GroupInfo swig_types[11]
#define SWIGTYPE_p_Exiv2__Key swig_types[12]
#define SWIGTYPE_p_Exiv2__LangAltValue swig_types[13]
#define SWIGTYPE_p_Exiv2__Metadatum swig_types[14]
#define SWIGTYPE_p_Exiv2__StringValue swig_types[15]
#define SWIGTYPE_p_Exiv2__StringValueBase swig_types[16]
#define SWIGTYPE_p_Exiv2__TagInfo swig_types[17]
#define SWIGTYPE_p_Exiv2__TimeValue swig_types[18]
#define SWIGTYPE_p_Exiv2__TimeValue__Time swig_types[19]
#define SWIGTYPE_p_Exiv2__Value swig_types[20]
#define SWIGTYPE_p_Exiv2__ValueTypeT_double_t swig_types[21]
#define SWIGTYPE_p_Exiv2__ValueTypeT_float_t swig_types[22]
#define SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t swig_types[23]
#define SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t swig_types[24]
#define SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t swig_types[25]
#define SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t swig_types[26]
#define SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t swig_types[27]
#define SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t swig_types[28]
#define SWIGTYPE_p_Exiv2__XmpArrayValue swig_types[29]
#define SWIGTYPE_p_Exiv2__XmpTextValue swig_types[30]
#define SWIGTYPE_p_Exiv2__XmpValue swig_types[31]
#define SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t swig_types[32]
#define SWIGTYPE_p_MetadataIteratorT_Exiv2__IptcData__iterator_Exiv2__Iptcdatum_t swig_types[33]
#define SWIGTYPE_p_MetadataIteratorT_Exiv2__XmpData__iterator_Exiv2__Xmpdatum_t swig_types[34]
#define SWIGTYPE_p_MetadatumPointerBase swig_types[35]
#define SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t swig_types[36]
#define SWIGTYPE_p_MetadatumPointerT_Exiv2__Iptcdatum_t swig_types[37]
#define SWIGTYPE_p_MetadatumPointerT_Exiv2__Xmpdatum_t swig_types[38]
#define SWIGTYPE_p_MetadatumReferenceT_Exiv2__Exifdatum_t swig_types[39]
#define SWIGTYPE_p_MetadatumReferenceT_Exiv2__Iptcdatum_t swig_types[40]
#define SWIGTYPE_p_MetadatumReferenceT_Exiv2__Xmpdatum_t swig_types[41]
#define SWIGTYPE_p_SwigPyObject swig_types[42]
#define SWIGTYPE_p_ValueType swig_types[43]
#define SWIGTYPE_p__TagListFct swig_types[44]
#define SWIGTYPE_p_allocator_type swig_types[45]
#define SWIGTYPE_p_char swig_types[46]
#define SWIGTYPE_p_const_iterator swig_types[47]
#define SWIGTYPE_p_difference_type swig_types[48]
#define SWIGTYPE_p_first_type swig_types[49]
#define SWIGTYPE_p_int swig_types[50]
#define SWIGTYPE_p_iterator swig_types[51]
#define SWIGTYPE_p_key_type swig_types[52]
#define SWIGTYPE_p_long_long swig_types[53]
#define SWIGTYPE_p_mapped_type swig_types[54]
#define SWIGTYPE_p_second_type swig_types[55]
#define SWIGTYPE_p_short swig_types[56]
#define SWIGTYPE_p_signed_char swig_types[57]
#define SWIGTYPE_p_size_type swig_types[58]
#define SWIGTYPE_p_std__listT_Exiv2__Exifdatum_t swig_types[59]
#define SWIGTYPE_p_std__listT_Exiv2__Exifdatum_t__iterator swig_types[60]
#define SWIGTYPE_p_std__ostream swig_types[61]
#define SWIGTYPE_p_std__pairT_int32_t_int32_t_t swig_types[62]
#define SWIGTYPE_p_std__pairT_uint32_t_uint32_t_t swig_types[63]
#define SWIGTYPE_p_unsigned_char swig_types[64]
#define SWIGTYPE_p_unsigned_int swig_types[65]
#define SWIGTYPE_p_unsigned_long_long swig_types[66]
#define SWIGTYPE_p_unsigned_short swig_types[67]
#define SWIGTYPE_p_value_type swig_types[68]
static swig_type_info *swig_types[70];
static swig_module_info swig_module = {swig_types, 69, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _exif.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__exif

#else
#  define SWIG_init    init_exif

#endif

#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        SWIG_Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XINCREF(item._obj);
      SWIG_Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      SWIG_Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      SWIG_Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <stddef.h>


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static swig_type_info* info = 0;
  if (!info) {
    info = SWIG_TypeQuery("_p_char");
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include "exiv2/exiv2.hpp"
#include "metadatum_pointer.hpp"


#define INIT_ERROR_RETURN NULL


#include <stdint.h>		// Use the C99 official header


#include <string>


static PyObject* import_from_python(const char* package, const char* name) {
    PyObject* mod = PyImport_ImportModule(package);
    if (!mod)
        return NULL;
    PyObject* result = PyObject_GetAttrString(mod, name);
    Py_DECREF(mod);
    return result;
};


static PyObject* Python_Exiv2_Exiv2Error = NULL;


static PyObject* py_from_enum(PyObject* enum_typeobject, long value) {
    PyObject* py_int = PyLong_FromLong(value);
    if (!py_int)
        return NULL;
    PyObject* result = PyObject_CallFunctionObjArgs(
        enum_typeobject, py_int, NULL);
    if (!result && PyErr_ExceptionMatches(PyExc_ValueError)) {
        // Assume value is not currently in enum, so return int
        PyErr_Clear();
        return py_int;
    }
    Py_DECREF(py_int);
    return result;
};


static PyObject* Python_Exiv2_ErrorCode = NULL;


#ifdef _WIN32
#include <windows.h>

static int _transcode(std::string *str, UINT cp_in, UINT cp_out) {
    if (cp_out == cp_in)
        return 0;
    int size = MultiByteToWideChar(cp_in, 0, &(*str)[0], (int)str->size(),
                                   NULL, 0);
    if (!size)
        return GetLastError();
    std::wstring wide_str;
    wide_str.resize(size);
    if (!MultiByteToWideChar(cp_in, 0, &(*str)[0], (int)str->size(),
                             &wide_str[0], size))
        return GetLastError();
    size = WideCharToMultiByte(cp_out, 0, &wide_str[0], (int)wide_str.size(),
                               NULL, 0, NULL, NULL);
    if (!size)
        return GetLastError();
    str->resize(size);
    if (!WideCharToMultiByte(cp_out, 0, &wide_str[0], (int)wide_str.size(),
                             &(*str)[0], size, NULL, NULL))
        return GetLastError();
    return 0;
};
#endif

static int utf8_to_wcp(std::string *str) {
#ifdef _WIN32
    return _transcode(str, CP_UTF8, GetACP());
#else
    return 0;
#endif
};

static int wcp_to_utf8(std::string *str) {
#ifdef _WIN32
    return _transcode(str, GetACP(), CP_UTF8);
#else
    return 0;
#endif
};


static void _set_python_exception() {
    try {
        throw;
    }
    catch(Exiv2::AnyError const& e) {
        std::string msg = e.what();
        if (wcp_to_utf8(&msg))
            msg = e.what();
        PyObject* args = Py_BuildValue(
            "Ns", py_from_enum(Python_Exiv2_ErrorCode,
            static_cast<long>(e.code())), msg.c_str());
        PyErr_SetObject(Python_Exiv2_Exiv2Error, args);
        Py_DECREF(args);
    }
    /*@SWIG:/usr/local/share/swig/4.3.1/typemaps/exception.swg,59,SWIG_CATCH_STDEXCEPT@*/  /* catching std::exception  */
  catch (std::invalid_argument& e) {
    SWIG_exception_fail(SWIG_ValueError, e.what() );
  } catch (std::domain_error& e) {
    SWIG_exception_fail(SWIG_ValueError, e.what() );
  } catch (std::overflow_error& e) {
    SWIG_exception_fail(SWIG_OverflowError, e.what() );
  } catch (std::out_of_range& e) {
    SWIG_exception_fail(SWIG_IndexError, e.what() );
  } catch (std::length_error& e) {
    SWIG_exception_fail(SWIG_IndexError, e.what() );
  } catch (std::runtime_error& e) {
    SWIG_exception_fail(SWIG_RuntimeError, e.what() );
  } catch (std::exception& e) {
    SWIG_exception_fail(SWIG_SystemError, e.what() );
  }
/*@SWIG@*/
fail:
    return;
};


#if !EXIV2_TEST_VERSION(0, 28, 3)
#define EXV_ENABLE_FILESYSTEM
#endif


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx, cx, rd;
   errno = 0;
   fx = floor(x);
   cx = ceil(x);
   rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than LONG_MAX (not portably calculated easily)
      // Note that double(LONG_MAX) is stored in a double rounded up by one (for 64-bit long)
      // 0x7ffffffffffffc00LL == (int64_t)std::nextafter(double(__uint128_t(LONG_MAX)+1), double(0))
      const double long_max = sizeof(long) == 8 ? 0x7ffffffffffffc00LL : LONG_MAX;
      // No equivalent needed for 64-bit double(LONG_MIN) is exactly LONG_MIN
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, long_max)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_From_unsigned_SS_short  (unsigned short value)
{    
  return SWIG_From_unsigned_SS_long  (value);
}


static PyObject* Python_Exiv2_ByteOrder = NULL;


static PyObject* Python_enum_IntEnum = NULL;


static PyObject* Python_Exiv2_TypeId = NULL;


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


namespace swig {
  template <class Type>
  struct noconst_traits {
    typedef Type noconst_type;
  };

  template <class Type>
  struct noconst_traits<const Type> {
    typedef Type noconst_type;
  };

  /*
    type categories
  */
  struct pointer_category { };
  struct value_category { };

  /*
    General traits that provides type_name and type_info
  */
  template <class Type> struct traits { };

  template <class Type>
  inline const char* type_name() {
    return traits<typename noconst_traits<Type >::noconst_type >::type_name();
  }

  template <class Type> struct traits_info {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  /*
    Partial specialization for pointers (traits_info)
  */
  template <class Type> struct traits_info<Type *> {
    static swig_type_info *type_query(std::string name) {
      name += " *";
      return SWIG_TypeQuery(name.c_str());
    }
    static swig_type_info *type_info() {
      static swig_type_info *info = type_query(type_name<Type>());
      return info;
    }
  };

  template <class Type>
  inline swig_type_info *type_info() {
    return traits_info<Type>::type_info();
  }

  /*
    Partial specialization for pointers (traits)
  */
  template <class Type> struct traits <Type *> {
    typedef pointer_category category;
    static std::string make_ptr_name(const char* name) {
      std::string ptrname = name;
      ptrname += " *";
      return ptrname;
    }
    static const char* type_name() {
      static std::string name = make_ptr_name(swig::type_name<Type>());
      return name.c_str();
    }
  };

  template <class Type, class Category>
  struct traits_as { };

  template <class Type, class Category>
  struct traits_check { };

}


namespace swig {  
  /*
    Traits that provides the from method
  */
  template <class Type> struct traits_from_ptr {
    static PyObject *from(Type *val, int owner = 0) {
      return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
    }
  };

  template <class Type> struct traits_from {
    static PyObject *from(const Type& val) {
      return traits_from_ptr<Type>::from(new Type(val), 1);
    }
  };

  template <class Type> struct traits_from<Type *> {
    static PyObject *from(Type* val) {
      return traits_from_ptr<Type>::from(val, 0);
    }
  };

  template <class Type> struct traits_from<const Type *> {
    static PyObject *from(const Type* val) {
      return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
    }
  };


  template <class Type>
  inline PyObject *from(const Type& val) {
    return traits_from<Type>::from(val);
  }

  template <class Type>
  inline PyObject *from_ptr(Type* val, int owner) {
    return traits_from_ptr<Type>::from(val, owner);
  }

  /*
    Traits that provides the asval/as/check method
  */
  template <class Type>
  struct traits_asptr {   
    static int asptr(PyObject *obj, Type **val) {
      int res = SWIG_ERROR;
      swig_type_info *descriptor = type_info<Type>();
      if (val) {
        Type *p = 0;
        int newmem = 0;
        res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
        if (SWIG_IsOK(res)) {
          if (newmem & SWIG_CAST_NEW_MEMORY) {
            res |= SWIG_NEWOBJMASK;
          }
          *val = p;
        }
      } else {
        res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
      }
      return res;
    }
  }; 

  template <class Type>
  inline int asptr(PyObject *obj, Type **vptr) {
    return traits_asptr<Type>::asptr(obj, vptr);
  }

  template <class Type> 
  struct traits_asval {
    static int asval(PyObject *obj, Type *val) {
      if (val) {
	Type *p = 0;
	int res = traits_asptr<Type>::asptr(obj, &p);
	if (!SWIG_IsOK(res)) return res;	
	if (p) {
	  typedef typename noconst_traits<Type>::noconst_type noconst_type;
	  *(const_cast<noconst_type*>(val)) = *p;
	  if (SWIG_IsNewObj(res)){
	    delete p;
	    res = SWIG_DelNewMask(res);
	  }
	  return res;
	} else {
	  return SWIG_ERROR;
	}
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };

  template <class Type> struct traits_asval<Type*> {
    static int asval(PyObject *obj, Type **val) {
      if (val) {
        typedef typename noconst_traits<Type>::noconst_type noconst_type;
        noconst_type *p = 0;
        int res = traits_asptr<noconst_type>::asptr(obj,  &p);
        if (SWIG_IsOK(res)) {
          *(const_cast<noconst_type**>(val)) = p;
	}
	return res;
      } else {
	return traits_asptr<Type>::asptr(obj, (Type **)(0));
      }
    }
  };
  
  template <class Type>
  inline int asval(PyObject *obj, Type *val) {
    return traits_asval<Type>::asval(obj, val);
  }

  template <class Type> 
  struct traits_as<Type, value_category> {
    static Type as(PyObject *obj) {
      Type v;
      int res = asval(obj, &v);
      if (!obj || !SWIG_IsOK(res)) {
	if (!PyErr_Occurred()) {
	  ::SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
      return v;
    }
  };

  template <class Type> 
  struct traits_as<Type, pointer_category> {
    static Type as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res) && v) {
	if (SWIG_IsNewObj(res)) {
	  Type r(*v);
	  delete v;
	  return r;
	} else {
	  return *v;
	}
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };

  template <class Type> 
  struct traits_as<Type*, pointer_category> {
    static Type* as(PyObject *obj) {
      Type *v = 0;      
      int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
      if (SWIG_IsOK(res)) {
	return v;
      } else {
	if (!PyErr_Occurred()) {
	  SWIG_Error(SWIG_TypeError,  swig::type_name<Type>());
	}
	throw std::invalid_argument("bad type");
      }
    }
  };
    
  template <class Type>
  inline Type as(PyObject *obj) {
    return traits_as<Type, typename traits<Type>::category>::as(obj);
  }

  template <class Type> 
  struct traits_check<Type, value_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type> 
  struct traits_check<Type, pointer_category> {
    static bool check(PyObject *obj) {
      int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
      return SWIG_IsOK(res) ? true : false;
    }
  };

  template <class Type>
  inline bool check(PyObject *obj) {
    return traits_check<Type, typename traits<Type>::category>::check(obj);
  }
}


namespace swig {
  template <> struct traits< int > {
    typedef value_category category;
    static const char* type_name() { return"int"; }
  };
  template <>  struct traits_asval< int > {
    typedef int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_int (obj, val);
    }
  };
  template <>  struct traits_from< int > {
    typedef int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_int  (val);
    }
  };
}


  namespace swig {


















































    template <class T, class U >
    struct traits_asptr<std::pair<T,U> >  {
      typedef std::pair<T,U> value_type;

      static int get_pair(PyObject* first, PyObject* second,
			  std::pair<T,U> **val) 
      {
	if (val) {
	  value_type *vp = (new std::pair<T,U>());
	  T *pfirst = &(vp->first);
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) {
	    delete vp;
	    return res1;
	  }
	  U *psecond = &(vp->second);
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) {
	    delete vp;
	    return res2;
	  }
	  *val = vp;
	  return SWIG_AddNewMask(res1 > res2 ? res1 : res2);
	} else {
	  T *pfirst = 0;
	  int res1 = swig::asval((PyObject*)first, pfirst);
	  if (!SWIG_IsOK(res1)) return res1;
	  U *psecond = 0;
	  int res2 = swig::asval((PyObject*)second, psecond);
	  if (!SWIG_IsOK(res2)) return res2;
	  return res1 > res2 ? res1 : res2;
	}
      }

      static int asptr(PyObject *obj, std::pair<T,U> **val) {
	int res = SWIG_ERROR;
	if (PyTuple_Check(obj)) {
	  if (PyTuple_GET_SIZE(obj) == 2) {
	    res = get_pair(PyTuple_GET_ITEM(obj,0),PyTuple_GET_ITEM(obj,1), val);
	  }
	} else if (PySequence_Check(obj)) {
	  if (PySequence_Size(obj) == 2) {
	    swig::SwigVar_PyObject first = PySequence_GetItem(obj,0);
	    swig::SwigVar_PyObject second = PySequence_GetItem(obj,1);
	    res = get_pair(first, second, val);
	  }
	} else {
	  value_type *p = 0;
	  swig_type_info *descriptor = swig::type_info<value_type>();
	  res = descriptor ? SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0) : SWIG_ERROR;
	  if (SWIG_IsOK(res) && val)  *val = p;
	}
	return res;
      }
    };


    template <class T, class U >
    struct traits_from<std::pair<T,U> >   {
      static PyObject *from(const std::pair<T,U>& val) {
	PyObject* obj = PyTuple_New(2);
	PyTuple_SetItem(obj,0,swig::from(val.first));
	PyTuple_SetItem(obj,1,swig::from(val.second));
	return obj;
      }
    };
  }


SWIGINTERN Py_ssize_t
SwigPython_std_pair_len (PyObject *a)
{
    return 2;
}

SWIGINTERN PyObject*
SwigPython_std_pair_repr (PyObject *o)
{
    PyObject *tuple = PyTuple_New(2);
    assert(tuple);
    PyTuple_SET_ITEM(tuple, 0, PyObject_GetAttrString(o, (char*) "first"));
    PyTuple_SET_ITEM(tuple, 1, PyObject_GetAttrString(o, (char*) "second"));
    PyObject *result = PyObject_Repr(tuple);
    SWIG_Py_DECREF(tuple);
    return result;
}

SWIGINTERN PyObject*
SwigPython_std_pair_getitem (PyObject *a, Py_ssize_t b)
{
    PyObject *result = PyObject_GetAttrString(a, b % 2 ? (char*) "second" : (char*) "first");
    return result;
}

SWIGINTERN int
SwigPython_std_pair_setitem (PyObject *a, Py_ssize_t b, PyObject *c)
{
    int result = PyObject_SetAttrString(a, b % 2 ? (char*) "second" : (char*) "first", c);
    return result;
}




      namespace swig {
	template <>  struct traits<std::pair< int, int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "int" "," "int" " >";
	  }
	};
      }
    


static std::map<Exiv2::TypeId, swig_type_info*> _type_object;
// Function to get swig type for an Exiv2 type id
static swig_type_info* get_type_object(const Exiv2::TypeId type_id) {
    auto ptr = _type_object.find(type_id);
    if (ptr == _type_object.end())
        return SWIGTYPE_p_Exiv2__DataValue;
    return ptr->second;
};


static swig_type_info* get_swig_type(Exiv2::Value* value) {
    Exiv2::TypeId type_id = value->typeId();
    if (type_id == Exiv2::undefined) {
        // value could be a CommentValue
        if (dynamic_cast<Exiv2::CommentValue*>(value))
            return SWIGTYPE_p_Exiv2__CommentValue;
    }
    return get_type_object(type_id);
};



static PyObject* _get_store(PyObject* py_self, bool create) {
    // Return a borrowed reference
    PyObject* dict = NULL;
    if (!PyObject_HasAttrString(py_self, "_private_data_")) {
        if (!create)
            return NULL;
        dict = PyDict_New();
        if (!dict)
            return NULL;
        int error = PyObject_SetAttrString(py_self, "_private_data_", dict);
        Py_DECREF(dict);
        if (error)
            return NULL;
    }
    dict = PyObject_GetAttrString(py_self, "_private_data_");
    Py_DECREF(dict);
    return dict;
};
static int private_store_set(PyObject* py_self, const char* name,
                             PyObject* val) {
    PyObject* dict = _get_store(py_self, true);
    if (!dict)
        return -1;
    return PyDict_SetItemString(dict, name, val);
};
static PyObject* private_store_get(PyObject* py_self, const char* name) {
    // Return a borrowed reference
    PyObject* dict = _get_store(py_self, false);
    if (!dict)
        return NULL;
    return PyDict_GetItemString(dict, name);
};
static int private_store_del(PyObject* py_self, const char* name) {
    PyObject* dict = _get_store(py_self, false);
    if (!dict)
        return 0;
    if (PyDict_GetItemString(dict, name))
        return PyDict_DelItemString(dict, name);
    return 0;
};


static Exiv2::Exifdatum& _getitem_Exiv2_ExifData(Exiv2::ExifData* self, char* key) {
    return (*self)[key];
};


/* Return string from Python obj. NOTE: obj must remain in scope in order
   to use the returned cptr (but only when alloc is set to SWIG_OLDOBJ) */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char **cptr, size_t *psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    PyObject *bytes = NULL;
    int ret = SWIG_OK;
    if (alloc)
      *alloc = SWIG_OLDOBJ;
#if PY_VERSION_HEX>=0x03000000 && defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    cstr = (char *)SWIG_PyUnicode_AsUTF8AndSize(obj, &len, &bytes);
    if (!cstr)
      return SWIG_TypeError;
    /* The returned string is only duplicated if the char * returned is not owned and memory managed by obj */
    if (bytes && cptr) {
      if (alloc) {
        cstr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        *alloc = SWIG_NEWOBJ;
      } else {
        /* alloc must be set in order to clean up allocated memory */
        return SWIG_RuntimeError;
      }
    }
#endif
    if (cptr) *cptr = cstr;
    if (psize) *psize = len + 1;
    SWIG_Py_XDECREF(bytes);
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        SWIG_Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        SWIG_Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





extern "C" {
static PyObject* _wrap__getitem_Exiv2_ExifData(PyObject*, PyObject*);
}
static PyObject* _getitem_Exiv2_ExifData_closure(
        PyObject* self, PyObject* key) {
    PyObject* args = Py_BuildValue("(OO)", self, key);
    PyObject* result = _wrap__getitem_Exiv2_ExifData(self, args);
    Py_DECREF(args);
    return result;
};


static PyObject* set_value_from_py(Exiv2::Exifdatum* datum,
                                   PyObject* py_value) {
    // Get the current (or default if not set) type id of the datum
    Exiv2::TypeId type_id = datum->typeId();
    if (type_id == Exiv2::invalidTypeId)
        type_id = Exiv2::ExifKey(datum->key()).defaultTypeId();
    // Try std::string value
    if (PyUnicode_Check(py_value)) {
        std::string value = PyUnicode_AsUTF8(py_value);
        if (datum->setValue(value) != 0)
            return PyErr_Format(PyExc_ValueError,
                "%s: cannot set type '%s' to value '%s'",
                datum->key().c_str(), Exiv2::TypeInfo::typeName(type_id),
                value.c_str());
        return SWIG_Py_Void();
    }
    // Try Exiv2::Value value
    Exiv2::Value* value = NULL;
    if (SWIG_IsOK(SWIG_ConvertPtr(
            py_value, (void**)&value, SWIGTYPE_p_Exiv2__Value, 0))) {
        datum->setValue(value);
        return SWIG_Py_Void();
    }
    // Try converting Python object to a value
    swig_type_info* ty_info = get_type_object(type_id);
    SwigPyClientData *cl_data = (SwigPyClientData*)ty_info->clientdata;
    // Call type object to invoke constructor
    PyObject* swig_obj = PyObject_CallFunctionObjArgs(
        (PyObject*)cl_data->pytype, py_value, NULL);
    if (!swig_obj)
        return NULL;
    // Convert constructed object to Exiv2::Value
    if (!SWIG_IsOK(SWIG_ConvertPtr(swig_obj, (void**)&value, ty_info, 0))) {
        PyErr_SetString(
            PyExc_RuntimeError, "set_value_from_py: invalid conversion");
        Py_DECREF(swig_obj);
        return NULL;
    }
    // Set value
    datum->setValue(value);
    Py_DECREF(swig_obj);
    return SWIG_Py_Void();
};


static PyObject* _setitem_Exiv2_ExifData(
        Exiv2::ExifData* self, char* key, PyObject* value, PyObject* py_self) {
        return set_value_from_py(&(*self)[key], value);
    return SWIG_Py_Void();
};
static PyObject* _delitem_Exiv2_ExifData(
        Exiv2::ExifData* self, char* key, PyObject* py_self) {
        auto pos = self->findKey(Exiv2::ExifKey(key));
    if (pos == self->end())
        return PyErr_Format(PyExc_KeyError, "'%s'", key);
#if 0x040301 >= 0x040400
    invalidate_pointers(py_self, pos);
#endif
    self->erase(pos);
    return SWIG_Py_Void();
};


extern "C" {
static PyObject* _wrap__setitem_Exiv2_ExifData(PyObject*, PyObject*);
static PyObject* _wrap__delitem_Exiv2_ExifData(PyObject*, PyObject*);
}
static int _setitem_Exiv2_ExifData_closure(
        PyObject* self, PyObject* key, PyObject* value) {
    PyObject* args;
    PyObject* result;
    if (value) {
        args = Py_BuildValue("(OOO)", self, key, value);
        result = _wrap__setitem_Exiv2_ExifData(self, args);
    } else {
        args = Py_BuildValue("(OO)", self, key);
        result = _wrap__delitem_Exiv2_ExifData(self, args);
    }
    Py_DECREF(args);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
};


static int _contains_Exiv2_ExifData(PyObject* py_self, PyObject* py_key) {
    Exiv2::ExifData* self = NULL;
    SWIG_ConvertPtr(py_self, (void**)&self, SWIGTYPE_p_Exiv2__ExifData, 0);
    const char* key = PyUnicode_AsUTF8(py_key);
    if (!key)
        return -1;
    return self->findKey(Exiv2::ExifKey(key)) != self->end() ? 1 : 0;
};

SWIGINTERN bool Exiv2_Exifdatum_operator_Se__Se_(Exiv2::Exifdatum const *self,Exiv2::Exifdatum const &other){
        return &other == self;
    }
SWIGINTERN bool Exiv2_Exifdatum_operator_SN__Se_(Exiv2::Exifdatum const *self,Exiv2::Exifdatum const &other){
        return &other != self;
    }
SWIGINTERN Exiv2::Value::AutoPtr Exiv2_Exifdatum_getValue__SWIG_1(Exiv2::Exifdatum *self,Exiv2::TypeId as_type){
        // deprecated since 2023-12-07
        PyErr_WarnEx(PyExc_DeprecationWarning, "Requested type ignored.", 1);
        return self->getValue();
    }
SWIGINTERN Exiv2::Value const &Exiv2_Exifdatum_value__SWIG_1(Exiv2::Exifdatum *self,Exiv2::TypeId as_type){
        // deprecated since 2023-12-07
        PyErr_WarnEx(PyExc_DeprecationWarning, "Requested type ignored.", 1);
        return self->value();
    }
SWIGINTERN std::string Exiv2_Exifdatum__print(Exiv2::Exifdatum const *self,Exiv2::ExifData const *pMetadata){
        // deprecated since 2024-01-29
        PyErr_WarnEx(PyExc_DeprecationWarning,
                     "'_print' has been replaced by 'print'", 1);
        return self->print(pMetadata);
    }
SWIGINTERN std::string Exiv2_Exifdatum_toString__SWIG_0(Exiv2::Exifdatum const *self){ return self->toString(); }
SWIGINTERN std::string Exiv2_Exifdatum_toString__SWIG_1(Exiv2::Exifdatum const *self,long i){ return self->toString(i); }
SWIGINTERN PyObject *Exiv2_Exifdatum_setValue(Exiv2::Exifdatum *self,PyObject *py_value){
        return set_value_from_py(self, py_value);
    }

SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    PyErr_Clear();
    static swig_type_info *descriptor = SWIG_TypeQuery("std::string" " *");
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      // Largest double not larger than ULONG_MAX (not portably calculated easily)
      // Note that double(ULONG_MAX) is stored in a double rounded up by one (for 64-bit unsigned long)
      // 0xfffffffffffff800ULL == (uint64_t)std::nextafter(double(__uint128_t(ULONG_MAX)+1), double(0))
      const double ulong_max = sizeof(unsigned long) == 8 ? 0xfffffffffffff800ULL : ULONG_MAX;
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ulong_max)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


namespace swig {
  template <> struct traits< unsigned int > {
    typedef value_category category;
    static const char* type_name() { return"unsigned int"; }
  };
  template <>  struct traits_asval< unsigned int > {
    typedef unsigned int value_type;
    static int asval(PyObject *obj, value_type *val) {
      return SWIG_AsVal_unsigned_SS_int (obj, val);
    }
  };
  template <>  struct traits_from< unsigned int > {
    typedef unsigned int value_type;
    static PyObject *from(const value_type& val) {
      return SWIG_From_unsigned_SS_int  (val);
    }
  };
}


      namespace swig {
	template <>  struct traits<std::pair< unsigned int, unsigned int > > {
	  typedef pointer_category category;
	  static const char* type_name() {
	    return "std::pair<" "unsigned int" "," "unsigned int" " >";
	  }
	};
      }
    

SWIGINTERN int
SWIG_AsVal_unsigned_SS_short (PyObject * obj, unsigned short *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > USHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned short >(v);
    }
  }  
  return res;
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_Exifdatum_pointer___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::Exifdatum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer___eq__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer___eq__" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    Exifdatum_pointer* tmp = NULL;
    if (SWIG_IsOK(SWIG_ConvertPtr(
          obj1, (void**)&tmp, SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0)))
    arg2 = **tmp;
    else {
      res10 = SWIG_ConvertPtr(obj1, &argp10, SWIGTYPE_p_Exiv2__Exifdatum,  0 );
      if (!SWIG_IsOK(res10)) {
        SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Exifdatum_pointer___eq__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      if (!argp10) {
        SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "Exifdatum_pointer___eq__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      arg2 = reinterpret_cast< Exiv2::Exifdatum * >(argp10);
    }
  }
  {
    try {
      result = (bool)((MetadatumPointer< Exiv2::Exifdatum > const *)arg1)->operator ==((Exiv2::Exifdatum const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::Exifdatum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer___ne__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer___ne__" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    Exifdatum_pointer* tmp = NULL;
    if (SWIG_IsOK(SWIG_ConvertPtr(
          obj1, (void**)&tmp, SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0)))
    arg2 = **tmp;
    else {
      res10 = SWIG_ConvertPtr(obj1, &argp10, SWIGTYPE_p_Exiv2__Exifdatum,  0 );
      if (!SWIG_IsOK(res10)) {
        SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Exifdatum_pointer___ne__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      if (!argp10) {
        SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "Exifdatum_pointer___ne__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      arg2 = reinterpret_cast< Exiv2::Exifdatum * >(argp10);
    }
  }
  {
    try {
      result = (bool)((MetadatumPointer< Exiv2::Exifdatum > const *)arg1)->operator !=((Exiv2::Exifdatum const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer___deref__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::Exifdatum *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer___deref__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer___deref__" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (Exiv2::Exifdatum *)((MetadatumPointer< Exiv2::Exifdatum > const *)arg1)->operator ->();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_setDataArea" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    Py_buffer* buff = NULL;
    _global_view = PyMemoryView_FromObject(obj1);
    if (_global_view)
    buff = PyMemoryView_GET_BUFFER(_global_view);
    else
    PyErr_Clear();
    if (!_global_view || !PyBuffer_IsContiguous(buff, 'A')
      || (buff->shape && buff->itemsize != 1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_pointer_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(*arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_key takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_key" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (*arg1)->key();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_familyName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_familyName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_familyName" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (char *)(*arg1)->familyName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_groupName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_groupName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_groupName" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (*arg1)->groupName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_tagName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_tagName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_tagName" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (*arg1)->tagName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_tagLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_tagLabel takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_tagLabel" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (*arg1)->tagLabel();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_tag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_tag takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_tag" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (uint16_t)(*arg1)->tag();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_ifdName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_ifdName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_ifdName" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (char *)(*arg1)->ifdName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_idx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_idx takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_idx" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (int)(*arg1)->idx();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_buff ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_copy" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    _global_buff.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_buff, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_pointer_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_buff.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "Exifdatum_pointer_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_buff.buf;
  }
  {
    if (!PyObject_IsInstance(obj2, Python_Exiv2_ByteOrder)) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "Exifdatum_pointer_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_pointer_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    PyErr_WarnEx(PyExc_DeprecationWarning, "Python scripts should not need to call ""Exiv2::Exifdatum::copy", 1);
    try {
      result = (long)(*arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_buff.obj) {
    PyBuffer_Release(&_global_buff);
  }
  
  return resultobj;
fail:
  
  if (_global_buff.obj) {
    PyBuffer_Release(&_global_buff);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  std::ostream *arg2 = 0 ;
  Exiv2::ExifData *arg3 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_write", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_write" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  if (obj2) {
    res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Exifdatum_pointer_write" "', argument " "3"" of type '" "Exiv2::ExifData const *""'"); 
    }
    arg3 = reinterpret_cast< Exiv2::ExifData * >(argp3);
  }
  {
    PyErr_WarnEx(PyExc_DeprecationWarning, "Python scripts should not need to call ""Exiv2::Exifdatum::write", 1);
    try {
      result = (std::ostream *) &(*arg1)->write(*arg2,(Exiv2::ExifData const *)arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_typeId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::TypeId result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_typeId takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_typeId" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (Exiv2::TypeId)(*arg1)->typeId();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = py_from_enum(Python_Exiv2_TypeId, static_cast<long>(result));
    if (!resultobj)
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_typeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_typeName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_typeName" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (char *)(*arg1)->typeName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_typeSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_typeSize takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_typeSize" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (long)(*arg1)->typeSize();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_count" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (long)(*arg1)->count();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_size" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (long)(*arg1)->size();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_toLong" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_pointer_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  {
    try {
      result = (long)(*arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_toFloat" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_pointer_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  {
    try {
      result = (float)(*arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_toRational" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_pointer_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  {
    try {
      result = (*arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_getValue__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::Value::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_getValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_getValue" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (*arg1)->getValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    if ((&result)->get()) {
      Exiv2::Value* value = (&result)->release();
      resultobj = SWIG_NewPointerObj(
        value, get_swig_type(value), SWIG_POINTER_OWN);
    }
    else {
      resultobj = SWIG_Py_Void();
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_getValue__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::TypeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Value::AutoPtr result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_getValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_getValue" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    if (!PyObject_IsInstance(obj1, Python_Exiv2_TypeId)) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "Exifdatum_pointer_getValue argument 2 type should be 'Exiv2::TypeId'.", 1);
    }
    if (!PyLong_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_pointer_getValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
      ;
    }
    arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
  }
  {
    try {
      result = Exiv2_Exifdatum_getValue__SWIG_1((Exiv2::Exifdatum*)(arg1)->operator ->(),arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    if ((&result)->get()) {
      Exiv2::Value* value = (&result)->release();
      resultobj = SWIG_NewPointerObj(
        value, get_swig_type(value), SWIG_POINTER_OWN);
    }
    else {
      resultobj = SWIG_Py_Void();
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_getValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_Exifdatum_pointer_getValue__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Exifdatum_pointer_getValue__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Exifdatum_pointer_getValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Exifdatum::getValue() const\n"
    "    Exiv2::Exifdatum::getValue(Exiv2::TypeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_value__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::Value *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_value takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_value" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (Exiv2::Value *) &(*arg1)->value();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_NewPointerObj(result, get_swig_type(result), 0);
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_value__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::TypeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Value *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_value", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_value" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    if (!PyObject_IsInstance(obj1, Python_Exiv2_TypeId)) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "Exifdatum_pointer_value argument 2 type should be 'Exiv2::TypeId'.", 1);
    }
    if (!PyLong_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_pointer_value" "', argument " "2"" of type '" "Exiv2::TypeId""'")
      ;
    }
    arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
  }
  {
    try {
      result = (Exiv2::Value *) &Exiv2_Exifdatum_value__SWIG_1((Exiv2::Exifdatum*)(arg1)->operator ->(),arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_NewPointerObj(result, get_swig_type(result), 0);
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_Exifdatum_pointer_value__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Exifdatum_pointer_value__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Exifdatum_pointer_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Exifdatum::value() const\n"
    "    Exiv2::Exifdatum::value(Exiv2::TypeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_sizeDataArea" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (long)(*arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_dataArea" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (*arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer__print(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::ExifData *arg2 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer__print", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer__print" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  if (obj1) {
    res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Exifdatum_pointer__print" "', argument " "2"" of type '" "Exiv2::ExifData const *""'"); 
    }
    arg2 = reinterpret_cast< Exiv2::ExifData * >(argp2);
  }
  {
    try {
      result = Exiv2_Exifdatum__print((Exiv2::Exifdatum*)(arg1)->operator ->(),(Exiv2::ExifData const *)arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_toString__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_pointer_toString takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_toString" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = Exiv2_Exifdatum_toString__SWIG_0((Exiv2::Exifdatum*)(arg1)->operator ->());
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_toString__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_toString", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_toString" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_pointer_toString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = Exiv2_Exifdatum_toString__SWIG_1((Exiv2::Exifdatum*)(arg1)->operator ->(),arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_toString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_Exifdatum_pointer_toString__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Exifdatum_pointer_toString__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Exifdatum_pointer_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Exifdatum::toString() const\n"
    "    Exiv2::Exifdatum::toString(long) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_setValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_setValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_setValue" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)Exiv2_Exifdatum_setValue((Exiv2::Exifdatum*)(arg1)->operator ->(),arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_pointer_print(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumPointer< Exiv2::Exifdatum > *arg1 = (MetadatumPointer< Exiv2::Exifdatum > *) 0 ;
  Exiv2::ExifData *arg2 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_pointer_print", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_pointer_print" "', argument " "1"" of type '" "MetadatumPointer< Exiv2::Exifdatum > const *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumPointer< Exiv2::Exifdatum > * >(argp1);
  if (obj1) {
    res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Exifdatum_pointer_print" "', argument " "2"" of type '" "Exiv2::ExifData const *""'"); 
    }
    arg2 = reinterpret_cast< Exiv2::ExifData * >(argp2);
  }
  {
    try {
      result = (*arg1)->print((Exiv2::ExifData const *)arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_iterator___iter__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *arg1 = (MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_iterator___iter__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_iterator___iter__" "', argument " "1"" of type '" "MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > * >(argp1);
  result = (MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *)(arg1)->__iter__();
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, 0 |  0 );
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_iterator___next__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *arg1 = (MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::Exifdatum *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_iterator___next__ takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_iterator___next__" "', argument " "1"" of type '" "MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > * >(argp1);
  {
    try {
      result = (Exiv2::Exifdatum *)(arg1)->__next__();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    if (!result) {
      PyErr_SetNone(PyExc_StopIteration);
      SWIG_fail;
    }
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExifData_iterator(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *arg1 = (MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_ExifData_iterator takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExifData_iterator" "', argument " "1"" of type '" "MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_ExifData_iterator___iter__) /* defines _wrap_ExifData_iterator___iter___getiterfunc_closure */

SWIGPY_ITERNEXTFUNC_CLOSURE(_wrap_ExifData_iterator___next__) /* defines _wrap_ExifData_iterator___next___iternextfunc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ExifData_iterator) /* defines _wrap_delete_ExifData_iterator_destructor_closure */

SWIGINTERN PyObject *_wrap_delete_Exifdatum_reference(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  MetadatumReference< Exiv2::Exifdatum > *arg1 = (MetadatumReference< Exiv2::Exifdatum > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Exifdatum_reference takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_MetadatumReferenceT_Exiv2__Exifdatum_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Exifdatum_reference" "', argument " "1"" of type '" "MetadatumReference< Exiv2::Exifdatum > *""'"); 
  }
  arg1 = reinterpret_cast< MetadatumReference< Exiv2::Exifdatum > * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Exifdatum_reference) /* defines _wrap_delete_Exifdatum_reference_destructor_closure */

SWIGINTERN PyObject *_wrap__getitem_Exiv2_ExifData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Exifdatum *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "_getitem_Exiv2_ExifData", 2, 2, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_getitem_Exiv2_ExifData" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_getitem_Exiv2_ExifData" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (Exiv2::Exifdatum *) &_getitem_Exiv2_ExifData(arg1,arg2);
  {
    resultobj = SWIG_NewPointerObj(
      SWIG_as_voidptr(new Exifdatum_reference(result)),
      SWIGTYPE_p_MetadatumReferenceT_Exiv2__Exifdatum_t, SWIG_POINTER_OWN);
    
    
    
    
    
    
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap__setitem_Exiv2_ExifData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  char *arg2 = (char *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  PyObject *arg4 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg3 = NULL;
  }
  {
    arg4 = self;
  }
  if (!PyArg_UnpackTuple(args, "_setitem_Exiv2_ExifData", 2, 3, &obj0, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_setitem_Exiv2_ExifData" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_setitem_Exiv2_ExifData" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  if (obj2) {
    arg3 = obj2;
  }
  {
    try {
      result = (PyObject *)_setitem_Exiv2_ExifData(arg1,arg2,arg3,arg4);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap__delitem_Exiv2_ExifData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  char *arg2 = (char *) 0 ;
  PyObject *arg3 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  {
    arg3 = self;
  }
  if (!PyArg_UnpackTuple(args, "_delitem_Exiv2_ExifData", 2, 2, &obj0, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "_delitem_Exiv2_ExifData" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "_delitem_Exiv2_ExifData" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (PyObject *)_delitem_Exiv2_ExifData(arg1,arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN int _wrap_new_Exifdatum__SWIG_0(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ExifKey *arg1 = 0 ;
  Exiv2::Value *arg2 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Exiv2::Exifdatum *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Exifdatum")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_Exifdatum", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ExifKey,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Exifdatum" "', argument " "1"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_Exifdatum" "', argument " "1"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifKey * >(argp1);
  res2 = SWIG_ConvertPtr(obj2, &argp2,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Exifdatum" "', argument " "2"" of type '" "Exiv2::Value const *""'"); 
  }
  arg2 = reinterpret_cast< Exiv2::Value * >(argp2);
  {
    try {
      result = (Exiv2::Exifdatum *)new Exiv2::Exifdatum((Exiv2::ExifKey const &)*arg1,(Exiv2::Value const *)arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__Exifdatum, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Exifdatum__SWIG_1(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ExifKey *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Exifdatum *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Exifdatum")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_Exifdatum", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ExifKey,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Exifdatum" "', argument " "1"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_Exifdatum" "', argument " "1"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifKey * >(argp1);
  {
    try {
      result = (Exiv2::Exifdatum *)new Exiv2::Exifdatum((Exiv2::ExifKey const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__Exifdatum, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Exifdatum__SWIG_2(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Exifdatum *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Exifdatum")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_Exifdatum", 1, 1, &obj1)) SWIG_fail;
  {
    Exifdatum_pointer* tmp = NULL;
    if (SWIG_IsOK(SWIG_ConvertPtr(
          obj1, (void**)&tmp, SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0)))
    arg1 = **tmp;
    else {
      res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__Exifdatum,  0 );
      if (!SWIG_IsOK(res1)) {
        SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Exifdatum" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      if (!argp1) {
        SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_Exifdatum" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
    }
  }
  {
    try {
      result = (Exiv2::Exifdatum *)new Exiv2::Exifdatum((Exiv2::Exifdatum const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__Exifdatum, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN int _wrap_new_Exifdatum(PyObject *self, PyObject *args, PyObject *kwargs) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_Exifdatum")) SWIG_fail;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v = 0;
    {
      int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_Exiv2__ExifKey, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_new_Exifdatum__SWIG_1(self, args, NULL);
  }
check_1:
  
  if (argc == 1) {
    int retval = _wrap_new_Exifdatum__SWIG_2(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  if (argc == 2) {
    int retval = _wrap_new_Exifdatum__SWIG_0(self, args, NULL);
    if (retval == 0 || !SWIG_Python_TypeErrorOccurred(NULL)) return retval;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Exifdatum'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Exifdatum::Exifdatum(Exiv2::ExifKey const &,Exiv2::Value const *)\n"
    "    Exiv2::Exifdatum::Exifdatum(Exiv2::ExifKey const &)\n"
    "    Exiv2::Exifdatum::Exifdatum(Exiv2::Exifdatum const &)\n");
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_Exifdatum(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_Exifdatum takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Exifdatum" "', argument " "1"" of type '" "Exiv2::Exifdatum *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_setDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_setDataArea", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_setDataArea" "', argument " "1"" of type '" "Exiv2::Exifdatum *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    Py_buffer* buff = NULL;
    _global_view = PyMemoryView_FromObject(obj1);
    if (_global_view)
    buff = PyMemoryView_GET_BUFFER(_global_view);
    else
    PyErr_Clear();
    if (!_global_view || !PyBuffer_IsContiguous(buff, 'A')
      || (buff->shape && buff->itemsize != 1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_setDataArea" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      result = (int)(arg1)->setDataArea((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_key(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_key takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_key" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = ((Exiv2::Exifdatum const *)arg1)->key();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_familyName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_familyName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_familyName" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (char *)((Exiv2::Exifdatum const *)arg1)->familyName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_groupName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_groupName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_groupName" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = ((Exiv2::Exifdatum const *)arg1)->groupName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_tagName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_tagName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_tagName" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = ((Exiv2::Exifdatum const *)arg1)->tagName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_tagLabel(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_tagLabel takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_tagLabel" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = ((Exiv2::Exifdatum const *)arg1)->tagLabel();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_tag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  uint16_t result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_tag takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_tag" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (uint16_t)((Exiv2::Exifdatum const *)arg1)->tag();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_unsigned_SS_short(static_cast< unsigned short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_ifdName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_ifdName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_ifdName" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (char *)((Exiv2::Exifdatum const *)arg1)->ifdName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_idx(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_idx takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_idx" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (int)((Exiv2::Exifdatum const *)arg1)->idx();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  Exiv2::ByteOrder arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Py_buffer _global_buff ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_copy", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_copy" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    _global_buff.obj = NULL;
    if (PyObject_GetBuffer(
        obj1, &_global_buff, PyBUF_CONTIG | PyBUF_WRITABLE) < 0) {
      PyErr_Clear();
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_copy" "', argument " "2"" of type '" "writable bytes-like object""'")
      ;
    }
    // check buffer is large enough, assumes arg1 points to self
    if ((Py_ssize_t) arg1->size() > _global_buff.len) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_ValueError), "in method '" "Exifdatum_copy" "', argument " "2"" of type '" "buffer too small""'")
      ;
    }
    arg2 = (Exiv2::byte *) _global_buff.buf;
  }
  {
    if (!PyObject_IsInstance(obj2, Python_Exiv2_ByteOrder)) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "Exifdatum_copy argument 3 type should be 'Exiv2::ByteOrder'.", 1);
    }
    if (!PyLong_Check(obj2)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_copy" "', argument " "3"" of type '" "Exiv2::ByteOrder""'")
      ;
    }
    arg3 = static_cast< Exiv2::ByteOrder >(PyLong_AsLong(obj2));
  }
  {
    PyErr_WarnEx(PyExc_DeprecationWarning, "Python scripts should not need to call ""Exiv2::Exifdatum::copy", 1);
    try {
      result = (long)((Exiv2::Exifdatum const *)arg1)->copy(arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  
  if (_global_buff.obj) {
    PyBuffer_Release(&_global_buff);
  }
  
  return resultobj;
fail:
  
  if (_global_buff.obj) {
    PyBuffer_Release(&_global_buff);
  }
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_write(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  std::ostream *arg2 = 0 ;
  Exiv2::ExifData *arg3 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_io ;
  std::ostringstream temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::ostream *result = 0 ;
  
  {
    arg3 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_write", 1, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_write" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    arg2 = &temp2;
    _global_io = obj1;
  }
  if (obj2) {
    res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Exifdatum_write" "', argument " "3"" of type '" "Exiv2::ExifData const *""'"); 
    }
    arg3 = reinterpret_cast< Exiv2::ExifData * >(argp3);
  }
  {
    PyErr_WarnEx(PyExc_DeprecationWarning, "Python scripts should not need to call ""Exiv2::Exifdatum::write", 1);
    try {
      result = (std::ostream *) &((Exiv2::Exifdatum const *)arg1)->write(*arg2,(Exiv2::ExifData const *)arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    PyObject* OK = PyObject_CallMethod(_global_io, "write", "(s)",
      static_cast< std::ostringstream* >(result)->str().c_str());
    if (!OK)
    SWIG_fail;
    Py_DECREF(OK);
    Py_INCREF(_global_io);
    resultobj = _global_io;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_typeId(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::TypeId result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_typeId takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_typeId" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (Exiv2::TypeId)((Exiv2::Exifdatum const *)arg1)->typeId();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = py_from_enum(Python_Exiv2_TypeId, static_cast<long>(result));
    if (!resultobj)
    SWIG_fail;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_typeName(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_typeName takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_typeName" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (char *)((Exiv2::Exifdatum const *)arg1)->typeName();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_typeSize(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_typeSize takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_typeSize" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (long)((Exiv2::Exifdatum const *)arg1)->typeSize();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_count" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (long)((Exiv2::Exifdatum const *)arg1)->count();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_size(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_size takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_size" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (long)((Exiv2::Exifdatum const *)arg1)->size();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_toLong(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_toLong", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_toLong" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_toLong" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  {
    try {
      result = (long)((Exiv2::Exifdatum const *)arg1)->toLong(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_toFloat(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  float result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_toFloat", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_toFloat" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_toFloat" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  {
    try {
      result = (float)((Exiv2::Exifdatum const *)arg1)->toFloat(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_toRational(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Rational result;
  
  {
    arg2 = 0;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum_toRational", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_toRational" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  if (obj1) {
    ecode2 = SWIG_AsVal_long(obj1, &val2);
    if (!SWIG_IsOK(ecode2)) {
      SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_toRational" "', argument " "2"" of type '" "long""'");
    } 
    arg2 = static_cast< long >(val2);
  }
  
  if (arg2 < 0 || arg2 >= static_cast< long >(arg1->count())) {
    PyErr_Format(PyExc_IndexError, "index %d out of range", arg2);
    SWIG_fail;
  }
  
  {
    try {
      result = ((Exiv2::Exifdatum const *)arg1)->toRational(arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = swig::from(static_cast< std::pair< int,int > >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_getValue__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::Value::AutoPtr result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_getValue takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_getValue" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = ((Exiv2::Exifdatum const *)arg1)->getValue();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    if ((&result)->get()) {
      Exiv2::Value* value = (&result)->release();
      resultobj = SWIG_NewPointerObj(
        value, get_swig_type(value), SWIG_POINTER_OWN);
    }
    else {
      resultobj = SWIG_Py_Void();
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_value__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::Value *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_value takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_value" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (Exiv2::Value *) &((Exiv2::Exifdatum const *)arg1)->value();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_NewPointerObj(result, get_swig_type(result), 0);
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_sizeDataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_sizeDataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_sizeDataArea" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = (long)((Exiv2::Exifdatum const *)arg1)->sizeDataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_dataArea(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_dataArea takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_dataArea" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = ((Exiv2::Exifdatum const *)arg1)->dataArea();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum___eq__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  Exiv2::Exifdatum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum___eq__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum___eq__" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    Exifdatum_pointer* tmp = NULL;
    if (SWIG_IsOK(SWIG_ConvertPtr(
          obj1, (void**)&tmp, SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0)))
    arg2 = **tmp;
    else {
      res10 = SWIG_ConvertPtr(obj1, &argp10, SWIGTYPE_p_Exiv2__Exifdatum,  0 );
      if (!SWIG_IsOK(res10)) {
        SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Exifdatum___eq__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      if (!argp10) {
        SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "Exifdatum___eq__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      arg2 = reinterpret_cast< Exiv2::Exifdatum * >(argp10);
    }
  }
  {
    try {
      result = (bool)Exiv2_Exifdatum_operator_Se__Se_((Exiv2::Exifdatum const *)arg1,(Exiv2::Exifdatum const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Exifdatum___ne__(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  Exiv2::Exifdatum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum___ne__", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum___ne__" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    Exifdatum_pointer* tmp = NULL;
    if (SWIG_IsOK(SWIG_ConvertPtr(
          obj1, (void**)&tmp, SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0)))
    arg2 = **tmp;
    else {
      res10 = SWIG_ConvertPtr(obj1, &argp10, SWIGTYPE_p_Exiv2__Exifdatum,  0 );
      if (!SWIG_IsOK(res10)) {
        SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "Exifdatum___ne__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      if (!argp10) {
        SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "Exifdatum___ne__" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      arg2 = reinterpret_cast< Exiv2::Exifdatum * >(argp10);
    }
  }
  {
    try {
      result = (bool)Exiv2_Exifdatum_operator_SN__Se_((Exiv2::Exifdatum const *)arg1,(Exiv2::Exifdatum const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  if (PyErr_Occurred() && !PyErr_ExceptionMatches(PyExc_TypeError)) {
    return NULL;
  }
  PyErr_Clear();
  SWIG_Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Exifdatum_getValue__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  Exiv2::TypeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Value::AutoPtr result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_getValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_getValue" "', argument " "1"" of type '" "Exiv2::Exifdatum *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    if (!PyObject_IsInstance(obj1, Python_Exiv2_TypeId)) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "Exifdatum_getValue argument 2 type should be 'Exiv2::TypeId'.", 1);
    }
    if (!PyLong_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_getValue" "', argument " "2"" of type '" "Exiv2::TypeId""'")
      ;
    }
    arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
  }
  {
    try {
      result = Exiv2_Exifdatum_getValue__SWIG_1(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    if ((&result)->get()) {
      Exiv2::Value* value = (&result)->release();
      resultobj = SWIG_NewPointerObj(
        value, get_swig_type(value), SWIG_POINTER_OWN);
    }
    else {
      resultobj = SWIG_Py_Void();
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_getValue(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_Exifdatum_getValue__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Exifdatum_getValue__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Exifdatum_getValue'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Exifdatum::getValue() const\n"
    "    Exiv2::Exifdatum::getValue(Exiv2::TypeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Exifdatum_value__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  Exiv2::TypeId arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::Value *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_value", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_value" "', argument " "1"" of type '" "Exiv2::Exifdatum *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    if (!PyObject_IsInstance(obj1, Python_Exiv2_TypeId)) {
      // deprecated since 2024-01-09
      PyErr_WarnEx(PyExc_DeprecationWarning,
        "Exifdatum_value argument 2 type should be 'Exiv2::TypeId'.", 1);
    }
    if (!PyLong_Check(obj1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "Exifdatum_value" "', argument " "2"" of type '" "Exiv2::TypeId""'")
      ;
    }
    arg2 = static_cast< Exiv2::TypeId >(PyLong_AsLong(obj1));
  }
  {
    try {
      result = (Exiv2::Value *) &Exiv2_Exifdatum_value__SWIG_1(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_NewPointerObj(result, get_swig_type(result), 0);
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_value(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_Exifdatum_value__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Exifdatum_value__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Exifdatum_value'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Exifdatum::value() const\n"
    "    Exiv2::Exifdatum::value(Exiv2::TypeId)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Exifdatum__print(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  Exiv2::ExifData *arg2 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  {
    arg2 = NULL;
  }
  if (!PyArg_UnpackTuple(args, "Exifdatum__print", 0, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum__print" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  if (obj1) {
    res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Exifdatum__print" "', argument " "2"" of type '" "Exiv2::ExifData const *""'"); 
    }
    arg2 = reinterpret_cast< Exiv2::ExifData * >(argp2);
  }
  {
    try {
      result = Exiv2_Exifdatum__print((Exiv2::Exifdatum const *)arg1,(Exiv2::ExifData const *)arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_toString__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::string result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "Exifdatum_toString takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_toString" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  {
    try {
      result = Exiv2_Exifdatum_toString__SWIG_0((Exiv2::Exifdatum const *)arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_toString__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj1 = 0 ;
  std::string result;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_toString", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_toString" "', argument " "1"" of type '" "Exiv2::Exifdatum const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Exifdatum_toString" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    try {
      result = Exiv2_Exifdatum_toString__SWIG_1((Exiv2::Exifdatum const *)arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Exifdatum_toString(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 1) {
    PyObject *retobj = _wrap_Exifdatum_toString__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 2) {
    PyObject *retobj = _wrap_Exifdatum_toString__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Exifdatum_toString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::Exifdatum::toString() const\n"
    "    Exiv2::Exifdatum::toString(long) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Exifdatum_setValue(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::Exifdatum *arg1 = (Exiv2::Exifdatum *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if (!PyArg_UnpackTuple(args, "Exifdatum_setValue", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__Exifdatum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Exifdatum_setValue" "', argument " "1"" of type '" "Exiv2::Exifdatum *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::Exifdatum * >(argp1);
  arg2 = obj1;
  {
    try {
      result = (PyObject *)Exiv2_Exifdatum_setValue(arg1,arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = result;
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_Exifdatum) /* defines _wrap_delete_Exifdatum_destructor_closure */

SWIGINTERN int _wrap_new_ExifThumbC(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ExifThumbC *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ExifThumbC")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ExifThumbC", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ExifData,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExifThumbC" "', argument " "1"" of type '" "Exiv2::ExifData const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_ExifThumbC" "', argument " "1"" of type '" "Exiv2::ExifData const &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  {
    try {
      result = (Exiv2::ExifThumbC *)new Exiv2::ExifThumbC((Exiv2::ExifData const &)*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ExifThumbC, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_ExifThumbC_copy(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumbC *arg1 = (Exiv2::ExifThumbC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  Exiv2::DataBuf result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifThumbC_copy takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumbC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumbC_copy" "', argument " "1"" of type '" "Exiv2::ExifThumbC const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumbC * >(argp1);
  {
    try {
      result = ((Exiv2::ExifThumbC const *)arg1)->copy();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  
  resultobj = SWIG_NewPointerObj(
    new Exiv2::DataBuf(result), SWIGTYPE_p_Exiv2__DataBuf, SWIG_POINTER_OWN);
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifThumbC_writeFile(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumbC *arg1 = (Exiv2::ExifThumbC *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  long result;
  
  if (!PyArg_UnpackTuple(args, "ExifThumbC_writeFile", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumbC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumbC_writeFile" "', argument " "1"" of type '" "Exiv2::ExifThumbC const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumbC * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExifThumbC_writeFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ExifThumbC_writeFile" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
#ifdef _WIN32
    int error = utf8_to_wcp(arg2);
    if (error) {
      PyErr_SetFromWindowsErr(error);
      SWIG_fail;
    }
#endif
  }
  {
    try {
#ifdef EXV_ENABLE_FILESYSTEM
      result = (long)((Exiv2::ExifThumbC const *)arg1)->writeFile((std::string const &)*arg2);
#else
      throw Exiv2::Error(Exiv2::ErrorCode::kerFunctionNotSupported);
#endif
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifThumbC_mimeType(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumbC *arg1 = (Exiv2::ExifThumbC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifThumbC_mimeType takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumbC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumbC_mimeType" "', argument " "1"" of type '" "Exiv2::ExifThumbC const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumbC * >(argp1);
  {
    try {
      result = (char *)((Exiv2::ExifThumbC const *)arg1)->mimeType();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifThumbC_extension(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumbC *arg1 = (Exiv2::ExifThumbC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifThumbC_extension takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumbC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumbC_extension" "', argument " "1"" of type '" "Exiv2::ExifThumbC const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumbC * >(argp1);
  {
    try {
      result = (char *)((Exiv2::ExifThumbC const *)arg1)->extension();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExifThumbC(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumbC *arg1 = (Exiv2::ExifThumbC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_ExifThumbC takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumbC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExifThumbC" "', argument " "1"" of type '" "Exiv2::ExifThumbC *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumbC * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ExifThumbC) /* defines _wrap_delete_ExifThumbC_destructor_closure */

SWIGINTERN int _wrap_new_ExifThumb(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj1 = 0 ;
  Exiv2::ExifThumb *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ExifThumb")) SWIG_fail;
  if (!PyArg_UnpackTuple(args, "new_ExifThumb", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj1, &argp1, SWIGTYPE_p_Exiv2__ExifData,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ExifThumb" "', argument " "1"" of type '" "Exiv2::ExifData &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "new_ExifThumb" "', argument " "1"" of type '" "Exiv2::ExifData &""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  {
    try {
      result = (Exiv2::ExifThumb *)new Exiv2::ExifThumb(*arg1);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ExifThumb, SWIG_BUILTIN_INIT |  0 );
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", args)) {
    SWIG_fail;
  }
  
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_ExifThumb_setJpegThumbnail__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumb *arg1 = (Exiv2::ExifThumb *) 0 ;
  std::string *arg2 = 0 ;
  Exiv2::URational arg3 ;
  Exiv2::URational arg4 ;
  uint16_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  unsigned short val5 ;
  int ecode5 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ExifThumb_setJpegThumbnail", 4, 4, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "1"" of type '" "Exiv2::ExifThumb *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ExifThumb_setJpegThumbnail" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::pair< unsigned int,unsigned int > *ptr = (std::pair< unsigned int,unsigned int > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "3"" of type '" "Exiv2::URational""'"); 
    }
    arg3 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::pair< unsigned int,unsigned int > *ptr = (std::pair< unsigned int,unsigned int > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "4"" of type '" "Exiv2::URational""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode5 = SWIG_AsVal_unsigned_SS_short(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "5"" of type '" "uint16_t""'");
  } 
  arg5 = static_cast< uint16_t >(val5);
  {
#ifdef _WIN32
    int error = utf8_to_wcp(arg2);
    if (error) {
      PyErr_SetFromWindowsErr(error);
      SWIG_fail;
    }
#endif
  }
  {
    try {
#ifdef EXV_ENABLE_FILESYSTEM
      (arg1)->setJpegThumbnail((std::string const &)*arg2,SWIG_STD_MOVE(arg3),SWIG_STD_MOVE(arg4),arg5);
#else
      throw Exiv2::Error(Exiv2::ErrorCode::kerFunctionNotSupported);
#endif
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifThumb_setJpegThumbnail__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumb *arg1 = (Exiv2::ExifThumb *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  Exiv2::URational arg4 ;
  Exiv2::URational arg5 ;
  uint16_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  unsigned short val6 ;
  int ecode6 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ExifThumb_setJpegThumbnail", 4, 4, &obj1, &obj2, &obj3, &obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "1"" of type '" "Exiv2::ExifThumb *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumb * >(argp1);
  {
    Py_buffer* buff = NULL;
    _global_view = PyMemoryView_FromObject(obj1);
    if (_global_view)
    buff = PyMemoryView_GET_BUFFER(_global_view);
    else
    PyErr_Clear();
    if (!_global_view || !PyBuffer_IsContiguous(buff, 'A')
      || (buff->shape && buff->itemsize != 1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    std::pair< unsigned int,unsigned int > *ptr = (std::pair< unsigned int,unsigned int > *)0;
    int res = swig::asptr(obj2, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "4"" of type '" "Exiv2::URational""'"); 
    }
    arg4 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  {
    std::pair< unsigned int,unsigned int > *ptr = (std::pair< unsigned int,unsigned int > *)0;
    int res = swig::asptr(obj3, &ptr);
    if (!SWIG_IsOK(res) || !ptr) {
      SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "5"" of type '" "Exiv2::URational""'"); 
    }
    arg5 = *ptr;
    if (SWIG_IsNewObj(res)) delete ptr;
  }
  ecode6 = SWIG_AsVal_unsigned_SS_short(obj4, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "6"" of type '" "uint16_t""'");
  } 
  arg6 = static_cast< uint16_t >(val6);
  {
    try {
      (arg1)->setJpegThumbnail((Exiv2::byte const *)arg2,arg3,SWIG_STD_MOVE(arg4),SWIG_STD_MOVE(arg5),arg6);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifThumb_setJpegThumbnail__SWIG_2(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumb *arg1 = (Exiv2::ExifThumb *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ExifThumb_setJpegThumbnail", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "1"" of type '" "Exiv2::ExifThumb *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumb * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ExifThumb_setJpegThumbnail" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
#ifdef _WIN32
    int error = utf8_to_wcp(arg2);
    if (error) {
      PyErr_SetFromWindowsErr(error);
      SWIG_fail;
    }
#endif
  }
  {
    try {
#ifdef EXV_ENABLE_FILESYSTEM
      (arg1)->setJpegThumbnail((std::string const &)*arg2);
#else
      throw Exiv2::Error(Exiv2::ErrorCode::kerFunctionNotSupported);
#endif
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifThumb_setJpegThumbnail__SWIG_3(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumb *arg1 = (Exiv2::ExifThumb *) 0 ;
  Exiv2::byte *arg2 = (Exiv2::byte *) 0 ;
  long arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *_global_view = NULL ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ExifThumb_setJpegThumbnail", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "1"" of type '" "Exiv2::ExifThumb *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumb * >(argp1);
  {
    Py_buffer* buff = NULL;
    _global_view = PyMemoryView_FromObject(obj1);
    if (_global_view)
    buff = PyMemoryView_GET_BUFFER(_global_view);
    else
    PyErr_Clear();
    if (!_global_view || !PyBuffer_IsContiguous(buff, 'A')
      || (buff->shape && buff->itemsize != 1)) {
      SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "ExifThumb_setJpegThumbnail" "', argument " "2"" of type '" "bytes-like object""'")
      ;
    }
    arg2 = (Exiv2::byte *) buff->buf;
    arg3 = (long) buff->len;
  }
  {
    try {
      (arg1)->setJpegThumbnail((Exiv2::byte const *)arg2,arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  
  Py_XDECREF(_global_view);
  
  return resultobj;
fail:
  
  Py_XDECREF(_global_view);
  
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifThumb_setJpegThumbnail(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_1;
    return _wrap_ExifThumb_setJpegThumbnail__SWIG_2(self, args);
  }
check_1:
  
  if (argc == 2) {
    PyObject *retobj = _wrap_ExifThumb_setJpegThumbnail__SWIG_3(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 5) {
    int _v = 0;
    {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
    }
    if (!_v) goto check_3;
    PyObject *retobj = _wrap_ExifThumb_setJpegThumbnail__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
check_3:
  
  if (argc == 5) {
    PyObject *retobj = _wrap_ExifThumb_setJpegThumbnail__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExifThumb_setJpegThumbnail'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ExifThumb::setJpegThumbnail(std::string const &,Exiv2::URational,Exiv2::URational,uint16_t)\n"
    "    Exiv2::ExifThumb::setJpegThumbnail(Exiv2::byte const *,long,Exiv2::URational,Exiv2::URational,uint16_t)\n"
    "    Exiv2::ExifThumb::setJpegThumbnail(std::string const &)\n"
    "    Exiv2::ExifThumb::setJpegThumbnail(Exiv2::byte const *,long)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExifThumb_erase(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumb *arg1 = (Exiv2::ExifThumb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifThumb_erase takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumb, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifThumb_erase" "', argument " "1"" of type '" "Exiv2::ExifThumb *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumb * >(argp1);
  {
    try {
      (arg1)->erase();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ExifThumb(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifThumb *arg1 = (Exiv2::ExifThumb *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_ExifThumb takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifThumb, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExifThumb" "', argument " "1"" of type '" "Exiv2::ExifThumb *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifThumb * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ExifThumb) /* defines _wrap_delete_ExifThumb_destructor_closure */

SWIGINTERN PyObject *_wrap_ExifData_add__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  Exiv2::ExifKey *arg2 = 0 ;
  Exiv2::Value *arg3 = (Exiv2::Value *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ExifData_add", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_add" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Exiv2__ExifKey,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExifData_add" "', argument " "2"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ExifData_add" "', argument " "2"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  arg2 = reinterpret_cast< Exiv2::ExifKey * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_Exiv2__Value, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ExifData_add" "', argument " "3"" of type '" "Exiv2::Value const *""'"); 
  }
  arg3 = reinterpret_cast< Exiv2::Value * >(argp3);
  {
    try {
      (arg1)->add((Exiv2::ExifKey const &)*arg2,(Exiv2::Value const *)arg3);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_add__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  Exiv2::Exifdatum *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_UnpackTuple(args, "ExifData_add", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_add" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  {
    Exifdatum_pointer* tmp = NULL;
    if (SWIG_IsOK(SWIG_ConvertPtr(
          obj1, (void**)&tmp, SWIGTYPE_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0)))
    arg2 = **tmp;
    else {
      res10 = SWIG_ConvertPtr(obj1, &argp10, SWIGTYPE_p_Exiv2__Exifdatum,  0 );
      if (!SWIG_IsOK(res10)) {
        SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "ExifData_add" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      if (!argp10) {
        SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ExifData_add" "', argument " "1"" of type '" "Exiv2::Exifdatum &""'"); 
      }
      arg2 = reinterpret_cast< Exiv2::Exifdatum * >(argp10);
    }
  }
  {
    try {
      (arg1)->add((Exiv2::Exifdatum const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_ExifData_add__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ExifData_add__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExifData_add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ExifData::add(Exiv2::ExifKey const &,Exiv2::Value const *)\n"
    "    Exiv2::ExifData::add(Exiv2::Exifdatum const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExifData_erase__SWIG_0(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ExifData_iterator *argp2 = NULL ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > result;
  
  if (!PyArg_UnpackTuple(args, "ExifData_erase", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_erase" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  
  {
    ExifData_iterator* arg2 = NULL;
    res10 = SWIG_ConvertPtr(obj1, &argp10,SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, 0 |  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "ExifData_erase" "', argument " "1"" of type '" "ExifData_iterator *""'"); 
    }
    arg2 = reinterpret_cast< ExifData_iterator * >(argp10);
    argp2 = arg2;
  }
  if (argp2->_invalidated()) {
    SWIG_exception_fail(SWIG_ValueError,
      "in method 'ExifData_erase', argument 2 points to deleted data");
  }
  arg2 = argp2->_ptr();
  
  {
    argp2->_invalidate();
  }
  {
    try {
      result = (arg1)->erase(SWIG_STD_MOVE(arg2));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_NewPointerObj(
      SWIG_as_voidptr(new ExifData_iterator(result, arg1->end())),
      SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, SWIG_POINTER_OWN);
    
    
    
    
    
    
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_erase__SWIG_1(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > arg2 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ExifData_iterator *argp2 = NULL ;
  void *argp10 = 0 ;
  int res10 = 0 ;
  ExifData_iterator *argp3 = NULL ;
  void *argp11 = 0 ;
  int res11 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > result;
  
  if (!PyArg_UnpackTuple(args, "ExifData_erase", 2, 2, &obj1, &obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_erase" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  
  {
    ExifData_iterator* arg2 = NULL;
    res10 = SWIG_ConvertPtr(obj1, &argp10,SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, 0 |  0 );
    if (!SWIG_IsOK(res10)) {
      SWIG_exception_fail(SWIG_ArgError(res10), "in method '" "ExifData_erase" "', argument " "1"" of type '" "ExifData_iterator *""'"); 
    }
    arg2 = reinterpret_cast< ExifData_iterator * >(argp10);
    argp2 = arg2;
  }
  if (argp2->_invalidated()) {
    SWIG_exception_fail(SWIG_ValueError,
      "in method 'ExifData_erase', argument 2 points to deleted data");
  }
  arg2 = argp2->_ptr();
  
  
  {
    ExifData_iterator* arg3 = NULL;
    res11 = SWIG_ConvertPtr(obj2, &argp11,SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, 0 |  0 );
    if (!SWIG_IsOK(res11)) {
      SWIG_exception_fail(SWIG_ArgError(res11), "in method '" "ExifData_erase" "', argument " "1"" of type '" "ExifData_iterator *""'"); 
    }
    arg3 = reinterpret_cast< ExifData_iterator * >(argp11);
    argp3 = arg3;
  }
  if (argp3->_invalidated()) {
    SWIG_exception_fail(SWIG_ValueError,
      "in method 'ExifData_erase', argument 3 points to deleted data");
  }
  arg3 = argp3->_ptr();
  
  {
    argp2->_invalidate();
  }
  {
    try {
      result = (arg1)->erase(SWIG_STD_MOVE(arg2),SWIG_STD_MOVE(arg3));
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_NewPointerObj(
      SWIG_as_voidptr(new ExifData_iterator(result, arg1->end())),
      SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, SWIG_POINTER_OWN);
    
    
    
    
    
    
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_erase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  (void)self;
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = PyObject_Length(args);
  argv[0] = self;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii + 1] = PyTuple_GET_ITEM(args,ii);
  }
  argc++;
  if (argc == 2) {
    PyObject *retobj = _wrap_ExifData_erase__SWIG_0(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  if (argc == 3) {
    PyObject *retobj = _wrap_ExifData_erase__SWIG_1(self, args);
    if (!SWIG_Python_TypeErrorOccurred(retobj)) return retobj;
    SWIG_fail;
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ExifData_erase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    Exiv2::ExifData::erase(Exiv2::ExifData::iterator)\n"
    "    Exiv2::ExifData::erase(Exiv2::ExifData::iterator,Exiv2::ExifData::iterator)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ExifData_clear(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_clear takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_clear" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  (arg1)->clear();
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_sortByKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_sortByKey takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_sortByKey" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  {
    try {
      (arg1)->sortByKey();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_sortByTag(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_sortByTag takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_sortByTag" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  {
    try {
      (arg1)->sortByTag();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_begin(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_begin takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_begin" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  result = (arg1)->begin();
  {
    resultobj = SWIG_NewPointerObj(
      SWIG_as_voidptr(new ExifData_iterator(result, arg1->end())),
      SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, SWIG_POINTER_OWN);
    
    
    
    
    
    
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_end(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_end takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_end" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  result = (arg1)->end();
  {
    resultobj = SWIG_NewPointerObj(
      SWIG_as_voidptr(new ExifData_iterator(result, arg1->end())),
      SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, SWIG_POINTER_OWN);
    
    
    
    
    
    
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_findKey(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  Exiv2::ExifKey *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< std::list< Exiv2::Exifdatum >::iterator > result;
  
  if (!PyArg_UnpackTuple(args, "ExifData_findKey", 1, 1, &obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_findKey" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_Exiv2__ExifKey,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ExifData_findKey" "', argument " "2"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_NullReferenceError, "invalid null reference " "in method '" "ExifData_findKey" "', argument " "2"" of type '" "Exiv2::ExifKey const &""'"); 
  }
  arg2 = reinterpret_cast< Exiv2::ExifKey * >(argp2);
  {
    try {
      result = (arg1)->findKey((Exiv2::ExifKey const &)*arg2);
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  {
    resultobj = SWIG_NewPointerObj(
      SWIG_as_voidptr(new ExifData_iterator(result, arg1->end())),
      SWIGTYPE_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, SWIG_POINTER_OWN);
    
    
    
    
    
    
  }
  
  if (resultobj != Py_None)
  if (private_store_set(resultobj, "refers_to", self)) {
    SWIG_fail;
  }
  
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_empty(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_empty takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_empty" "', argument " "1"" of type '" "Exiv2::ExifData const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  result = (bool)((Exiv2::ExifData const *)arg1)->empty();
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExifData_count(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "ExifData_count takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ExifData_count" "', argument " "1"" of type '" "Exiv2::ExifData const *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  result = (long)((Exiv2::ExifData const *)arg1)->count();
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN int _wrap_new_ExifData(PyObject *self, PyObject *args, PyObject *kwargs) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *result = 0 ;
  
  if (!SWIG_Python_CheckNoKeywords(kwargs, "new_ExifData")) SWIG_fail;
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "new_ExifData takes no arguments");
  {
    try {
      result = (Exiv2::ExifData *)new Exiv2::ExifData();
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_Exiv2__ExifData, SWIG_BUILTIN_INIT |  0 );
  return resultobj == Py_None ? -1 : 0;
fail:
  return -1;
}


SWIGINTERN PyObject *_wrap_delete_ExifData(PyObject *self, PyObject *args) {
  PyObject *resultobj = 0;
  Exiv2::ExifData *arg1 = (Exiv2::ExifData *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (args && PyTuple_Check(args) && PyTuple_GET_SIZE(args) > 0) SWIG_exception_fail(SWIG_TypeError, "delete_ExifData takes no arguments");
  res1 = SWIG_ConvertPtr(self, &argp1,SWIGTYPE_p_Exiv2__ExifData, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ExifData" "', argument " "1"" of type '" "Exiv2::ExifData *""'"); 
  }
  arg1 = reinterpret_cast< Exiv2::ExifData * >(argp1);
  {
    try {
      delete arg1;
    }
    catch(std::exception const& e) {
      _set_python_exception();
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGPY_GETITERFUNC_CLOSURE(_wrap_ExifData_begin) /* defines _wrap_ExifData_begin_getiterfunc_closure */

SWIGPY_LENFUNC_CLOSURE(_wrap_ExifData_count) /* defines _wrap_ExifData_count_lenfunc_closure */

SWIGPY_DESTRUCTOR_CLOSURE(_wrap_delete_ExifData) /* defines _wrap_delete_ExifData_destructor_closure */

static PyMethodDef SwigMethods[] = {
	 { "_getitem_Exiv2_ExifData", _wrap__getitem_Exiv2_ExifData, METH_VARARGS, NULL},
	 { "_setitem_Exiv2_ExifData", _wrap__setitem_Exiv2_ExifData, METH_VARARGS, NULL},
	 { "_delitem_Exiv2_ExifData", _wrap__delitem_Exiv2_ExifData, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static SwigPyGetSet Exifdatum_pointer___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &Exifdatum_pointer___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  switch (op) {
    case Py_EQ : result = _wrap_Exifdatum_pointer___eq__(self, tuple); break;
    case Py_NE : result = _wrap_Exifdatum_pointer___ne__(self, tuple); break;
    default : break;
  }
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_methods[] = {
  { "__eq__", _wrap_Exifdatum_pointer___eq__, METH_VARARGS, "" },
  { "__ne__", _wrap_Exifdatum_pointer___ne__, METH_VARARGS, "" },
  { "__deref__", _wrap_Exifdatum_pointer___deref__, METH_VARARGS, "\n"
		"\n"
		"Return the :class:`Exifdatum` object being pointed to.\n"
		"" },
  { "setDataArea", _wrap_Exifdatum_pointer_setDataArea, METH_VARARGS, "\n"
		"Set the data area by copying (cloning) the buffer pointed to\n"
		"       by *buf*.\n"
		"\n"
		"Values may have a data area, which can contain additional\n"
		"information besides the actual value. This method is used to set such\n"
		"a data area.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the source data area\n"
		":type len: int\n"
		":param len: Size of the data area\n"
		":rtype: int\n"
		":return: Return -1 if the %Exifdatum does not have a value yet or the\n"
		"            value has no data area, else 0.\n"
		"" },
  { "key", _wrap_Exifdatum_pointer_key, METH_VARARGS, "Return the key of the %Exifdatum." },
  { "familyName", _wrap_Exifdatum_pointer_familyName, METH_VARARGS, "" },
  { "groupName", _wrap_Exifdatum_pointer_groupName, METH_VARARGS, "" },
  { "tagName", _wrap_Exifdatum_pointer_tagName, METH_VARARGS, "" },
  { "tagLabel", _wrap_Exifdatum_pointer_tagLabel, METH_VARARGS, "" },
  { "tag", _wrap_Exifdatum_pointer_tag, METH_VARARGS, "" },
  { "ifdName", _wrap_Exifdatum_pointer_ifdName, METH_VARARGS, "Return the name of the IFD" },
  { "idx", _wrap_Exifdatum_pointer_idx, METH_VARARGS, "Return the index (unique id of this key within the original IFD)" },
  { "copy", _wrap_Exifdatum_pointer_copy, METH_VARARGS, "\n"
		"Write value to a data buffer and return the number\n"
		"       of bytes written.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`\n"
		":param byteOrder: Applicable byte order (little or big endian).\n"
		":rtype: int\n"
		":return: Number of characters written.\n"
		"" },
  { "write", _wrap_Exifdatum_pointer_write, METH_VARARGS, "" },
  { "typeId", _wrap_Exifdatum_pointer_typeId, METH_VARARGS, "Return the type id of the value" },
  { "typeName", _wrap_Exifdatum_pointer_typeName, METH_VARARGS, "Return the name of the type" },
  { "typeSize", _wrap_Exifdatum_pointer_typeSize, METH_VARARGS, "Return the size in bytes of one component of this type" },
  { "count", _wrap_Exifdatum_pointer_count, METH_VARARGS, "Return the number of components in the value" },
  { "size", _wrap_Exifdatum_pointer_size, METH_VARARGS, "Return the size of the value in bytes" },
  { "toLong", _wrap_Exifdatum_pointer_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_Exifdatum_pointer_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_Exifdatum_pointer_toRational, METH_VARARGS, "" },
  { "getValue", _wrap_Exifdatum_pointer_getValue, METH_VARARGS, "" },
  { "value", _wrap_Exifdatum_pointer_value, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_Exifdatum_pointer_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_Exifdatum_pointer_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area of the value. The caller owns\n"
		"       this copy and %DataBuf ensures that it will be deleted.\n"
		"\n"
		"Values may have a data area, which can contain additional\n"
		"information besides the actual value. This method is used to access\n"
		"such a data area.\n"
		"\n"
		":rtype: :py:class:`DataBuf`\n"
		":return: A %DataBuf containing a copy of the data area or an empty\n"
		"            %DataBuf if the value does not have a data area assigned or the\n"
		"            value is not set.\n"
		"" },
  { "_print", _wrap_Exifdatum_pointer__print, METH_VARARGS, "" },
  { "toString", _wrap_Exifdatum_pointer_toString, METH_VARARGS, "" },
  { "setValue", _wrap_Exifdatum_pointer_setValue, METH_VARARGS, "" },
  { "print", _wrap_Exifdatum_pointer_print, METH_VARARGS, "\n"
		"Write the interpreted value to a string.\n"
		"\n"
		"Implemented in terms of write(), see there.\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.exif.Exifdatum_pointer",         /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    SwigPyBuiltin_BadDealloc,               /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Base class for pointers to :class:`Exifdatum` objects.\n"
		"\n"
		":class:`ExifData_iterator` objects and :class:`Exifdatum_reference`\n"
		"objects both store references to an :class:`Exifdatum`. This base class\n"
		"gives them access to most of the ``Exifdatum`` methods.\n"
		"``Exifdatum_pointer`` objects can be used anywhere an ``Exifdatum`` object\n"
		"is expected.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Exifdatum_pointer'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)SwigPyBuiltin_BadInit },
    { Py_tp_dealloc,                    (void *)SwigPyBuiltin_BadDealloc },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Base class for pointers to :class:`Exifdatum` objects.\n"
		"\n"
		":class:`ExifData_iterator` objects and :class:`Exifdatum_reference`\n"
		"objects both store references to an :class:`Exifdatum`. This base class\n"
		"gives them access to most of the ``Exifdatum`` methods.\n"
		"``Exifdatum_pointer`` objects can be used anywhere an ``Exifdatum`` object\n"
		"is expected.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.exif.Exifdatum_pointer",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet ExifData_iterator___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &ExifData_iterator___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  switch (op) {
    case Py_EQ : result = _wrap_Exifdatum_pointer___eq__(self, tuple); break;
    case Py_NE : result = _wrap_Exifdatum_pointer___ne__(self, tuple); break;
    default : break;
  }
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_methods[] = {
  { "__iter__", _wrap_ExifData_iterator___iter__, METH_VARARGS, "" },
  { "__next__", _wrap_ExifData_iterator___next__, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.exif.ExifData_iterator",         /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_ExifData_iterator_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "Python wrapper for an :class:`ExifData` iterator.", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    _wrap_ExifData_iterator___iter___getiterfunc_closure, /* tp_iter */
    _wrap_ExifData_iterator___next___iternextfunc_closure, /* tp_iternext */
    SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ExifData_iterator'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)SwigPyBuiltin_BadInit },
    { Py_tp_dealloc,                    (void *)_wrap_delete_ExifData_iterator_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"Python wrapper for an :class:`ExifData` iterator." },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)_wrap_ExifData_iterator___iter___getiterfunc_closure },
    { Py_tp_iternext,                   (void *)_wrap_ExifData_iterator___next___iternextfunc_closure },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.exif.ExifData_iterator",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet Exifdatum_reference___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &Exifdatum_reference___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  switch (op) {
    case Py_EQ : result = _wrap_Exifdatum_pointer___eq__(self, tuple); break;
    case Py_NE : result = _wrap_Exifdatum_pointer___ne__(self, tuple); break;
    default : break;
  }
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_methods[] = {
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.exif.Exifdatum_reference",       /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_Exifdatum_reference_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "Python wrapper for an :class:`Exifdatum` reference.", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    SwigPyBuiltin_BadInit,                  /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Exifdatum_reference'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)SwigPyBuiltin_BadInit },
    { Py_tp_dealloc,                    (void *)_wrap_delete_Exifdatum_reference_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"Python wrapper for an :class:`Exifdatum` reference." },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.exif.Exifdatum_reference",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet Exifdatum___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__Exifdatum_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"", &Exifdatum___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__Exifdatum_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  switch (op) {
    case Py_EQ : result = _wrap_Exifdatum___eq__(self, tuple); break;
    case Py_NE : result = _wrap_Exifdatum___ne__(self, tuple); break;
    default : break;
  }
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__Exifdatum_methods[] = {
  { "setDataArea", _wrap_Exifdatum_setDataArea, METH_VARARGS, "\n"
		"Set the data area by copying (cloning) the buffer pointed to\n"
		"       by *buf*.\n"
		"\n"
		"Values may have a data area, which can contain additional\n"
		"information besides the actual value. This method is used to set such\n"
		"a data area.\n"
		"\n"
		":type buf: :py:term:`bytes-like object`\n"
		":param buf: Pointer to the source data area\n"
		":type len: int\n"
		":param len: Size of the data area\n"
		":rtype: int\n"
		":return: Return -1 if the %Exifdatum does not have a value yet or the\n"
		"            value has no data area, else 0.\n"
		"" },
  { "key", _wrap_Exifdatum_key, METH_VARARGS, "Return the key of the %Exifdatum." },
  { "familyName", _wrap_Exifdatum_familyName, METH_VARARGS, "" },
  { "groupName", _wrap_Exifdatum_groupName, METH_VARARGS, "" },
  { "tagName", _wrap_Exifdatum_tagName, METH_VARARGS, "" },
  { "tagLabel", _wrap_Exifdatum_tagLabel, METH_VARARGS, "" },
  { "tag", _wrap_Exifdatum_tag, METH_VARARGS, "" },
  { "ifdName", _wrap_Exifdatum_ifdName, METH_VARARGS, "Return the name of the IFD" },
  { "idx", _wrap_Exifdatum_idx, METH_VARARGS, "Return the index (unique id of this key within the original IFD)" },
  { "copy", _wrap_Exifdatum_copy, METH_VARARGS, "\n"
		"Write value to a data buffer and return the number\n"
		"       of bytes written.\n"
		"\n"
		"The user must ensure that the buffer has enough memory. Otherwise\n"
		"the call results in undefined behaviour.\n"
		"\n"
		":type buf: writeable :py:term:`bytes-like object`\n"
		":param buf: Data buffer to write to.\n"
		":type byteOrder: :py:class:`ByteOrder`\n"
		":param byteOrder: Applicable byte order (little or big endian).\n"
		":rtype: int\n"
		":return: Number of characters written.\n"
		"" },
  { "write", _wrap_Exifdatum_write, METH_VARARGS, "" },
  { "typeId", _wrap_Exifdatum_typeId, METH_VARARGS, "Return the type id of the value" },
  { "typeName", _wrap_Exifdatum_typeName, METH_VARARGS, "Return the name of the type" },
  { "typeSize", _wrap_Exifdatum_typeSize, METH_VARARGS, "Return the size in bytes of one component of this type" },
  { "count", _wrap_Exifdatum_count, METH_VARARGS, "Return the number of components in the value" },
  { "size", _wrap_Exifdatum_size, METH_VARARGS, "Return the size of the value in bytes" },
  { "toLong", _wrap_Exifdatum_toLong, METH_VARARGS, "" },
  { "toFloat", _wrap_Exifdatum_toFloat, METH_VARARGS, "" },
  { "toRational", _wrap_Exifdatum_toRational, METH_VARARGS, "" },
  { "getValue", _wrap_Exifdatum_getValue, METH_VARARGS, "" },
  { "value", _wrap_Exifdatum_value, METH_VARARGS, "" },
  { "sizeDataArea", _wrap_Exifdatum_sizeDataArea, METH_VARARGS, "Return the size of the data area." },
  { "dataArea", _wrap_Exifdatum_dataArea, METH_VARARGS, "\n"
		"Return a copy of the data area of the value. The caller owns\n"
		"       this copy and %DataBuf ensures that it will be deleted.\n"
		"\n"
		"Values may have a data area, which can contain additional\n"
		"information besides the actual value. This method is used to access\n"
		"such a data area.\n"
		"\n"
		":rtype: :py:class:`DataBuf`\n"
		":return: A %DataBuf containing a copy of the data area or an empty\n"
		"            %DataBuf if the value does not have a data area assigned or the\n"
		"            value is not set.\n"
		"" },
  { "__eq__", _wrap_Exifdatum___eq__, METH_VARARGS, "" },
  { "__ne__", _wrap_Exifdatum___ne__, METH_VARARGS, "" },
  { "_print", _wrap_Exifdatum__print, METH_VARARGS, "" },
  { "toString", _wrap_Exifdatum_toString, METH_VARARGS, "" },
  { "setValue", _wrap_Exifdatum_setValue, METH_VARARGS, "" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__Exifdatum_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.exif.Exifdatum",                 /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_Exifdatum_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__Exifdatum_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__Exifdatum_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__Exifdatum_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__Exifdatum_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"An Exif metadatum, consisting of an ExifKey and a Value and\n"
		"       methods to manipulate these.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__Exifdatum_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__Exifdatum_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__Exifdatum_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_Exifdatum,                    /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__Exifdatum_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__Exifdatum_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Exifdatum'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__Exifdatum_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_Exifdatum },
    { Py_tp_dealloc,                    (void *)_wrap_delete_Exifdatum_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"An Exif metadatum, consisting of an ExifKey and a Value and\n"
		"       methods to manipulate these.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__Exifdatum_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__Exifdatum_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__Exifdatum_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.exif.Exifdatum",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__Exifdatum_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet ExifThumbC___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ExifThumbC_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"Constructor.", &ExifThumbC___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ExifThumbC_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ExifThumbC_methods[] = {
  { "copy", _wrap_ExifThumbC_copy, METH_VARARGS, "\n"
		"Return the thumbnail image in a %DataBuf. The caller owns the\n"
		"       data buffer and %DataBuf ensures that it will be deleted.\n"
		"" },
  { "writeFile", _wrap_ExifThumbC_writeFile, METH_VARARGS, "\n"
		"Write the thumbnail image to a file.\n"
		"\n"
		"A filename extension is appended to *path* according to the image\n"
		"type of the thumbnail, so *path* should not include an extension.\n"
		"The function will overwrite an existing file of the same name.\n"
		"\n"
		":type path: str\n"
		":param path: File name of the thumbnail without extension.\n"
		":rtype: int\n"
		":return: The number of bytes written.\n"
		"" },
  { "mimeType", _wrap_ExifThumbC_mimeType, METH_VARARGS, "\n"
		"Return the MIME type of the thumbnail, either ``\"image/tiff\"``\n"
		"       or ``\"image/jpeg\"``.\n"
		"" },
  { "extension", _wrap_ExifThumbC_extension, METH_VARARGS, "\n"
		"Return the file extension for the format of the thumbnail\n"
		"       (\".tif\" or \".jpg\").\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ExifThumbC_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.exif.ExifThumbC",                /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_ExifThumbC_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ExifThumbC_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ExifThumbC_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ExifThumbC_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ExifThumbC_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Access to a Exif %thumbnail image. This class provides higher level\n"
		"       accessors to the thumbnail image that is optionally embedded in IFD1\n"
		"       of the Exif data. These methods do not write to the Exif metadata.\n"
		"       Manipulators are provided in subclass ExifThumb.\n"
		"\n"
		"Notes: Various other preview and thumbnail images may be contained in an\n"
		"      image, depending on its format and the camera make and model. This\n"
		"      class only provides access to the Exif thumbnail as specified in the\n"
		"      Exif standard.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ExifThumbC_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ExifThumbC_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ExifThumbC_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_ExifThumbC,                   /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ExifThumbC_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ExifThumbC_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ExifThumbC'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ExifThumbC_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_ExifThumbC },
    { Py_tp_dealloc,                    (void *)_wrap_delete_ExifThumbC_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Access to a Exif %thumbnail image. This class provides higher level\n"
		"       accessors to the thumbnail image that is optionally embedded in IFD1\n"
		"       of the Exif data. These methods do not write to the Exif metadata.\n"
		"       Manipulators are provided in subclass ExifThumb.\n"
		"\n"
		"Notes: Various other preview and thumbnail images may be contained in an\n"
		"      image, depending on its format and the camera make and model. This\n"
		"      class only provides access to the Exif thumbnail as specified in the\n"
		"      Exif standard.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ExifThumbC_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ExifThumbC_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ExifThumbC_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.exif.ExifThumbC",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ExifThumbC_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet ExifThumb___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ExifThumb_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"Constructor.", &ExifThumb___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ExifThumb_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ExifThumb_methods[] = {
  { "setJpegThumbnail", _wrap_ExifThumb_setJpegThumbnail, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Set the Exif thumbnail to the JPEG image *path*. Set\n"
		"       XResolution, YResolution and ResolutionUnit to *xres*,\n"
		"       *yres* and *unit*, respectively.\n"
		"\n"
		"This results in the minimal thumbnail tags being set for a JPEG\n"
		"thumbnail, as mandated by the Exif standard.\n"
		"\n"
		":raises: Error if reading the file fails.\n"
		"\n"
		"Notes: No checks on the file format or size are performed.\n"
		"Additional existing Exif thumbnail tags are not modified.\n"
		"The JPEG image inserted as thumbnail image should not\n"
		"       itself contain Exif data (or other metadata), as existing\n"
		"       applications may have problems with that. (The preview\n"
		"       application that comes with OS X for one.) - David Harvey.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Set the Exif thumbnail to the JPEG image pointed to by *buf*,\n"
		"       and size *size*. Set XResolution, YResolution and\n"
		"       ResolutionUnit to *xres*, *yres* and *unit*, respectively.\n"
		"\n"
		"This results in the minimal thumbnail tags being set for a JPEG\n"
		"thumbnail, as mandated by the Exif standard.\n"
		"\n"
		":raises: Error if reading the file fails.\n"
		"\n"
		"Notes: No checks on the image format or size are performed.\n"
		"Additional existing Exif thumbnail tags are not modified.\n"
		"The JPEG image inserted as thumbnail image should not\n"
		"       itself contain Exif data (or other metadata), as existing\n"
		"       applications may have problems with that. (The preview\n"
		"       application that comes with OS X for one.) - David Harvey.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 3:*\n"
		"\n"
		"Set the Exif thumbnail to the JPEG image *path*.\n"
		"\n"
		"This sets only the Compression, JPEGInterchangeFormat and\n"
		"JPEGInterchangeFormatLength tags, which is not all the thumbnail\n"
		"Exif information mandatory according to the Exif standard. (But it's\n"
		"enough to work with the thumbnail.)\n"
		"\n"
		":raises: Error if reading the file fails.\n"
		"\n"
		"Notes: No checks on the file format or size are performed.\n"
		"Additional existing Exif thumbnail tags are not modified.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 4:*\n"
		"\n"
		"Set the Exif thumbnail to the JPEG image pointed to by *buf*,\n"
		"       and size *size*.\n"
		"\n"
		"This sets only the Compression, JPEGInterchangeFormat and\n"
		"JPEGInterchangeFormatLength tags, which is not all the thumbnail\n"
		"Exif information mandatory according to the Exif standard. (But it's\n"
		"enough to work with the thumbnail.)\n"
		"\n"
		"Notes: No checks on the image format or size are performed.\n"
		"Additional existing Exif thumbnail tags are not modified.\n"
		"" },
  { "erase", _wrap_ExifThumb_erase, METH_VARARGS, "\n"
		"Delete the thumbnail from the Exif data. Removes all\n"
		"       Exif.%Thumbnail.*, i.e., Exif IFD1 tags.\n"
		"" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ExifThumb_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.exif.ExifThumb",                 /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_ExifThumb_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ExifThumb_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ExifThumb_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ExifThumb_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ExifThumb_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"Access and modify an Exif %thumbnail image. This class implements\n"
		"       manipulators to set and erase the thumbnail image that is optionally\n"
		"       embedded in IFD1 of the Exif data. Accessors are provided by the\n"
		"       base class, ExifThumbC.\n"
		"\n"
		"Notes: Various other preview and thumbnail images may be contained in an\n"
		"      image, depending on its format and the camera make and model. This\n"
		"      class only provides access to the Exif thumbnail as specified in the\n"
		"      Exif standard.\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ExifThumb_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    (getiterfunc) 0,                        /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ExifThumb_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ExifThumb_getset, /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_ExifThumb,                    /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    (lenfunc) 0,                            /* mp_length */
    (binaryfunc) 0,                         /* mp_subscript */
    (objobjargproc) 0,                      /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    (objobjproc) 0,                         /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ExifThumb_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ExifThumb_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ExifThumb'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ExifThumb_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_ExifThumb },
    { Py_tp_dealloc,                    (void *)_wrap_delete_ExifThumb_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"Access and modify an Exif %thumbnail image. This class implements\n"
		"       manipulators to set and erase the thumbnail image that is optionally\n"
		"       embedded in IFD1 of the Exif data. Accessors are provided by the\n"
		"       base class, ExifThumbC.\n"
		"\n"
		"Notes: Various other preview and thumbnail images may be contained in an\n"
		"      image, depending on its format and the camera make and model. This\n"
		"      class only provides access to the Exif thumbnail as specified in the\n"
		"      Exif standard.\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ExifThumb_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ExifThumb_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ExifThumb_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)(lenfunc) 0 },
    { Py_mp_subscript,                  (void *)(binaryfunc) 0 },
    { Py_mp_ass_subscript,              (void *)(objobjargproc) 0 },
    { Py_tp_iter,                       (void *)(getiterfunc) 0 },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)(objobjproc) 0 },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.exif.ExifThumb",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ExifThumb_clientdata = {0, 0, 0, 0, 0, 0, 0};

static SwigPyGetSet ExifData___dict___getset = { SwigPyObject_get___dict__, 0 };
SWIGINTERN PyGetSetDef SwigPyBuiltin__Exiv2__ExifData_getset[] = {
    { (char *)"__dict__", SwigPyBuiltin_GetterClosure, 0, (char *)"\n"
		"*Overload 1:*\n"
		"\n"
		"Add an Exifdatum from the supplied key and value pair.  This\n"
		"       method copies (clones) key and value. No duplicate checks are\n"
		"       performed, i.e., it is possible to add multiple metadata with\n"
		"       the same key.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Add a copy of the *exifdatum* to the Exif metadata.  No\n"
		"       duplicate checks are performed, i.e., it is possible to add\n"
		"       multiple metadata with the same key.\n"
		"\n"
		":raises: Error if the makernote cannot be created\n"
		"", &ExifData___dict___getset },
    { NULL, NULL, NULL, NULL, NULL } /* Sentinel */
};

SWIGINTERN PyObject *
SwigPyBuiltin__Exiv2__ExifData_richcompare(PyObject *self, PyObject *other, int op) {
  PyObject *result = NULL;
  PyObject *tuple = PyTuple_New(1);
  assert(tuple);
  PyTuple_SET_ITEM(tuple, 0, other);
  SWIG_Py_XINCREF(other);
  if (!result && !PyErr_Occurred()) {
    if (SwigPyObject_Check(self) && SwigPyObject_Check(other)) {
      result = SwigPyObject_richcompare((SwigPyObject *)self, (SwigPyObject *)other, op);
    } else {
      result = Py_NotImplemented;
      SWIG_Py_INCREF(result);
    }
  }
  SWIG_Py_DECREF(tuple);
  return result;
}

SWIGINTERN PyMethodDef SwigPyBuiltin__Exiv2__ExifData_methods[] = {
  { "add", _wrap_ExifData_add, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Add an Exifdatum from the supplied key and value pair.  This\n"
		"       method copies (clones) key and value. No duplicate checks are\n"
		"       performed, i.e., it is possible to add multiple metadata with\n"
		"       the same key.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Add a copy of the *exifdatum* to the Exif metadata.  No\n"
		"       duplicate checks are performed, i.e., it is possible to add\n"
		"       multiple metadata with the same key.\n"
		"\n"
		":raises: Error if the makernote cannot be created\n"
		"" },
  { "erase", _wrap_ExifData_erase, METH_VARARGS, "\n"
		"*Overload 1:*\n"
		"\n"
		"Delete the Exifdatum at iterator position *pos*, return the\n"
		"       position of the next exifdatum. Note that iterators into\n"
		"       the metadata, including *pos*, are potentially invalidated\n"
		"       by this call.\n"
		"\n"
		"|\n"
		"\n"
		"*Overload 2:*\n"
		"\n"
		"Remove all elements of the range *beg*, *end*, return the\n"
		"       position of the next element. Note that iterators into\n"
		"       the metadata are potentially invalidated by this call.\n"
		"" },
  { "clear", _wrap_ExifData_clear, METH_VARARGS, "\n"
		"Delete all Exifdatum instances resulting in an empty container.\n"
		"       Note that this also removes thumbnails.\n"
		"" },
  { "sortByKey", _wrap_ExifData_sortByKey, METH_VARARGS, "Sort metadata by key" },
  { "sortByTag", _wrap_ExifData_sortByTag, METH_VARARGS, "Sort metadata by tag" },
  { "begin", _wrap_ExifData_begin, METH_VARARGS, "Begin of the metadata" },
  { "end", _wrap_ExifData_end, METH_VARARGS, "End of the metadata" },
  { "findKey", _wrap_ExifData_findKey, METH_VARARGS, "\n"
		"Find the first Exifdatum with the given *key*, return an\n"
		"       iterator to it.\n"
		"" },
  { "empty", _wrap_ExifData_empty, METH_VARARGS, "Return true if there is no Exif metadata" },
  { "count", _wrap_ExifData_count, METH_VARARGS, "Get the number of metadata entries" },
  { NULL, NULL, 0, NULL } /* Sentinel */
};

#ifndef SWIG_HEAPTYPES
static PyHeapTypeObject SwigPyBuiltin__Exiv2__ExifData_type = {
  {
#if PY_VERSION_HEX >= 0x03000000
    PyVarObject_HEAD_INIT(NULL, 0)
#else
    PyObject_HEAD_INIT(NULL)
    0,                                      /* ob_size */
#endif
    "exiv2.exif.ExifData",                  /* tp_name */
    sizeof(SwigPyObject),                   /* tp_basicsize */
    0,                                      /* tp_itemsize */
    _wrap_delete_ExifData_destructor_closure, /* tp_dealloc */
#if PY_VERSION_HEX < 0x030800b4
    (printfunc) 0,                          /* tp_print */
#else
    (Py_ssize_t) 0,                         /* tp_vectorcall_offset */
#endif
    (getattrfunc) 0,                        /* tp_getattr */
    (setattrfunc) 0,                        /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0,                                      /* tp_compare */
#else
    (cmpfunc) 0,                            /* tp_compare */
#endif
    (reprfunc) 0,                           /* tp_repr */
    &SwigPyBuiltin__Exiv2__ExifData_type.as_number, /* tp_as_number */
    &SwigPyBuiltin__Exiv2__ExifData_type.as_sequence, /* tp_as_sequence */
    &SwigPyBuiltin__Exiv2__ExifData_type.as_mapping, /* tp_as_mapping */
    SwigPyObject_hash,                      /* tp_hash */
    (ternaryfunc) 0,                        /* tp_call */
    (reprfunc) 0,                           /* tp_str */
    (getattrofunc) 0,                       /* tp_getattro */
    (setattrofunc) 0,                       /* tp_setattro */
    &SwigPyBuiltin__Exiv2__ExifData_type.as_buffer, /* tp_as_buffer */
#if PY_VERSION_HEX >= 0x03000000
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE, /* tp_flags */
#else
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_CHECKTYPES, /* tp_flags */
#endif
    "\n"
		"A container for Exif data.  This is a top-level class of the %Exiv2\n"
		"       library. The container holds Exifdatum objects.\n"
		"\n"
		"Provide high-level access to the Exif data of an image:\n"
		"- read Exif information from JPEG files\n"
		"- access metadata through keys and standard C++ iterators\n"
		"- add, modify and delete metadata\n"
		"- write Exif data to JPEG files\n"
		"- extract Exif metadata to files, insert from these files\n"
		"- extract and delete Exif thumbnail (JPEG and TIFF thumbnails)\n"
		"", /* tp_doc */
    (traverseproc) 0,                       /* tp_traverse */
    (inquiry) 0,                            /* tp_clear */
    SwigPyBuiltin__Exiv2__ExifData_richcompare, /* tp_richcompare */
    0,                                      /* tp_weaklistoffset */
    _wrap_ExifData_begin_getiterfunc_closure, /* tp_iter */
    (iternextfunc) 0,                       /* tp_iternext */
    SwigPyBuiltin__Exiv2__ExifData_methods, /* tp_methods */
    0,                                      /* tp_members */
    SwigPyBuiltin__Exiv2__ExifData_getset,  /* tp_getset */
    0,                                      /* tp_base */
    0,                                      /* tp_dict */
    (descrgetfunc) 0,                       /* tp_descr_get */
    (descrsetfunc) 0,                       /* tp_descr_set */
    offsetof(SwigPyObject, dict),           /* tp_dictoffset */
    _wrap_new_ExifData,                     /* tp_init */
    (allocfunc) 0,                          /* tp_alloc */
    (newfunc) 0,                            /* tp_new */
    (freefunc) 0,                           /* tp_free */
    (inquiry) 0,                            /* tp_is_gc */
    (PyObject *) 0,                         /* tp_bases */
    (PyObject *) 0,                         /* tp_mro */
    (PyObject *) 0,                         /* tp_cache */
    (PyObject *) 0,                         /* tp_subclasses */
    (PyObject *) 0,                         /* tp_weaklist */
    (destructor) 0,                         /* tp_del */
    (int) 0,                                /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
    (destructor) 0,                         /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
    (vectorcallfunc) 0,                     /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
    0,                                      /* tp_print */
#endif
#if PY_VERSION_HEX >= 0x030c0000
    (unsigned char) 0,                      /* tp_watched */
#endif
#if PY_VERSION_HEX >= 0x030d00a4
    (uint16_t) 0,                           /* tp_versions_used */
#endif
#ifdef COUNT_ALLOCS
    (Py_ssize_t) 0,                         /* tp_allocs */
    (Py_ssize_t) 0,                         /* tp_frees */
    (Py_ssize_t) 0,                         /* tp_maxalloc */
    0,                                      /* tp_prev */
    0,                                      /* tp_next */
#endif
  },
#if PY_VERSION_HEX >= 0x03050000
  {
    (unaryfunc) 0,                          /* am_await */
    (unaryfunc) 0,                          /* am_aiter */
    (unaryfunc) 0,                          /* am_anext */
# if PY_VERSION_HEX >= 0x030a0000
    (sendfunc) 0,                           /* am_send */
# endif
  },
#endif
  {
    (binaryfunc) 0,                         /* nb_add */
    (binaryfunc) 0,                         /* nb_subtract */
    (binaryfunc) 0,                         /* nb_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_divide */
#endif
    (binaryfunc) 0,                         /* nb_remainder */
    (binaryfunc) 0,                         /* nb_divmod */
    (ternaryfunc) 0,                        /* nb_power */
    (unaryfunc) 0,                          /* nb_negative */
    (unaryfunc) 0,                          /* nb_positive */
    (unaryfunc) 0,                          /* nb_absolute */
    (inquiry) 0,                            /* nb_nonzero */
    (unaryfunc) 0,                          /* nb_invert */
    (binaryfunc) 0,                         /* nb_lshift */
    (binaryfunc) 0,                         /* nb_rshift */
    (binaryfunc) 0,                         /* nb_and */
    (binaryfunc) 0,                         /* nb_xor */
    (binaryfunc) 0,                         /* nb_or */
#if PY_VERSION_HEX < 0x03000000
    (coercion) 0,                           /* nb_coerce */
#endif
    (unaryfunc) 0,                          /* nb_int */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* nb_reserved */
#else
    (unaryfunc) 0,                          /* nb_long */
#endif
    (unaryfunc) 0,                          /* nb_float */
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc) 0,                          /* nb_oct */
    (unaryfunc) 0,                          /* nb_hex */
#endif
    (binaryfunc) 0,                         /* nb_inplace_add */
    (binaryfunc) 0,                         /* nb_inplace_subtract */
    (binaryfunc) 0,                         /* nb_inplace_multiply */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc) 0,                         /* nb_inplace_divide */
#endif
    (binaryfunc) 0,                         /* nb_inplace_remainder */
    (ternaryfunc) 0,                        /* nb_inplace_power */
    (binaryfunc) 0,                         /* nb_inplace_lshift */
    (binaryfunc) 0,                         /* nb_inplace_rshift */
    (binaryfunc) 0,                         /* nb_inplace_and */
    (binaryfunc) 0,                         /* nb_inplace_xor */
    (binaryfunc) 0,                         /* nb_inplace_or */
    (binaryfunc) 0,                         /* nb_floor_divide */
    (binaryfunc) 0,                         /* nb_true_divide */
    (binaryfunc) 0,                         /* nb_inplace_floor_divide */
    (binaryfunc) 0,                         /* nb_inplace_true_divide */
    (unaryfunc) 0,                          /* nb_index */
#if PY_VERSION_HEX >= 0x03050000
    (binaryfunc) 0,                         /* nb_matrix_multiply */
    (binaryfunc) 0,                         /* nb_inplace_matrix_multiply */
#endif
  },
  {
    _wrap_ExifData_count_lenfunc_closure,   /* mp_length */
    _getitem_Exiv2_ExifData_closure,        /* mp_subscript */
    _setitem_Exiv2_ExifData_closure,        /* mp_ass_subscript */
  },
  {
    (lenfunc) 0,                            /* sq_length */
    (binaryfunc) 0,                         /* sq_concat */
    (ssizeargfunc) 0,                       /* sq_repeat */
    (ssizeargfunc) 0,                       /* sq_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_slice */
#else
    (ssizessizeargfunc) 0,                  /* sq_slice */
#endif
    (ssizeobjargproc) 0,                    /* sq_ass_item */
#if PY_VERSION_HEX >= 0x03000000
    (void *) 0,                             /* was_sq_ass_slice */
#else
    (ssizessizeobjargproc) 0,               /* sq_ass_slice */
#endif
    _contains_Exiv2_ExifData,               /* sq_contains */
    (binaryfunc) 0,                         /* sq_inplace_concat */
    (ssizeargfunc) 0,                       /* sq_inplace_repeat */
  },
  {
#if PY_VERSION_HEX < 0x03000000
    (readbufferproc) 0,                     /* bf_getreadbuffer */
    (writebufferproc) 0,                    /* bf_getwritebuffer */
    (segcountproc) 0,                       /* bf_getsegcount */
    (charbufferproc) 0,                     /* bf_getcharbuffer */
#endif
    (getbufferproc) 0,                      /* bf_getbuffer */
    (releasebufferproc) 0,                  /* bf_releasebuffer */
  },
    (PyObject *) 0,                         /* ht_name */
    (PyObject *) 0,                         /* ht_slots */
#if PY_VERSION_HEX >= 0x03030000
    (PyObject *) 0,                         /* ht_qualname */
    0,                                      /* ht_cached_keys */
#endif
#if PY_VERSION_HEX >= 0x03090000
    (PyObject *) 0,                         /* ht_module */
#endif
#if PY_VERSION_HEX >= 0x030b0000
    (char *) 0,                             /* _ht_tpname */
  {
    (PyObject *) 0,                         /* getitem */
#if PY_VERSION_HEX >= 0x030c0000
    (uint32_t) 0,                           /* getitem_version */
#endif
#if PY_VERSION_HEX >= 0x030d0000
    (PyObject *) 0,                         /* init */
#endif
  }
#endif
};

static PyTypeObject *SwigPyBuiltin__Exiv2__ExifData_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyObject *tuple_bases;
  PyTypeObject *pytype = (PyTypeObject *)&SwigPyBuiltin__Exiv2__ExifData_type;
  pytype->tp_dict = dict;
  SwigPyBuiltin_SetMetaType(pytype, type);
  pytype->tp_new = PyType_GenericNew;
  tuple_bases = SwigPyBuiltin_InitBases(bases);
  pytype->tp_base = bases[0];
  SWIG_Py_INCREF(pytype->tp_base);
  pytype->tp_bases = tuple_bases;
  if (PyType_Ready(pytype) < 0) {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ExifData'.");
    return NULL;
  }
  return pytype;
}

#else
static PyTypeObject *SwigPyBuiltin__Exiv2__ExifData_type_create(PyTypeObject *type, PyTypeObject **bases, PyObject *dict) {
  PyMemberDef members[] = {
    { (char *)"__dictoffset__", Py_T_PYSSIZET, offsetof(SwigPyObject, dict), Py_READONLY, NULL },
    { NULL, 0, 0, 0, NULL }
  };
  PyType_Slot slots[] = {
    { Py_tp_init,                       (void *)_wrap_new_ExifData },
    { Py_tp_dealloc,                    (void *)_wrap_delete_ExifData_destructor_closure },
    { Py_tp_alloc,                      (void *)(allocfunc) 0 },
    { Py_tp_free,                       (void *)(freefunc) 0 },
    { Py_tp_is_gc,                      (void *)(inquiry) 0 },
    { Py_tp_del,                        (void *)(destructor) 0 },
    { Py_tp_doc,                        (void *)"\n"
		"A container for Exif data.  This is a top-level class of the %Exiv2\n"
		"       library. The container holds Exifdatum objects.\n"
		"\n"
		"Provide high-level access to the Exif data of an image:\n"
		"- read Exif information from JPEG files\n"
		"- access metadata through keys and standard C++ iterators\n"
		"- add, modify and delete metadata\n"
		"- write Exif data to JPEG files\n"
		"- extract Exif metadata to files, insert from these files\n"
		"- extract and delete Exif thumbnail (JPEG and TIFF thumbnails)\n"
		"" },
    { Py_tp_repr,                       (void *)(reprfunc) 0 },
    { Py_tp_str,                        (void *)(reprfunc) 0 },
    { Py_tp_traverse,                   (void *)(traverseproc) 0 },
    { Py_tp_clear,                      (void *)(inquiry) 0 },
    { Py_tp_richcompare,                (void *)SwigPyBuiltin__Exiv2__ExifData_richcompare },
    { Py_tp_methods,                    (void *)SwigPyBuiltin__Exiv2__ExifData_methods },
    { Py_tp_getset,                     (void *)SwigPyBuiltin__Exiv2__ExifData_getset },
    { Py_tp_hash,                       (void *)SwigPyObject_hash },
    { Py_tp_call,                       (void *)(ternaryfunc) 0 },
    { Py_tp_getattro,                   (void *)(getattrofunc) 0 },
    { Py_tp_setattro,                   (void *)(setattrofunc) 0 },
    { Py_tp_descr_get,                  (void *)(descrgetfunc) 0 },
    { Py_tp_descr_set,                  (void *)(descrsetfunc) 0 },
    { Py_mp_length,                     (void *)_wrap_ExifData_count_lenfunc_closure },
    { Py_mp_subscript,                  (void *)_getitem_Exiv2_ExifData_closure },
    { Py_mp_ass_subscript,              (void *)_setitem_Exiv2_ExifData_closure },
    { Py_tp_iter,                       (void *)_wrap_ExifData_begin_getiterfunc_closure },
    { Py_tp_iternext,                   (void *)(iternextfunc) 0 },
    { Py_nb_add,                        (void *)(binaryfunc) 0 },
    { Py_nb_subtract,                   (void *)(binaryfunc) 0 },
    { Py_nb_multiply,                   (void *)(binaryfunc) 0 },
    { Py_nb_remainder,                  (void *)(binaryfunc) 0 },
    { Py_nb_divmod,                     (void *)(binaryfunc) 0 },
    { Py_nb_power,                      (void *)(ternaryfunc) 0 },
    { Py_nb_negative,                   (void *)(unaryfunc) 0 },
    { Py_nb_positive,                   (void *)(unaryfunc) 0 },
    { Py_nb_absolute,                   (void *)(unaryfunc) 0 },
    { Py_nb_bool,                       (void *)(inquiry) 0 },
    { Py_nb_invert,                     (void *)(unaryfunc) 0 },
    { Py_nb_lshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_rshift,                     (void *)(binaryfunc) 0 },
    { Py_nb_and,                        (void *)(binaryfunc) 0 },
    { Py_nb_xor,                        (void *)(binaryfunc) 0 },
    { Py_nb_or,                         (void *)(binaryfunc) 0 },
    { Py_nb_int,                        (void *)(unaryfunc) 0 },
    { Py_nb_float,                      (void *)(unaryfunc) 0 },
    { Py_nb_inplace_add,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_subtract,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_multiply,           (void *)(binaryfunc) 0 },
    { Py_nb_inplace_remainder,          (void *)(binaryfunc) 0 },
    { Py_nb_inplace_power,              (void *)(ternaryfunc) 0 },
    { Py_nb_inplace_lshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_rshift,             (void *)(binaryfunc) 0 },
    { Py_nb_inplace_and,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_xor,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_or,                 (void *)(binaryfunc) 0 },
    { Py_nb_floor_divide,               (void *)(binaryfunc) 0 },
    { Py_nb_true_divide,                (void *)(binaryfunc) 0 },
    { Py_nb_inplace_floor_divide,       (void *)(binaryfunc) 0 },
    { Py_nb_inplace_true_divide,        (void *)(binaryfunc) 0 },
    { Py_nb_index,                      (void *)(unaryfunc) 0 },
    { Py_sq_length,                     (void *)(lenfunc) 0 },
    { Py_sq_concat,                     (void *)(binaryfunc) 0 },
    { Py_sq_repeat,                     (void *)(ssizeargfunc) 0 },
    { Py_sq_item,                       (void *)(ssizeargfunc) 0 },
    { Py_sq_ass_item,                   (void *)(ssizeobjargproc) 0 },
    { Py_sq_contains,                   (void *)_contains_Exiv2_ExifData },
    { Py_sq_inplace_concat,             (void *)(binaryfunc) 0 },
    { Py_sq_inplace_repeat,             (void *)(ssizeargfunc) 0 },
    { Py_tp_members, members },
    { 0, NULL }
  };
  PyType_Spec spec = {
    "exiv2.exif.ExifData",
    sizeof(SwigPyObject),
    0,
    Py_TPFLAGS_DEFAULT|Py_TPFLAGS_BASETYPE,
    slots
  };
  PyObject *tuple_bases = SwigPyBuiltin_InitBases(bases);
  PyTypeObject *pytype = (PyTypeObject*)PyType_FromSpecWithBases(&spec, tuple_bases);
  PyDict_Merge(pytype->tp_dict, dict, 1);
  SwigPyBuiltin_SetMetaType(pytype, type);
  PyType_Modified(pytype);
  Py_DECREF(dict);
  return pytype;
}
#endif
SWIGINTERN SwigPyClientData SwigPyBuiltin__Exiv2__ExifData_clientdata = {0, 0, 0, 0, 0, 0, 0};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Exiv2__ExifThumbTo_p_Exiv2__ExifThumbC(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::ExifThumbC *)  ((Exiv2::ExifThumb *) x));
}
static void *_p_Exiv2__ExifKeyTo_p_Exiv2__Key(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Key *)  ((Exiv2::ExifKey *) x));
}
static void *_p_Exiv2__ExifdatumTo_p_Exiv2__Metadatum(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Metadatum *)  ((Exiv2::Exifdatum *) x));
}
static void *_p_Exiv2__AsciiValueTo_p_Exiv2__StringValueBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::StringValueBase *)  ((Exiv2::AsciiValue *) x));
}
static void *_p_Exiv2__CommentValueTo_p_Exiv2__StringValueBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::StringValueBase *)  ((Exiv2::CommentValue *) x));
}
static void *_p_Exiv2__StringValueTo_p_Exiv2__StringValueBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::StringValueBase *)  ((Exiv2::StringValue *) x));
}
static void *_p_Exiv2__AsciiValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::StringValueBase *) ((Exiv2::AsciiValue *) x));
}
static void *_p_Exiv2__CommentValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::StringValueBase *) ((Exiv2::CommentValue *) x));
}
static void *_p_Exiv2__DataValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::DataValue *) x));
}
static void *_p_Exiv2__DateValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::DateValue *) x));
}
static void *_p_Exiv2__LangAltValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::XmpValue *) ((Exiv2::LangAltValue *) x));
}
static void *_p_Exiv2__StringValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::StringValueBase *) ((Exiv2::StringValue *) x));
}
static void *_p_Exiv2__StringValueBaseTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::StringValueBase *) x));
}
static void *_p_Exiv2__TimeValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::TimeValue *) x));
}
static void *_p_Exiv2__ValueTypeT_double_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< double > *) x));
}
static void *_p_Exiv2__ValueTypeT_float_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< float > *) x));
}
static void *_p_Exiv2__ValueTypeT_int32_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< int > *) x));
}
static void *_p_Exiv2__ValueTypeT_int16_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< short > *) x));
}
static void *_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< std::pair< int32_t,int32_t > > *) x));
}
static void *_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< std::pair< uint32_t,uint32_t > > *) x));
}
static void *_p_Exiv2__ValueTypeT_uint32_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< unsigned int > *) x));
}
static void *_p_Exiv2__ValueTypeT_uint16_t_tTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::ValueType< unsigned short > *) x));
}
static void *_p_Exiv2__XmpArrayValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::XmpValue *) ((Exiv2::XmpArrayValue *) x));
}
static void *_p_Exiv2__XmpTextValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *) (Exiv2::XmpValue *) ((Exiv2::XmpTextValue *) x));
}
static void *_p_Exiv2__XmpValueTo_p_Exiv2__Value(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::Value *)  ((Exiv2::XmpValue *) x));
}
static void *_p_Exiv2__LangAltValueTo_p_Exiv2__XmpValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::XmpValue *)  ((Exiv2::LangAltValue *) x));
}
static void *_p_Exiv2__XmpArrayValueTo_p_Exiv2__XmpValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::XmpValue *)  ((Exiv2::XmpArrayValue *) x));
}
static void *_p_Exiv2__XmpTextValueTo_p_Exiv2__XmpValue(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Exiv2::XmpValue *)  ((Exiv2::XmpTextValue *) x));
}
static void *_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_tTo_p_MetadatumPointerT_Exiv2__Exifdatum_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadatumPointer< Exiv2::Exifdatum > *)  ((MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *) x));
}
static void *_p_MetadatumReferenceT_Exiv2__Exifdatum_tTo_p_MetadatumPointerT_Exiv2__Exifdatum_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadatumPointer< Exiv2::Exifdatum > *)  ((MetadatumReference< Exiv2::Exifdatum > *) x));
}
static void *_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_tTo_p_MetadatumPointerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadatumPointerBase *) (MetadatumPointer< Exiv2::Exifdatum > *) ((MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *) x));
}
static void *_p_MetadatumPointerT_Exiv2__Exifdatum_tTo_p_MetadatumPointerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadatumPointerBase *)  ((MetadatumPointer< Exiv2::Exifdatum > *) x));
}
static void *_p_MetadatumReferenceT_Exiv2__Exifdatum_tTo_p_MetadatumPointerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((MetadatumPointerBase *) (MetadatumPointer< Exiv2::Exifdatum > *) ((MetadatumReference< Exiv2::Exifdatum > *) x));
}
static swig_type_info _swigt__p_Exiv2__AsciiValue = {"_p_Exiv2__AsciiValue", "Exiv2::AsciiValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__CommentValue = {"_p_Exiv2__CommentValue", "Exiv2::CommentValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__DataBuf = {"_p_Exiv2__DataBuf", "Exiv2::DataBuf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__DataValue = {"_p_Exiv2__DataValue", "Exiv2::DataValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__DateValue = {"_p_Exiv2__DateValue", "Exiv2::DateValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__DateValue__Date = {"_p_Exiv2__DateValue__Date", "Exiv2::DateValue::Date *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ExifData = {"_p_Exiv2__ExifData", "Exiv2::ExifData *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ExifData_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ExifKey = {"_p_Exiv2__ExifKey", "Exiv2::ExifKey *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ExifThumb = {"_p_Exiv2__ExifThumb", "Exiv2::ExifThumb *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ExifThumb_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__ExifThumbC = {"_p_Exiv2__ExifThumbC", "Exiv2::ExifThumbC *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__ExifThumbC_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__Exifdatum = {"_p_Exiv2__Exifdatum", "Exiv2::Exifdatum *", 0, 0, (void*)&SwigPyBuiltin__Exiv2__Exifdatum_clientdata, 0};
static swig_type_info _swigt__p_Exiv2__GroupInfo = {"_p_Exiv2__GroupInfo", "Exiv2::GroupInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__Key = {"_p_Exiv2__Key", "Exiv2::Key *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__LangAltValue = {"_p_Exiv2__LangAltValue", "Exiv2::LangAltValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__Metadatum = {"_p_Exiv2__Metadatum", "Exiv2::Metadatum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__StringValue = {"_p_Exiv2__StringValue", "Exiv2::StringValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__StringValueBase = {"_p_Exiv2__StringValueBase", "Exiv2::StringValueBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__TagInfo = {"_p_Exiv2__TagInfo", "Exiv2::TagInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__TimeValue = {"_p_Exiv2__TimeValue", "Exiv2::TimeValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__TimeValue__Time = {"_p_Exiv2__TimeValue__Time", "Exiv2::TimeValue::Time *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__Value = {"_p_Exiv2__Value", "Exiv2::Value *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_double_t = {"_p_Exiv2__ValueTypeT_double_t", "Exiv2::DoubleValue *|Exiv2::ValueType< double > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_float_t = {"_p_Exiv2__ValueTypeT_float_t", "Exiv2::FloatValue *|Exiv2::ValueType< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_int16_t_t = {"_p_Exiv2__ValueTypeT_int16_t_t", "Exiv2::ShortValue *|Exiv2::ValueType< int16_t > *|Exiv2::ValueType< short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_int32_t_t = {"_p_Exiv2__ValueTypeT_int32_t_t", "Exiv2::LongValue *|Exiv2::ValueType< int32_t > *|Exiv2::ValueType< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t = {"_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t", "Exiv2::RationalValue *|Exiv2::ValueType< Exiv2::Rational > *|Exiv2::ValueType< std::pair< int32_t,int32_t > > *|Exiv2::ValueType< std::pair< int,int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t = {"_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t", "Exiv2::URationalValue *|Exiv2::ValueType< Exiv2::URational > *|Exiv2::ValueType< std::pair< uint32_t,uint32_t > > *|Exiv2::ValueType< std::pair< unsigned int,unsigned int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_uint16_t_t = {"_p_Exiv2__ValueTypeT_uint16_t_t", "Exiv2::UShortValue *|Exiv2::ValueType< uint16_t > *|Exiv2::ValueType< unsigned short > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__ValueTypeT_uint32_t_t = {"_p_Exiv2__ValueTypeT_uint32_t_t", "Exiv2::ULongValue *|Exiv2::ValueType< uint32_t > *|Exiv2::ValueType< unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__XmpArrayValue = {"_p_Exiv2__XmpArrayValue", "Exiv2::XmpArrayValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__XmpTextValue = {"_p_Exiv2__XmpTextValue", "Exiv2::XmpTextValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Exiv2__XmpValue = {"_p_Exiv2__XmpValue", "Exiv2::XmpValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t = {"_p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t", "ExifData_iterator *|MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum > *", 0, 0, (void*)&SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_clientdata, 0};
static swig_type_info _swigt__p_MetadataIteratorT_Exiv2__IptcData__iterator_Exiv2__Iptcdatum_t = {"_p_MetadataIteratorT_Exiv2__IptcData__iterator_Exiv2__Iptcdatum_t", "IptcData_iterator *|MetadataIterator< Exiv2::IptcData::iterator,Exiv2::Iptcdatum > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadataIteratorT_Exiv2__XmpData__iterator_Exiv2__Xmpdatum_t = {"_p_MetadataIteratorT_Exiv2__XmpData__iterator_Exiv2__Xmpdatum_t", "XmpData_iterator *|MetadataIterator< Exiv2::XmpData::iterator,Exiv2::Xmpdatum > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadatumPointerBase = {"_p_MetadatumPointerBase", "MetadatumPointerBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadatumPointerT_Exiv2__Exifdatum_t = {"_p_MetadatumPointerT_Exiv2__Exifdatum_t", "Exifdatum_pointer *|MetadatumPointer< Exiv2::Exifdatum > *", 0, 0, (void*)&SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_clientdata, 0};
static swig_type_info _swigt__p_MetadatumPointerT_Exiv2__Iptcdatum_t = {"_p_MetadatumPointerT_Exiv2__Iptcdatum_t", "Iptcdatum_pointer *|MetadatumPointer< Exiv2::Iptcdatum > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadatumPointerT_Exiv2__Xmpdatum_t = {"_p_MetadatumPointerT_Exiv2__Xmpdatum_t", "Xmpdatum_pointer *|MetadatumPointer< Exiv2::Xmpdatum > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadatumReferenceT_Exiv2__Exifdatum_t = {"_p_MetadatumReferenceT_Exiv2__Exifdatum_t", "Exifdatum_reference *|MetadatumReference< Exiv2::Exifdatum > *", 0, 0, (void*)&SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_clientdata, 0};
static swig_type_info _swigt__p_MetadatumReferenceT_Exiv2__Iptcdatum_t = {"_p_MetadatumReferenceT_Exiv2__Iptcdatum_t", "Iptcdatum_reference *|MetadatumReference< Exiv2::Iptcdatum > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MetadatumReferenceT_Exiv2__Xmpdatum_t = {"_p_MetadatumReferenceT_Exiv2__Xmpdatum_t", "Xmpdatum_reference *|MetadatumReference< Exiv2::Xmpdatum > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SwigPyObject = {"_p_SwigPyObject", "SwigPyObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ValueType = {"_p_ValueType", "ValueType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p__TagListFct = {"_p__TagListFct", "_TagListFct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_allocator_type = {"_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_const_iterator = {"_p_const_iterator", "const_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_first_type = {"_p_first_type", "first_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int32_t *|int_fast16_t *|int_fast32_t *|int_least32_t *|intptr_t *|int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_key_type = {"_p_key_type", "key_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int64_t *|int_fast64_t *|int_least64_t *|intmax_t *|long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_mapped_type = {"_p_mapped_type", "mapped_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_second_type = {"_p_second_type", "second_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "int16_t *|int_least16_t *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "int8_t *|int_fast8_t *|int_least8_t *|signed char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_size_type = {"_p_size_type", "size_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Exiv2__Exifdatum_t = {"_p_std__listT_Exiv2__Exifdatum_t", "Exiv2::ExifMetadata *|std::list< Exiv2::Exifdatum > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_Exiv2__Exifdatum_t__iterator = {"_p_std__listT_Exiv2__Exifdatum_t__iterator", "Exiv2::ExifData::iterator *|std::list< Exiv2::Exifdatum >::iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_int32_t_int32_t_t = {"_p_std__pairT_int32_t_int32_t_t", "Exiv2::Rational *|std::pair< int,int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_uint32_t_uint32_t_t = {"_p_std__pairT_uint32_t_uint32_t_t", "Exiv2::URational *|std::pair< unsigned int,unsigned int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "Exiv2::byte *|uint8_t *|uint_fast8_t *|uint_least8_t *|unsigned char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint32_t *|uint_fast16_t *|uint_fast32_t *|uint_least32_t *|uintptr_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint64_t *|uint_fast64_t *|uint_least64_t *|uintmax_t *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16_t *|uint_least16_t *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Exiv2__AsciiValue,
  &_swigt__p_Exiv2__CommentValue,
  &_swigt__p_Exiv2__DataBuf,
  &_swigt__p_Exiv2__DataValue,
  &_swigt__p_Exiv2__DateValue,
  &_swigt__p_Exiv2__DateValue__Date,
  &_swigt__p_Exiv2__ExifData,
  &_swigt__p_Exiv2__ExifKey,
  &_swigt__p_Exiv2__ExifThumb,
  &_swigt__p_Exiv2__ExifThumbC,
  &_swigt__p_Exiv2__Exifdatum,
  &_swigt__p_Exiv2__GroupInfo,
  &_swigt__p_Exiv2__Key,
  &_swigt__p_Exiv2__LangAltValue,
  &_swigt__p_Exiv2__Metadatum,
  &_swigt__p_Exiv2__StringValue,
  &_swigt__p_Exiv2__StringValueBase,
  &_swigt__p_Exiv2__TagInfo,
  &_swigt__p_Exiv2__TimeValue,
  &_swigt__p_Exiv2__TimeValue__Time,
  &_swigt__p_Exiv2__Value,
  &_swigt__p_Exiv2__ValueTypeT_double_t,
  &_swigt__p_Exiv2__ValueTypeT_float_t,
  &_swigt__p_Exiv2__ValueTypeT_int16_t_t,
  &_swigt__p_Exiv2__ValueTypeT_int32_t_t,
  &_swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t,
  &_swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t,
  &_swigt__p_Exiv2__ValueTypeT_uint16_t_t,
  &_swigt__p_Exiv2__ValueTypeT_uint32_t_t,
  &_swigt__p_Exiv2__XmpArrayValue,
  &_swigt__p_Exiv2__XmpTextValue,
  &_swigt__p_Exiv2__XmpValue,
  &_swigt__p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t,
  &_swigt__p_MetadataIteratorT_Exiv2__IptcData__iterator_Exiv2__Iptcdatum_t,
  &_swigt__p_MetadataIteratorT_Exiv2__XmpData__iterator_Exiv2__Xmpdatum_t,
  &_swigt__p_MetadatumPointerBase,
  &_swigt__p_MetadatumPointerT_Exiv2__Exifdatum_t,
  &_swigt__p_MetadatumPointerT_Exiv2__Iptcdatum_t,
  &_swigt__p_MetadatumPointerT_Exiv2__Xmpdatum_t,
  &_swigt__p_MetadatumReferenceT_Exiv2__Exifdatum_t,
  &_swigt__p_MetadatumReferenceT_Exiv2__Iptcdatum_t,
  &_swigt__p_MetadatumReferenceT_Exiv2__Xmpdatum_t,
  &_swigt__p_SwigPyObject,
  &_swigt__p_ValueType,
  &_swigt__p__TagListFct,
  &_swigt__p_allocator_type,
  &_swigt__p_char,
  &_swigt__p_const_iterator,
  &_swigt__p_difference_type,
  &_swigt__p_first_type,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_key_type,
  &_swigt__p_long_long,
  &_swigt__p_mapped_type,
  &_swigt__p_second_type,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_size_type,
  &_swigt__p_std__listT_Exiv2__Exifdatum_t,
  &_swigt__p_std__listT_Exiv2__Exifdatum_t__iterator,
  &_swigt__p_std__ostream,
  &_swigt__p_std__pairT_int32_t_int32_t_t,
  &_swigt__p_std__pairT_uint32_t_uint32_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
};

static swig_cast_info _swigc__p_Exiv2__AsciiValue[] = {  {&_swigt__p_Exiv2__AsciiValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__CommentValue[] = {  {&_swigt__p_Exiv2__CommentValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DataBuf[] = {  {&_swigt__p_Exiv2__DataBuf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DataValue[] = {  {&_swigt__p_Exiv2__DataValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DateValue[] = {  {&_swigt__p_Exiv2__DateValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__DateValue__Date[] = {  {&_swigt__p_Exiv2__DateValue__Date, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ExifData[] = {  {&_swigt__p_Exiv2__ExifData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ExifKey[] = {  {&_swigt__p_Exiv2__ExifKey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ExifThumb[] = {  {&_swigt__p_Exiv2__ExifThumb, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ExifThumbC[] = {  {&_swigt__p_Exiv2__ExifThumbC, 0, 0, 0},  {&_swigt__p_Exiv2__ExifThumb, _p_Exiv2__ExifThumbTo_p_Exiv2__ExifThumbC, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__Exifdatum[] = {  {&_swigt__p_Exiv2__Exifdatum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__GroupInfo[] = {  {&_swigt__p_Exiv2__GroupInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__Key[] = {  {&_swigt__p_Exiv2__Key, 0, 0, 0},  {&_swigt__p_Exiv2__ExifKey, _p_Exiv2__ExifKeyTo_p_Exiv2__Key, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__LangAltValue[] = {  {&_swigt__p_Exiv2__LangAltValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__Metadatum[] = {  {&_swigt__p_Exiv2__Metadatum, 0, 0, 0},  {&_swigt__p_Exiv2__Exifdatum, _p_Exiv2__ExifdatumTo_p_Exiv2__Metadatum, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__StringValue[] = {  {&_swigt__p_Exiv2__StringValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__StringValueBase[] = {  {&_swigt__p_Exiv2__StringValueBase, 0, 0, 0},  {&_swigt__p_Exiv2__AsciiValue, _p_Exiv2__AsciiValueTo_p_Exiv2__StringValueBase, 0, 0},  {&_swigt__p_Exiv2__CommentValue, _p_Exiv2__CommentValueTo_p_Exiv2__StringValueBase, 0, 0},  {&_swigt__p_Exiv2__StringValue, _p_Exiv2__StringValueTo_p_Exiv2__StringValueBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__TagInfo[] = {  {&_swigt__p_Exiv2__TagInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__TimeValue[] = {  {&_swigt__p_Exiv2__TimeValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__TimeValue__Time[] = {  {&_swigt__p_Exiv2__TimeValue__Time, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__Value[] = {  {&_swigt__p_Exiv2__Value, 0, 0, 0},  {&_swigt__p_Exiv2__AsciiValue, _p_Exiv2__AsciiValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__CommentValue, _p_Exiv2__CommentValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__DataValue, _p_Exiv2__DataValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__DateValue, _p_Exiv2__DateValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__LangAltValue, _p_Exiv2__LangAltValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__StringValue, _p_Exiv2__StringValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__StringValueBase, _p_Exiv2__StringValueBaseTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__TimeValue, _p_Exiv2__TimeValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_double_t, _p_Exiv2__ValueTypeT_double_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_float_t, _p_Exiv2__ValueTypeT_float_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_int16_t_t, _p_Exiv2__ValueTypeT_int16_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_int32_t_t, _p_Exiv2__ValueTypeT_int32_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, _p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, _p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_uint16_t_t, _p_Exiv2__ValueTypeT_uint16_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__ValueTypeT_uint32_t_t, _p_Exiv2__ValueTypeT_uint32_t_tTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__XmpArrayValue, _p_Exiv2__XmpArrayValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__XmpTextValue, _p_Exiv2__XmpTextValueTo_p_Exiv2__Value, 0, 0},  {&_swigt__p_Exiv2__XmpValue, _p_Exiv2__XmpValueTo_p_Exiv2__Value, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_double_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_float_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_int16_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_int16_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_int32_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_int32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_uint16_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_uint16_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__ValueTypeT_uint32_t_t[] = {  {&_swigt__p_Exiv2__ValueTypeT_uint32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__XmpArrayValue[] = {  {&_swigt__p_Exiv2__XmpArrayValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__XmpTextValue[] = {  {&_swigt__p_Exiv2__XmpTextValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Exiv2__XmpValue[] = {  {&_swigt__p_Exiv2__XmpValue, 0, 0, 0},  {&_swigt__p_Exiv2__LangAltValue, _p_Exiv2__LangAltValueTo_p_Exiv2__XmpValue, 0, 0},  {&_swigt__p_Exiv2__XmpArrayValue, _p_Exiv2__XmpArrayValueTo_p_Exiv2__XmpValue, 0, 0},  {&_swigt__p_Exiv2__XmpTextValue, _p_Exiv2__XmpTextValueTo_p_Exiv2__XmpValue, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t[] = {  {&_swigt__p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataIteratorT_Exiv2__IptcData__iterator_Exiv2__Iptcdatum_t[] = {  {&_swigt__p_MetadataIteratorT_Exiv2__IptcData__iterator_Exiv2__Iptcdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadataIteratorT_Exiv2__XmpData__iterator_Exiv2__Xmpdatum_t[] = {  {&_swigt__p_MetadataIteratorT_Exiv2__XmpData__iterator_Exiv2__Xmpdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadatumPointerBase[] = {  {&_swigt__p_MetadatumPointerBase, 0, 0, 0},  {&_swigt__p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, _p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_tTo_p_MetadatumPointerBase, 0, 0},  {&_swigt__p_MetadatumPointerT_Exiv2__Exifdatum_t, _p_MetadatumPointerT_Exiv2__Exifdatum_tTo_p_MetadatumPointerBase, 0, 0},  {&_swigt__p_MetadatumReferenceT_Exiv2__Exifdatum_t, _p_MetadatumReferenceT_Exiv2__Exifdatum_tTo_p_MetadatumPointerBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadatumPointerT_Exiv2__Exifdatum_t[] = {  {&_swigt__p_MetadatumPointerT_Exiv2__Exifdatum_t, 0, 0, 0},  {&_swigt__p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t, _p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_tTo_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0, 0},  {&_swigt__p_MetadatumReferenceT_Exiv2__Exifdatum_t, _p_MetadatumReferenceT_Exiv2__Exifdatum_tTo_p_MetadatumPointerT_Exiv2__Exifdatum_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadatumPointerT_Exiv2__Iptcdatum_t[] = {  {&_swigt__p_MetadatumPointerT_Exiv2__Iptcdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadatumPointerT_Exiv2__Xmpdatum_t[] = {  {&_swigt__p_MetadatumPointerT_Exiv2__Xmpdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadatumReferenceT_Exiv2__Exifdatum_t[] = {  {&_swigt__p_MetadatumReferenceT_Exiv2__Exifdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadatumReferenceT_Exiv2__Iptcdatum_t[] = {  {&_swigt__p_MetadatumReferenceT_Exiv2__Iptcdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MetadatumReferenceT_Exiv2__Xmpdatum_t[] = {  {&_swigt__p_MetadatumReferenceT_Exiv2__Xmpdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SwigPyObject[] = {  {&_swigt__p_SwigPyObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ValueType[] = {  {&_swigt__p_ValueType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p__TagListFct[] = {  {&_swigt__p__TagListFct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_allocator_type[] = {  {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_const_iterator[] = {  {&_swigt__p_const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_first_type[] = {  {&_swigt__p_first_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_key_type[] = {  {&_swigt__p_key_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_mapped_type[] = {  {&_swigt__p_mapped_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_second_type[] = {  {&_swigt__p_second_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_size_type[] = {  {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Exiv2__Exifdatum_t[] = {  {&_swigt__p_std__listT_Exiv2__Exifdatum_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_Exiv2__Exifdatum_t__iterator[] = {  {&_swigt__p_std__listT_Exiv2__Exifdatum_t__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_int32_t_int32_t_t[] = {  {&_swigt__p_std__pairT_int32_t_int32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_uint32_t_uint32_t_t[] = {  {&_swigt__p_std__pairT_uint32_t_uint32_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Exiv2__AsciiValue,
  _swigc__p_Exiv2__CommentValue,
  _swigc__p_Exiv2__DataBuf,
  _swigc__p_Exiv2__DataValue,
  _swigc__p_Exiv2__DateValue,
  _swigc__p_Exiv2__DateValue__Date,
  _swigc__p_Exiv2__ExifData,
  _swigc__p_Exiv2__ExifKey,
  _swigc__p_Exiv2__ExifThumb,
  _swigc__p_Exiv2__ExifThumbC,
  _swigc__p_Exiv2__Exifdatum,
  _swigc__p_Exiv2__GroupInfo,
  _swigc__p_Exiv2__Key,
  _swigc__p_Exiv2__LangAltValue,
  _swigc__p_Exiv2__Metadatum,
  _swigc__p_Exiv2__StringValue,
  _swigc__p_Exiv2__StringValueBase,
  _swigc__p_Exiv2__TagInfo,
  _swigc__p_Exiv2__TimeValue,
  _swigc__p_Exiv2__TimeValue__Time,
  _swigc__p_Exiv2__Value,
  _swigc__p_Exiv2__ValueTypeT_double_t,
  _swigc__p_Exiv2__ValueTypeT_float_t,
  _swigc__p_Exiv2__ValueTypeT_int16_t_t,
  _swigc__p_Exiv2__ValueTypeT_int32_t_t,
  _swigc__p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t,
  _swigc__p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t,
  _swigc__p_Exiv2__ValueTypeT_uint16_t_t,
  _swigc__p_Exiv2__ValueTypeT_uint32_t_t,
  _swigc__p_Exiv2__XmpArrayValue,
  _swigc__p_Exiv2__XmpTextValue,
  _swigc__p_Exiv2__XmpValue,
  _swigc__p_MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t,
  _swigc__p_MetadataIteratorT_Exiv2__IptcData__iterator_Exiv2__Iptcdatum_t,
  _swigc__p_MetadataIteratorT_Exiv2__XmpData__iterator_Exiv2__Xmpdatum_t,
  _swigc__p_MetadatumPointerBase,
  _swigc__p_MetadatumPointerT_Exiv2__Exifdatum_t,
  _swigc__p_MetadatumPointerT_Exiv2__Iptcdatum_t,
  _swigc__p_MetadatumPointerT_Exiv2__Xmpdatum_t,
  _swigc__p_MetadatumReferenceT_Exiv2__Exifdatum_t,
  _swigc__p_MetadatumReferenceT_Exiv2__Iptcdatum_t,
  _swigc__p_MetadatumReferenceT_Exiv2__Xmpdatum_t,
  _swigc__p_SwigPyObject,
  _swigc__p_ValueType,
  _swigc__p__TagListFct,
  _swigc__p_allocator_type,
  _swigc__p_char,
  _swigc__p_const_iterator,
  _swigc__p_difference_type,
  _swigc__p_first_type,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_key_type,
  _swigc__p_long_long,
  _swigc__p_mapped_type,
  _swigc__p_second_type,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_size_type,
  _swigc__p_std__listT_Exiv2__Exifdatum_t,
  _swigc__p_std__listT_Exiv2__Exifdatum_t__iterator,
  _swigc__p_std__ostream,
  _swigc__p_std__pairT_int32_t_int32_t_t,
  _swigc__p_std__pairT_uint32_t_uint32_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
static PyTypeObject *builtin_bases[3];

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif

#ifndef SWIG_INIT_CLIENT_DATA_TYPE
#define SWIG_INIT_CLIENT_DATA_TYPE void *
#endif

SWIGRUNTIME void
SWIG_InitializeModule(SWIG_INIT_CLIENT_DATA_TYPE clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        SWIG_Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------
   * Patch %callback methods' docstrings to hold the callback ptrs
   * -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods, const swig_const_info *const_table, swig_type_info **types, swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        const swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif




/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  SWIG_Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, d == md ? public_interface : NULL, "__doc__",SWIG_FromCharPtr("Exif metadatum, container and iterators."));
  
  Python_Exiv2_Exiv2Error = import_from_python("exiv2.""extras","Exiv2Error");
  if (!Python_Exiv2_Exiv2Error)
  return INIT_ERROR_RETURN;
  
  
  Python_Exiv2_ErrorCode = import_from_python("exiv2.""_error","ErrorCode");
  if (!Python_Exiv2_ErrorCode)
  return INIT_ERROR_RETURN;
  
  
  
  /* type 'MetadatumPointer< Exiv2::Exifdatum >' */
  d = PyDict_New();
  
  Python_Exiv2_ByteOrder = import_from_python("exiv2.""_types","ByteOrder");
  if (!Python_Exiv2_ByteOrder)
  return INIT_ERROR_RETURN;
  
  
  
  Python_enum_IntEnum = import_from_python("enum","IntEnum");
  if (!Python_enum_IntEnum)
  return INIT_ERROR_RETURN;
  
  
  Python_Exiv2_TypeId = import_from_python("exiv2.""_types","TypeId");
  if (!Python_Exiv2_TypeId)
  return INIT_ERROR_RETURN;
  
  
  
  _type_object = {
    {
      Exiv2::asciiString,    SWIGTYPE_p_Exiv2__AsciiValue
    },
    {
      Exiv2::unsignedShort,  SWIGTYPE_p_Exiv2__ValueTypeT_uint16_t_t
    },
    {
      Exiv2::unsignedLong,   SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t
    },
    {
      Exiv2::unsignedRational,
      SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_uint32_t_uint32_t_t_t
    },
    {
      Exiv2::signedShort,    SWIGTYPE_p_Exiv2__ValueTypeT_int16_t_t
    },
    {
      Exiv2::signedLong,     SWIGTYPE_p_Exiv2__ValueTypeT_int32_t_t
    },
    {
      Exiv2::signedRational, SWIGTYPE_p_Exiv2__ValueTypeT_std__pairT_int32_t_int32_t_t_t
    },
    {
      Exiv2::tiffFloat,      SWIGTYPE_p_Exiv2__ValueTypeT_float_t
    },
    {
      Exiv2::tiffDouble,     SWIGTYPE_p_Exiv2__ValueTypeT_double_t
    },
    {
      Exiv2::tiffIfd,        SWIGTYPE_p_Exiv2__ValueTypeT_uint32_t_t
    },
    {
      Exiv2::string,         SWIGTYPE_p_Exiv2__StringValue
    },
    {
      Exiv2::date,           SWIGTYPE_p_Exiv2__DateValue
    },
    {
      Exiv2::time,           SWIGTYPE_p_Exiv2__TimeValue
    },
    {
      Exiv2::comment,        SWIGTYPE_p_Exiv2__CommentValue
    },
    {
      Exiv2::xmpText,        SWIGTYPE_p_Exiv2__XmpTextValue
    },
    {
      Exiv2::xmpAlt,         SWIGTYPE_p_Exiv2__XmpArrayValue
    },
    {
      Exiv2::xmpBag,         SWIGTYPE_p_Exiv2__XmpArrayValue
    },
    {
      Exiv2::xmpSeq,         SWIGTYPE_p_Exiv2__XmpArrayValue
    },
    {
      Exiv2::langAlt,        SWIGTYPE_p_Exiv2__LangAltValue
    }
  };
  
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_MetadatumPointerBase");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Exifdatum_pointer' as base 'MetadatumPointerBase' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__MetadatumPointerT_Exiv2__Exifdatum_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "Exifdatum_pointer", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Exifdatum_pointer");
  d = md;
  
  /* type 'MetadataIterator< Exiv2::ExifData::iterator,Exiv2::Exifdatum >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_MetadatumPointerT_Exiv2__Exifdatum_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ExifData_iterator' as base 'MetadatumPointer<(Exiv2::Exifdatum)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__MetadataIteratorT_Exiv2__ExifData__iterator_Exiv2__Exifdatum_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "ExifData_iterator", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ExifData_iterator");
  d = md;
  
  /* type 'MetadatumReference< Exiv2::Exifdatum >' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_MetadatumPointerT_Exiv2__Exifdatum_t");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Exifdatum_reference' as base 'MetadatumPointer<(Exiv2::Exifdatum)>' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__MetadatumReferenceT_Exiv2__Exifdatum_t_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "Exifdatum_reference", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Exifdatum_reference");
  d = md;
  
  /* type 'Exiv2::Exifdatum' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__Metadatum");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'Exifdatum' as base 'Exiv2::Metadatum' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__Exifdatum_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__Exifdatum_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "Exifdatum", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "Exifdatum");
  d = md;
  
  /* type 'Exiv2::ExifThumbC' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ExifThumbC_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ExifThumbC_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "ExifThumbC", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ExifThumbC");
  d = md;
  
  /* type 'Exiv2::ExifThumb' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_basetype = SWIG_MangledTypeQuery("_p_Exiv2__ExifThumbC");
  if (builtin_basetype && builtin_basetype->clientdata && ((SwigPyClientData *) builtin_basetype->clientdata)->pytype) {
    builtin_bases[builtin_base_count++] = ((SwigPyClientData *) builtin_basetype->clientdata)->pytype;
  } else {
    PyErr_SetString(PyExc_TypeError, "Could not create type 'ExifThumb' as base 'Exiv2::ExifThumbC' has not been initialized.\n");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ExifThumb_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ExifThumb_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "ExifThumb", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ExifThumb");
  d = md;
  
  /* type 'Exiv2::ExifData' */
  d = PyDict_New();
  builtin_base_count = 0;
  builtin_bases[builtin_base_count] = NULL;
  PyDict_SetItemString(d, "this", this_descr);
  PyDict_SetItemString(d, "thisown", thisown_descr);
  builtin_pytype = SwigPyBuiltin__Exiv2__ExifData_type_create(metatype, builtin_bases, d);
  if(!builtin_pytype) {
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  SwigPyBuiltin__Exiv2__ExifData_clientdata.pytype = builtin_pytype;
  SWIG_Py_INCREF((PyObject *)builtin_pytype);
  PyModule_AddObject(m, "ExifData", (PyObject *)builtin_pytype);
  SwigPyBuiltin_AddPublicSymbol(public_interface, "ExifData");
  d = md;
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

